import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const p={},e=t(`<hr><h1 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h1><p>在本文中，我们将使用 Spring 和 Java 17 构建一个由 Fauna 数据库服务驱动的博客服务的后端。</p><h1 id="_2-项目设置" tabindex="-1"><a class="header-anchor" href="#_2-项目设置"><span>2. 项目设置</span></a></h1><p>在我们开始构建服务之前，我们需要执行一些初始设置步骤——具体来说，我们需要创建一个 Fauna 数据库和一个空白的 Spring 应用程序。</p><h3 id="_2-1-创建-fauna-数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-创建-fauna-数据库"><span>2.1. 创建 Fauna 数据库</span></a></h3><p><strong>在开始之前，我们需要一个 Fauna 数据库来使用。</strong> 如果我们还没有一个，我们需要在 Fauna 创建一个新账户。</p><p>完成这些后，我们可以创建一个新的数据库。给这个数据库起一个名字和一个地区，并选择不包括演示数据，因为我们想构建我们自己的模式：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.39.16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，<strong>我们需要创建一个安全密钥来从我们的应用程序访问这个数据库。</strong> 我们可以从数据库的安全选项卡中完成这个操作：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.42.27-1024x531.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这里，我们需要选择一个“服务器”角色，并可选地给密钥命名。这意味着该密钥可以访问这个数据库，但只能访问这个数据库。另外，我们有一个“管理员”选项，可以用来访问我们账户中的任何数据库：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.45.21-1024x730.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>完成这些后，<strong>我们需要记下我们的秘密。</strong> 这是访问服务所必需的，但出于安全原因，一旦我们离开这个页面，就不能再获取它了。</p><h3 id="_2-2-创建-spring-应用程序" tabindex="-1"><a class="header-anchor" href="#_2-2-创建-spring-应用程序"><span>2.2. 创建 Spring 应用程序</span></a></h3><p><strong>一旦我们有了数据库，我们就可以创建我们的应用程序。</strong> 由于这将是一个 Spring webapp，我们最好从 Spring Initializr 启动这个项目。</p><p>我们希望选择使用最新发布的 Spring 和最新 LTS 版本的 Java 创建 Maven 项目的选项——在撰写本文时，这些分别是 Spring 2.6.2 和 Java 17。我们还希望选择 Spring Web 和 Spring Security 作为我们服务的依赖项：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.57.39-1024x597.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>完成这些后，我们可以点击“生成”按钮下载我们的启动项目。</p><p>接下来，我们需要将 Fauna 驱动程序添加到我们的项目中。这是通过向生成的 <em>pom.xml</em> 文件添加对它们的依赖来完成的：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`com.faunadb\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`faunadb-java\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`4.2.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`compile\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们应该能够执行 <em>mvn install</em> 并成功下载我们需要的所有内容。</p><h3 id="_2-3-配置-fauna-客户端" tabindex="-1"><a class="header-anchor" href="#_2-3-配置-fauna-客户端"><span>2.3. 配置 Fauna 客户端</span></a></h3><p><strong>一旦我们有了 Spring webapp 可以使用，我们需要一个 Fauna 客户端来使用数据库。</strong></p><p>首先，我们需要进行一些配置。为此，我们将向我们的 <em>application.properties</em> 文件添加两个属性，提供我们数据库的正确值：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">fauna.region</span><span class="token punctuation">=</span><span class="token value attr-value">us</span>
<span class="token key attr-name">fauna.secret</span><span class="token punctuation">=</span><span class="token value attr-value">\`&lt;Secret&gt;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将想要一个新的 Spring 配置类来构建 Fauna 客户端：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">FaunaConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;https://db.\${fauna.region}.fauna.com/&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> faunaUrl<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${fauna.secret}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> faunaSecret<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">FaunaClient</span> <span class="token function">getFaunaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FaunaClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">withEndpoint</span><span class="token punctuation">(</span>faunaUrl<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">withSecret</span><span class="token punctuation">(</span>faunaSecret<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得 <em>FaunaClient</em> 的一个实例对 Spring 上下文可用，其他 bean 可以使用。</p><h1 id="_3-添加用户支持" tabindex="-1"><a class="header-anchor" href="#_3-添加用户支持"><span>3. 添加用户支持</span></a></h1><p><strong>在为我们的 API 添加帖子支持之前，我们需要支持将撰写它们的用户。</strong> 为此，我们将使用 Spring Security 并将其连接到表示用户记录的 Fauna 集合。</p><h3 id="_3-1-创建用户集合" tabindex="-1"><a class="header-anchor" href="#_3-1-创建用户集合"><span>3.1. 创建用户集合</span></a></h3><p><strong>首先，我们想要创建集合。</strong> 这是通过导航到数据库的集合屏幕，使用“新建集合”按钮，并填写表单来完成的。在这种情况下，我们想要创建一个“users”集合，并使用默认设置：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-18-at-08.16.36-1024x625.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们将添加一个用户记录。为此，我们按下集合中的“新建文档”按钮，并提供以下 JSON：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pa55word&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Baeldung&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意，我们在这里以明文形式存储密码。请记住，这是一种非常糟糕的做法，只是为了本教程的方便而这样做。</strong></p><p>最后，我们需要一个索引。每当我们想要通过除引用之外的任何字段访问记录时，我们需要创建一个索引，让我们能够这样做。在这里，我们想要通过用户名访问记录。这是通过按下“新建索引”按钮并填写表单来完成的：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-18-at-09.01.13-1024x985.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在，我们将能够使用“users_by_username”索引编写 FQL 查询来查找我们的用户。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token punctuation">(</span>
  <span class="token class-name">Paginate</span><span class="token punctuation">(</span><span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users_by_username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Lambda</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述将返回我们之前创建的记录。</p><h3 id="_3-2-与-fauna-进行身份验证" tabindex="-1"><a class="header-anchor" href="#_3-2-与-fauna-进行身份验证"><span>3.2. 与 Fauna 进行身份验证</span></a></h3><p><strong>现在我们在 Fauna 中有了用户集合，我们可以配置 Spring Security 以对此进行身份验证。</strong></p><p>为了实现这一点，我们首先需要一个 <em>UserDetailsService</em> 来查找 Fauna 中的用户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FaunaUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FaunaClient</span> faunaClient<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Value</span> user <span class="token operator">=</span> faunaClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">(</span>
              <span class="token class-name">Paginate</span><span class="token punctuation">(</span><span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users_by_username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token class-name">Lambda</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Value</span> userData <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户未找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>userData<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>userData<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要一些 Spring 配置来设置它。这是将上述 <em>UserDetailsService</em> 连接起来的标准的 Spring Security 配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token annotation punctuation">@EnableMethodSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">FaunaClient</span> faunaClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token class-name">CsrfConfigurer</span><span class="token operator">::</span><span class="token function">disable</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>requests <span class="token operator">-&gt;</span> requests<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FaunaUserDetailsService</span><span class="token punctuation">(</span>faunaClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们可以添加标准的 <em>@PreAuthorize</em> 注解到我们的代码中，并根据我们的身份验证详情是否存在于 Fauna 中的“users”集合来接受或拒绝请求。</p><h1 id="_4-添加列出帖子的支持" tabindex="-1"><a class="header-anchor" href="#_4-添加列出帖子的支持"><span>4. 添加列出帖子的支持</span></a></h1><p><strong>如果我们的博客服务不支持帖子的概念，它就不会出色。</strong> 这些是已经编写并可以由其他人阅读的实际博客帖子。</p><h3 id="_4-1-创建帖子集合" tabindex="-1"><a class="header-anchor" href="#_4-1-创建帖子集合"><span>4.1. 创建帖子集合</span></a></h3><p><strong>像以前一样，我们首先需要一个集合来存储帖子。</strong> 这与之前相同，只是称为“posts”而不是“users”。我们将有四个字段：</p><ul><li>title – 帖子的标题。</li><li>content – 帖子的内容。</li><li>created – 帖子撰写的时间戳。</li><li>authorRef – 帖子作者的“users”记录的引用。</li></ul><p>我们还将需要两个索引。第一个是“posts_by_author”，它将允许我们搜索具有特定作者的“posts”记录：</p><p>第二个索引将是“posts_sort_by_created继续翻译：</p><p>_desc”。这将允许我们按创建日期排序结果，以便首先返回最近创建的帖子。我们需要以不同方式创建此索引，因为它依赖于 Web UI 中不可用的功能 - 表明索引存储的值是相反的顺序。</p><p>为此，我们需要在 Fauna Shell 中执行一段 FQL：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;posts_sort_by_created_desc&quot;</span><span class="token punctuation">,</span>
  source<span class="token operator">:</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  terms<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  values<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Web UI 所做的一切都可以在这种方式中完成，这允许我们更精确地控制要执行的操作。</strong></p><p>然后，我们可以在 Fauna Shell 中创建一个帖子，以获取一些起始数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Create</span><span class="token punctuation">(</span>
  <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&quot;My First Post&quot;</span><span class="token punctuation">,</span>
      contents<span class="token operator">:</span> <span class="token string">&quot;This is my first post&quot;</span><span class="token punctuation">,</span>
      created<span class="token operator">:</span> <span class="token class-name">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      authorRef<span class="token operator">:</span> <span class="token class-name">Select</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users_by_username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们需要确保“authorRef”的值是我们之前创建的“users”记录中的正确值。我们通过查询“users_by_username”索引来获取 ref，通过查找我们的用户名来实现。</p><h3 id="_4-2-帖子服务" tabindex="-1"><a class="header-anchor" href="#_4-2-帖子服务"><span>4.2. 帖子服务</span></a></h3><p><strong>现在 Fauna 中有了对帖子的支持，我们可以在应用程序中构建一个服务层来处理它。</strong></p><p>首先，我们需要一些 Java 记录来表示我们正在获取的数据。这将包括一个 <em>Author</em> 和一个 <em>Post</em> 记录类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">Author</span> author<span class="token punctuation">,</span> <span class="token class-name">Instant</span> created<span class="token punctuation">,</span> <span class="token class-name">Long</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以开始我们的 Posts 服务。这将是一个 Spring 组件，它包装 <em>FaunaClient</em> 并使用它来访问数据存储：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostsService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">FaunaClient</span> faunaClient<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-获取所有帖子" tabindex="-1"><a class="header-anchor" href="#_4-3-获取所有帖子"><span>4.3. 获取所有帖子</span></a></h3><p><strong>在 <em>PostsService</em> 中，我们现在可以实现一个方法来获取所有帖子。</strong> 在这一点上，我们不打算担心适当的分页，而只是使用默认值 - 这意味着结果集中的前 64 个文档。</p><p>为了实现这一点，我们将向我们的 <em>PostsService</em> 类添加以下方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> postsResult <span class="token operator">=</span> faunaClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">(</span>
      <span class="token class-name">Paginate</span><span class="token punctuation">(</span>
        <span class="token class-name">Join</span><span class="token punctuation">(</span>
          <span class="token class-name">Documents</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;posts_sort_by_created_desc&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Lambda</span><span class="token punctuation">(</span>
        <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;extra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Obj</span><span class="token punctuation">(</span>
          <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">(</span><span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;authorRef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> posts <span class="token operator">=</span> postsResult<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCollectionOf</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">parsePost</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这执行了一个查询，以检索“posts”集合中的每个文档，并根据“posts_sort_by_created_desc”索引进行排序。</strong> 然后应用一个 Lambda 来构建响应，由每个条目的两个文档组成 - 本身的帖子和帖子的作者。</p><p>现在，我们需要能够将此响应转换回我们的 <em>Post</em> 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Post</span> <span class="token function">parsePost</span><span class="token punctuation">(</span><span class="token class-name">Value</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> author <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> post <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>
      post<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">Value<span class="token punctuation">.</span>RefV</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      post<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      post<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;contents&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>
        author<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        author<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      post<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      post<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将从我们的查询中获取单个结果，提取其所有值，并构建我们更丰富的对象。</p><p>请注意，“ts”字段是记录最后更新时间的时间戳，但它不是 Fauna 的 <em>Timestamp</em> 类型。相反，它是一个表示自 UNIX 纪元以来的微秒数的 <em>Long</em>。在这种情况下，我们将其视为一个不透明的版本标识符，而不是解析为时间戳。</p><p>我们还想检索特定作者撰写的所有帖子，而不仅仅是曾经写过的每个帖子。<strong>这是通过使用我们的“posts_by_author”索引而不是匹配每个文档来实现的。</strong></p><p>我们还将链接到“users_by_username”索引，以便按用户名而不是用户记录的 ref 进行查询。</p><p>为此，我们将向 <em>PostsService</em> 类添加一个新方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token function">getAuthorPosts</span><span class="token punctuation">(</span><span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> postsResult <span class="token operator">=</span> faunaClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">(</span>
      <span class="token class-name">Paginate</span><span class="token punctuation">(</span>
        <span class="token class-name">Join</span><span class="token punctuation">(</span>
          <span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;posts_by_author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Select</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users_by_username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;posts_sort_by_created_desc&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Lambda</span><span class="token punctuation">(</span>
        <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;extra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Obj</span><span class="token punctuation">(</span>
          <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">(</span><span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;authorRef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> posts <span class="token operator">=</span> postsResult<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCollectionOf</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">parsePost</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-帖子控制器" tabindex="-1"><a class="header-anchor" href="#_4-5-帖子控制器"><span>4.5. 帖子控制器</span></a></h3><p><strong>现在我们能够为我们的服务编写帖子控制器，它将允许 HTTP 请求来检索帖子。</strong> 这将在“/posts” URL 上监听，并将返回所有帖子，或者根据是否提供了“author”参数，返回单个作者的帖子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/posts&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostsController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PostsService</span> postsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token function">listPosts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> author <span class="token operator">==</span> <span class="token keyword">null</span>
          <span class="token operator">?</span> postsService<span class="token punctuation">.</span><span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> postsService<span class="token punctuation">.</span><span class="token function">getAuthorPosts</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这一点上，我们可以启动应用程序，并向 <em>/posts</em> 或 <em>/posts?author=baeldung</em> 发送请求，并获得结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;baeldung&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Introduction to FaunaDB with Spring&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-01-25T07:36:24.563534Z&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;321742264960286786&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Introduction to FaunaDB with Spring&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1643096184600000</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;baeldung&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;This is my second post&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-01-25T07:34:38.303614Z&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;321742153548038210&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My Second Post&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1643096078350000</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;baeldung&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;This is my first post&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-01-25T07:34:29.873590Z&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;321742144715882562&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My First Post&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1643096069920000</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-创建和更新帖子" tabindex="-1"><a class="header-anchor" href="#_5-创建和更新帖子"><span>5. 创建和更新帖子</span></a></h1><p>到目前为止，我们有一个完全只读的服务，可以让我们获取最新的帖子。<strong>然而，为了更有帮助，我们也想创建和更新帖子。</strong></p><h3 id="_5-1-创建新帖子" tabindex="-1"><a class="header-anchor" href="#_5-1-创建新帖子"><span>5.1. 创建新帖子</span></a></h3><p>首先，我们将支持创建新帖子。为此，我们将向我们的 <em>PostsService</em> 添加一个新方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> contents<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    faunaClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token class-name">Create</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Obj</span><span class="token punctuation">(</span>
          <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span>
            <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;contents&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;authorRef&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Select</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Match</span><span class="token punctuation">(</span><span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users_by_username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这看起来很熟悉，那是因为它与我们之前在 Fauna shell 中创建新帖子时的 Java 等价物。</p><p>接下来，我们可以向 _</p>`,94),o=[e];function c(u,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-21-Building a Web App Using Fauna and Spring for Your First Web Agency Client.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-21/2024-07-21-Building%20a%20Web%20App%20Using%20Fauna%20and%20Spring%20for%20Your%20First%20Web%20Agency%20Client.html","title":"1. 引言","lang":"zh-CN","frontmatter":{"date":"2022-03-18T00:00:00.000Z","category":["Spring","FaunaDB"],"tag":["Spring","FaunaDB","Java"],"head":[["meta",{"name":"keywords","content":"FaunaDB, Spring, Java, Web Application"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-21/2024-07-21-Building%20a%20Web%20App%20Using%20Fauna%20and%20Spring%20for%20Your%20First%20Web%20Agency%20Client.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"1. 引言"}],["meta",{"property":"og:description","content":"1. 引言 在本文中，我们将使用 Spring 和 Java 17 构建一个由 Fauna 数据库服务驱动的博客服务的后端。 2. 项目设置 在我们开始构建服务之前，我们需要执行一些初始设置步骤——具体来说，我们需要创建一个 Fauna 数据库和一个空白的 Spring 应用程序。 2.1. 创建 Fauna 数据库 在开始之前，我们需要一个 Faun..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.39.16.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-21T06:42:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"FaunaDB"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-21T06:42:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 引言\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.39.16.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.42.27-1024x531.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.45.21-1024x730.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-17-at-07.57.39-1024x597.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-18-at-08.16.36-1024x625.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/Screenshot-2022-01-18-at-09.01.13-1024x985.png\\"],\\"datePublished\\":\\"2022-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-21T06:42:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"1. 引言 在本文中，我们将使用 Spring 和 Java 17 构建一个由 Fauna 数据库服务驱动的博客服务的后端。 2. 项目设置 在我们开始构建服务之前，我们需要执行一些初始设置步骤——具体来说，我们需要创建一个 Fauna 数据库和一个空白的 Spring 应用程序。 2.1. 创建 Fauna 数据库 在开始之前，我们需要一个 Faun..."},"headers":[{"level":3,"title":"2.1. 创建 Fauna 数据库","slug":"_2-1-创建-fauna-数据库","link":"#_2-1-创建-fauna-数据库","children":[]},{"level":3,"title":"2.2. 创建 Spring 应用程序","slug":"_2-2-创建-spring-应用程序","link":"#_2-2-创建-spring-应用程序","children":[]},{"level":3,"title":"2.3. 配置 Fauna 客户端","slug":"_2-3-配置-fauna-客户端","link":"#_2-3-配置-fauna-客户端","children":[]},{"level":3,"title":"3.1. 创建用户集合","slug":"_3-1-创建用户集合","link":"#_3-1-创建用户集合","children":[]},{"level":3,"title":"3.2. 与 Fauna 进行身份验证","slug":"_3-2-与-fauna-进行身份验证","link":"#_3-2-与-fauna-进行身份验证","children":[]},{"level":3,"title":"4.1. 创建帖子集合","slug":"_4-1-创建帖子集合","link":"#_4-1-创建帖子集合","children":[]},{"level":3,"title":"4.2. 帖子服务","slug":"_4-2-帖子服务","link":"#_4-2-帖子服务","children":[]},{"level":3,"title":"4.3. 获取所有帖子","slug":"_4-3-获取所有帖子","link":"#_4-3-获取所有帖子","children":[]},{"level":3,"title":"4.5. 帖子控制器","slug":"_4-5-帖子控制器","link":"#_4-5-帖子控制器","children":[]},{"level":3,"title":"5.1. 创建新帖子","slug":"_5-1-创建新帖子","link":"#_5-1-创建新帖子","children":[]}],"git":{"createdTime":1721544177000,"updatedTime":1721544177000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.04,"words":3012},"filePathRelative":"posts/baeldung/2024-07-21/2024-07-21-Building a Web App Using Fauna and Spring for Your First Web Agency Client.md","localizedDate":"2022年3月18日","excerpt":"<hr>\\n<h1>1. 引言</h1>\\n<p>在本文中，我们将使用 Spring 和 Java 17 构建一个由 Fauna 数据库服务驱动的博客服务的后端。</p>\\n<h1>2. 项目设置</h1>\\n<p>在我们开始构建服务之前，我们需要执行一些初始设置步骤——具体来说，我们需要创建一个 Fauna 数据库和一个空白的 Spring 应用程序。</p>\\n<h3>2.1. 创建 Fauna 数据库</h3>\\n<p><strong>在开始之前，我们需要一个 Fauna 数据库来使用。</strong> 如果我们还没有一个，我们需要在 Fauna 创建一个新账户。</p>\\n<p>完成这些后，我们可以创建一个新的数据库。给这个数据库起一个名字和一个地区，并选择不包括演示数据，因为我们想构建我们自己的模式：</p>","autoDesc":true}');export{r as comp,d as data};
