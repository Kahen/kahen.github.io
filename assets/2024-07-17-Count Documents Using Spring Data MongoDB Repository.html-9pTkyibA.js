import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as p,a as s,b as n,d as a}from"./app-DWhzy7sT.js";const o={},c=s(`<hr><h1 id="使用spring-data-mongodb-repository统计文档数量" tabindex="-1"><a class="header-anchor" href="#使用spring-data-mongodb-repository统计文档数量"><span>使用Spring Data MongoDB Repository统计文档数量</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将看到使用Spring Data MongoDB统计集合中文档数量的不同方法。我们将使用_MongoRepository_中提供的所有工具。</p><p>我们将使用注解、查询方法以及_CrudRepository_中的方法。此外，我们还将构建一个简单的服务来聚合我们不同的用例。</p><h2 id="_2-使用案例设置" tabindex="-1"><a class="header-anchor" href="#_2-使用案例设置"><span>2. 使用案例设置</span></a></h2><p>我们的使用案例包括一个模型类、一个仓库和一个服务类。此外，我们将创建一个测试类来帮助我们确保一切按预期工作。</p><h3 id="_2-1-创建模型" tabindex="-1"><a class="header-anchor" href="#_2-1-创建模型"><span>2.1. 创建模型</span></a></h3><p>我们将从创建我们的模型类开始。它将基于汽车的一些属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们省略了ID属性，因为我们的示例中不需要它。此外，我们添加了一个构造函数，该构造函数接受_brand_属性作为参数，以便测试更简单。</p><h3 id="_2-2-定义仓库" tabindex="-1"><a class="header-anchor" href="#_2-2-定义仓库"><span>2.2. 定义仓库</span></a></h3><p>让我们定义我们的仓库，不包含任何方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们考虑使用字符串ID，尽管我们没有在模型中声明ID属性。这是因为MongoDB会创建一个默认的唯一ID，我们仍然可以通过findById()访问它，如果我们想要的话。</p><h3 id="_2-3-定义服务类" tabindex="-1"><a class="header-anchor" href="#_2-3-定义服务类"><span>2.3. 定义服务类</span></a></h3><p>我们的服务将利用Spring Data Repository接口的不同方式。</p><p><strong>让我们定义它，并引用我们的仓库：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountCarService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CarRepository</span> repo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在下一节中构建这个类，涵盖示例。</p><h3 id="_2-4-准备测试" tabindex="-1"><a class="header-anchor" href="#_2-4-准备测试"><span>2.4. 准备测试</span></a></h3><p>我们所有的测试都将在我们的服务类上运行。我们只需要一些设置，以避免代码重复：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountCarServiceIntegrationTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CountCarService</span> service<span class="token punctuation">;</span>

    <span class="token class-name">Car</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;B-A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        service<span class="token punctuation">.</span><span class="token function">insertCar</span><span class="token punctuation">(</span>car1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">insertCar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;B-B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们将在每个测试之前运行此块，以简化我们的测试场景。</strong> 此外，我们在init()之外定义_car1_，以便在后续测试中访问它。</p><h2 id="_3-使用-crudrepository" tabindex="-1"><a class="header-anchor" href="#_3-使用-crudrepository"><span>3. 使用_CrudRepository_</span></a></h2><p><strong>当使用_MongoRepository_（它扩展了_CrudRepository_）时，我们可以访问基本功能，包括一个_count()_方法。</strong></p><h3 id="_3-1-count-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-count-方法"><span>3.1. _count()_方法</span></a></h3><p>因此，在我们的第一个计数示例中，没有在我们的仓库中定义任何方法，我们可以直接在我们的服务中调用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCountWithCrudRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> repo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以测试它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenAllDocs_whenCrudRepositoryCount_thenCountEqualsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>\`\` all <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> count <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCountWithCrudRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> all<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们确保_count()_输出的数字与我们集合中所有文档的列表大小相同。</p><p><strong>最重要的是，我们必须记住，计数操作比列出所有文档更具成本效益。</strong> 这在性能和减少代码方面都是如此。对于小集合来说，这不会有太大区别，但对于大集合，我们可能会遇到OutOfMemoryError。<strong>简而言之，通过列出整个集合来计数文档不是一个好主意。</strong></p><h3 id="_3-2-使用-example-对象进行过滤" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-example-对象进行过滤"><span>3.2. 使用_Example_对象进行过滤</span></a></h3><p>_CrudRepository_还可以帮助我们，如果我们想要统计具有特定属性值的文档。<strong>_count()_方法有一个重载版本，它接收一个Example对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCountWithExample</span><span class="token punctuation">(</span><span class="token class-name">Car</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> repo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，这简化了任务。<strong>现在我们只需要用我们想要过滤的属性填充一个对象，Spring会完成其余的工作。</strong> 让我们在我们的测试中涵盖它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFilteredDocs_whenExampleCount_thenCountEqualsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> all <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>car <span class="token operator">-&gt;</span> car<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> count <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCountWithExample</span><span class="token punctuation">(</span>car1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-query注解" tabindex="-1"><a class="header-anchor" href="#_4-使用-query注解"><span>4. 使用@Query注解</span></a></h2><p>我们的下一个示例将基于_@Query_注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token class-name">Long</span> <span class="token function">countWithAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须指定_value_属性，否则Spring会尝试从我们的方法名创建查询。<strong>但是，因为我们想要统计所有文档，我们简单地指定一个空查询。</strong></p><p><strong>然后，我们通过将_count_属性设置为_true_来指定此查询的结果应为计数投影。</strong></p><p>让我们测试它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenAllDocs_whenQueryAnnotationCount_thenCountEqualsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>\`\` all <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> count <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCountWithQueryAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> all<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-按属性过滤" tabindex="-1"><a class="header-anchor" href="#_4-1-按属性过滤"><span>4.1. 按属性过滤</span></a></h3><p><strong>我们可以扩展我们的示例，按_brand_过滤。</strong> 让我们在我们的仓库中添加一个新的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;{brand: ?0}&quot;</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">countBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的查询_value_中，我们指定了完整的MongoDB风格的查询。“<em>?0</em>”占位符代表我们方法的第一个参数，它将是我们查询参数的值。</p>`,49),i=n("p",null,[a("MongoDB查询具有JSON结构，我们指定我们想要过滤的字段名称和值。因此，当我们调用_countBrand(“A”)"),n("em",{"brand:":"","“A”":""},"时，查询转换为"),a("_。这意味着我们将按_brand_属性值为“A”的项目过滤我们的集合。")],-1),l=s(`<h2 id="_5-编写派生查询方法" tabindex="-1"><a class="header-anchor" href="#_5-编写派生查询方法"><span>5. 编写派生查询方法</span></a></h2><p>派生查询方法是我们仓库中的任何方法，不包括带有_value_的_@Query_注解。这些方法通过名称由Spring解析，因此我们不必编写查询。</p><p><strong>由于我们已经在_CrudRepository_中有了_count()_方法，让我们创建一个示例，按特定品牌进行计数：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Long</span> <span class="token function">countByBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>此方法将统计所有_brand_属性与参数值匹配的文档。</strong></p><p>现在，让我们将其添加到我们的服务中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCountBrandWithQueryMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> repo<span class="token punctuation">.</span><span class="token function">countByBrand</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过将其与过滤流计数操作进行比较，确保我们的方法行为正确：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFilteredDocs_whenQueryMethodCountByBrand_thenCountEqualsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> filter <span class="token operator">=</span> <span class="token string">&quot;B-A&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> all <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>car <span class="token operator">-&gt;</span> car<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> count <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCountBrandWithQueryMethod</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种方法在我们只需要编写少数不同的查询时效果很好。</strong> 但是，如果我们需要太多的不同计数查询，它可能会变得难以维护。</p><h2 id="_6-使用criteria使用动态计数查询" tabindex="-1"><a class="header-anchor" href="#_6-使用criteria使用动态计数查询"><span>6. 使用Criteria使用动态计数查询</span></a></h2><p><strong>当我们需要更健壮的东西时，我们可以使用带有_Query_对象的_Criteria_。</strong></p><p>但是，要运行_Query_，我们需要_MongoTemplate_。它在启动时实例化，并在_SimpleMongoRepository_中的_mongoOperations_字段中提供。</p><p>一种方法是扩展_SimpleMongoRepository_并创建自定义实现，而不是简单地扩展_MongoRepository_。但是，有更简单的方法。我们可以将其注入到我们的服务中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以创建我们的新计数方法，将_Query_传递给_MongoTemplate_中的_count()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCountBrandWithCriteria</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mongo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种方法在我们需要创建动态查询时很有用。</strong> 我们完全控制如何创建投影。</p><h3 id="_6-1-使用-example-对象进行过滤" tabindex="-1"><a class="header-anchor" href="#_6-1-使用-example-对象进行过滤"><span>6.1. 使用_Example_对象进行过滤</span></a></h3><p><strong>_Criteria_对象还允许我们传递一个_Example_对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCountWithExampleCriteria</span><span class="token punctuation">(</span><span class="token class-name">Car</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">byExample</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mongo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得按属性过滤更容易，同时仍然允许动态部分。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们看到了使用Spring Data MongoDB仓库方法进行计数投影的不同方式。</p><p>我们使用了可用的方法，并使用不同的方法创建了新的方法。此外，我们通过将我们的计数方法与列出集合中的所有对象进行比较来创建测试。同样，我们了解到为什么那样计数不是一个好主意。</p><p>此外，我们更深入地使用了_MongoTemplate_来创建更动态的计数查询。</p><p>并且，一如既往，源代码可在GitHub上获取。</p>`,27),u=[c,i,l];function r(d,k){return p(),e("div",null,u)}const g=t(o,[["render",r],["__file","2024-07-17-Count Documents Using Spring Data MongoDB Repository.html.vue"]]),_=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Count%20Documents%20Using%20Spring%20Data%20MongoDB%20Repository.html","title":"使用Spring Data MongoDB Repository统计文档数量","lang":"zh-CN","frontmatter":{"date":"2024-07-17T00:00:00.000Z","category":["Spring Data MongoDB","MongoDB"],"tag":["MongoDB","Spring Data","Count","Repository"],"head":[["meta",{"name":"keywords","content":"Spring Data MongoDB, MongoDB, Count, Repository"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Count%20Documents%20Using%20Spring%20Data%20MongoDB%20Repository.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring Data MongoDB Repository统计文档数量"}],["meta",{"property":"og:description","content":"使用Spring Data MongoDB Repository统计文档数量 1. 概述 在本教程中，我们将看到使用Spring Data MongoDB统计集合中文档数量的不同方法。我们将使用_MongoRepository_中提供的所有工具。 我们将使用注解、查询方法以及_CrudRepository_中的方法。此外，我们还将构建一个简单的服务来聚..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T00:29:04.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:tag","content":"Spring Data"}],["meta",{"property":"article:tag","content":"Count"}],["meta",{"property":"article:tag","content":"Repository"}],["meta",{"property":"article:published_time","content":"2024-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T00:29:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring Data MongoDB Repository统计文档数量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T00:29:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring Data MongoDB Repository统计文档数量 1. 概述 在本教程中，我们将看到使用Spring Data MongoDB统计集合中文档数量的不同方法。我们将使用_MongoRepository_中提供的所有工具。 我们将使用注解、查询方法以及_CrudRepository_中的方法。此外，我们还将构建一个简单的服务来聚..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用案例设置","slug":"_2-使用案例设置","link":"#_2-使用案例设置","children":[{"level":3,"title":"2.1. 创建模型","slug":"_2-1-创建模型","link":"#_2-1-创建模型","children":[]},{"level":3,"title":"2.2. 定义仓库","slug":"_2-2-定义仓库","link":"#_2-2-定义仓库","children":[]},{"level":3,"title":"2.3. 定义服务类","slug":"_2-3-定义服务类","link":"#_2-3-定义服务类","children":[]},{"level":3,"title":"2.4. 准备测试","slug":"_2-4-准备测试","link":"#_2-4-准备测试","children":[]}]},{"level":2,"title":"3. 使用_CrudRepository_","slug":"_3-使用-crudrepository","link":"#_3-使用-crudrepository","children":[{"level":3,"title":"3.1. _count()_方法","slug":"_3-1-count-方法","link":"#_3-1-count-方法","children":[]},{"level":3,"title":"3.2. 使用_Example_对象进行过滤","slug":"_3-2-使用-example-对象进行过滤","link":"#_3-2-使用-example-对象进行过滤","children":[]}]},{"level":2,"title":"4. 使用@Query注解","slug":"_4-使用-query注解","link":"#_4-使用-query注解","children":[{"level":3,"title":"4.1. 按属性过滤","slug":"_4-1-按属性过滤","link":"#_4-1-按属性过滤","children":[]}]},{"level":2,"title":"5. 编写派生查询方法","slug":"_5-编写派生查询方法","link":"#_5-编写派生查询方法","children":[]},{"level":2,"title":"6. 使用Criteria使用动态计数查询","slug":"_6-使用criteria使用动态计数查询","link":"#_6-使用criteria使用动态计数查询","children":[{"level":3,"title":"6.1. 使用_Example_对象进行过滤","slug":"_6-1-使用-example-对象进行过滤","link":"#_6-1-使用-example-对象进行过滤","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721176144000,"updatedTime":1721176144000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.3,"words":1891},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Count Documents Using Spring Data MongoDB Repository.md","localizedDate":"2024年7月17日","excerpt":"<hr>\\n<h1>使用Spring Data MongoDB Repository统计文档数量</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将看到使用Spring Data MongoDB统计集合中文档数量的不同方法。我们将使用_MongoRepository_中提供的所有工具。</p>\\n<p>我们将使用注解、查询方法以及_CrudRepository_中的方法。此外，我们还将构建一个简单的服务来聚合我们不同的用例。</p>\\n<h2>2. 使用案例设置</h2>\\n<p>我们的使用案例包括一个模型类、一个仓库和一个服务类。此外，我们将创建一个测试类来帮助我们确保一切按预期工作。</p>","autoDesc":true}');export{g as comp,_ as data};
