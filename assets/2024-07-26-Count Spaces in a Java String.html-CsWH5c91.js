import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C5QtKXnb.js";const p={},e=t(`<hr><h1 id="在java字符串中计算空格数量" tabindex="-1"><a class="header-anchor" href="#在java字符串中计算空格数量"><span>在Java字符串中计算空格数量</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>当我们处理Java字符串时，有时我们可能希望计算字符串中的空格数量。</p><p>有多种方法可以得到结果。在这个快速教程中，我们将通过示例看到如何完成这个任务。</p><h2 id="_2-示例输入字符串" tabindex="-1"><a class="header-anchor" href="#_2-示例输入字符串"><span>2. 示例输入字符串</span></a></h2><p>首先，让我们准备一个输入字符串作为示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">INPUT_STRING</span> <span class="token operator">=</span> <span class="token string">&quot;  This string has nine spaces and a Tab:&#39;\\t&#39;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的字符串包含九个空格和一个制表符，制表符用单引号括起来。<strong>我们的目标是仅在给定的输入字符串中计算空格字符</strong>。</p><p>因此，我们的预期结果是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token constant">EXPECTED_COUNT</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们探索各种解决方案以获得正确的结果。</p><p>我们将首先使用Java标准库解决问题，然后我们将使用一些流行的外部库。</p><p>最后，在本教程中，我们将在单元测试方法中解决所有解决方案。</p><h2 id="_3-使用java标准库" tabindex="-1"><a class="header-anchor" href="#_3-使用java标准库"><span>3. 使用Java标准库</span></a></h2><h3 id="_3-1-经典解决方案-循环和计数" tabindex="-1"><a class="header-anchor" href="#_3-1-经典解决方案-循环和计数"><span>3.1. 经典解决方案：循环和计数</span></a></h3><p>这可能是解决这个问题最直接的想法。</p><p>我们遍历输入字符串中的所有字符。同时，我们维护一个计数变量，并在看到空格字符时增加计数器。</p><p>最后，我们将得到字符串中的空格计数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceByLooping_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> <span class="token constant">INPUT_STRING</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            spaceCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-使用java-8的stream-api" tabindex="-1"><a class="header-anchor" href="#_3-2-使用java-8的stream-api"><span>3.2. 使用Java 8的Stream API</span></a></h3><p>自Java 8以来，Stream API已经存在。</p><p>此外，<strong>自Java 9以来，在_String_类中添加了一个新的_chars()_方法，将_String_中的_char_值转换为_IntStream_实例</strong>。</p><p>如果我们使用Java 9或更高版本，我们可以结合这两个功能，用一行代码解决问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceByJava8StreamFilter_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> spaceCount <span class="token operator">=</span> <span class="token constant">INPUT_STRING</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">-&gt;</span> c <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-使用regex的-matcher-find-方法" tabindex="-1"><a class="header-anchor" href="#_3-3-使用regex的-matcher-find-方法"><span>3.3. 使用Regex的_Matcher.find()_方法</span></a></h3><p>到目前为止，我们已经看到了通过在给定字符串中搜索空格字符来计数的解决方案。我们使用_character == ‘ ‘_来检查一个字符是否是空格字符。</p><p><strong>正则表达式（Regex）是另一种强大的字符串搜索工具，Java对Regex有很好的支持</strong>。</p><p>因此，我们可以定义一个空格作为模式，并使用_Matcher.find()_方法来检查模式是否在输入字符串中找到。</p><p>此外，为了得到空格的计数，我们每次找到模式时就增加一个计数器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceByRegexMatcher_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token constant">INPUT_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        spaceCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-使用-string-replaceall-方法" tabindex="-1"><a class="header-anchor" href="#_3-4-使用-string-replaceall-方法"><span>3.4. 使用_String.replaceAll()_方法</span></a></h3><p>使用_Matcher.find()_方法搜索和查找空格非常简单。然而，既然我们谈论的是Regex，还可以有其他快速的方法来计数空格。</p><p>我们知道可以使用_String.replaceAll()_方法进行“搜索和替换”。</p><p>因此，<strong>如果我们将输入字符串中的所有非空格字符替换为空字符串，所有的空格将从输入中得到结果</strong>。</p><p>所以，如果我们想要得到计数，结果字符串的长度将是答案。接下来，让我们尝试这个想法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceByReplaceAll_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token constant">INPUT_STRING</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;[^ ]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，我们只需要一行代码就可以得到计数。</p><p>值得一提的是，在_String.replaceAll()<em>调用中，我们使用了模式</em>“\\[^ \\]”<em>而不是</em>“\\\\\\S”_。这是因为我们希望替换非空格字符而不仅仅是非空白字符。</p><h3 id="_3-5-使用-string-split-方法" tabindex="-1"><a class="header-anchor" href="#_3-5-使用-string-split-方法"><span>3.5. 使用_String.split()_方法</span></a></h3><p>我们已经看到使用_String.replaceAll()_方法的解决方案是整洁且紧凑的。现在，让我们看看另一种解决问题的想法：使用_String.split()_方法。</p><p>正如我们所知，我们可以将一个模式传递给_String.split()_方法，并得到一个字符串数组，该数组由模式分隔。</p><p>因此，想法是，<strong>我们可以按单个空格分隔输入字符串。然后，原始字符串中的空格计数将比字符串数组长度少一个</strong>。</p><p>现在，让我们看看这个想法是否有效：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceBySplit_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token constant">INPUT_STRING</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用外部库" tabindex="-1"><a class="header-anchor" href="#_4-使用外部库"><span>4. 使用外部库</span></a></h2><p>Apache Commons Lang 3库在Java项目中广泛使用。此外，Spring是Java爱好者中流行的框架。</p><p>这两个库都提供了一个方便的字符串工具类。</p><p>现在，让我们看看如何使用这些库在输入字符串中计数空格。</p><h3 id="_4-1-使用apache-commons-lang-3库" tabindex="-1"><a class="header-anchor" href="#_4-1-使用apache-commons-lang-3库"><span>4.1. 使用Apache Commons Lang 3库</span></a></h3><p>Apache Commons Lang 3库提供了一个_StringUtil_类，其中包含许多方便的与字符串相关的方法。</p><p><strong>要计算字符串中的空格数量，我们可以使用这个类中的_countMatches()_方法</strong>。</p><p>在我们开始使用_StringUtil_类之前，我们应该检查库是否在类路径中。我们可以通过在_pom.xml_中添加最新版本的依赖来实现：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.apache.commons\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`commons-lang3\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`3.14.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们创建一个单元测试来展示如何使用这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceUsingApacheCommons_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">countMatches</span><span class="token punctuation">(</span><span class="token constant">INPUT_STRING</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-使用spring" tabindex="-1"><a class="header-anchor" href="#_4-2-使用spring"><span>4.2. 使用Spring</span></a></h3><p>如今，许多Java项目都基于Spring框架。因此，如果我们使用Spring，Spring已经准备好了一个方便的字符串工具：<em>StringUtils</em>。</p><p>是的，它的名字与Apache Commons Lang 3中的类相同。此外，它提供了一个_countOccurrencesOf()_方法来计算字符串中字符的出现次数。</p><p>这正是我们要找的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenString_whenCountSpaceUsingSpring_thenReturnsExpectedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> spaceCount <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">countOccurrencesOf</span><span class="token punctuation">(</span><span class="token constant">INPUT_STRING</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>spaceCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这篇文章中，我们讨论了在输入字符串中计数空格字符的不同方法。</p><p>一如既往，文章的代码可以在GitHub上找到。</p>`,64),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","2024-07-26-Count Spaces in a Java String.html.vue"]]),k=JSON.parse(`{"path":"/posts/baeldung/2024-07-26/2024-07-26-Count%20Spaces%20in%20a%20Java%20String.html","title":"在Java字符串中计算空格数量","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","String Manipulation"],"tag":["Java","String","Spaces Count"],"head":[["meta",{"name":"keywords","content":"Java String, Count Spaces, String Manipulation"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Count%20Spaces%20in%20a%20Java%20String.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java字符串中计算空格数量"}],["meta",{"property":"og:description","content":"在Java字符串中计算空格数量 1. 概述 当我们处理Java字符串时，有时我们可能希望计算字符串中的空格数量。 有多种方法可以得到结果。在这个快速教程中，我们将通过示例看到如何完成这个任务。 2. 示例输入字符串 首先，让我们准备一个输入字符串作为示例： 上面的字符串包含九个空格和一个制表符，制表符用单引号括起来。我们的目标是仅在给定的输入字符串中计..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T00:55:22.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Spaces Count"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T00:55:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java字符串中计算空格数量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T00:55:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java字符串中计算空格数量 1. 概述 当我们处理Java字符串时，有时我们可能希望计算字符串中的空格数量。 有多种方法可以得到结果。在这个快速教程中，我们将通过示例看到如何完成这个任务。 2. 示例输入字符串 首先，让我们准备一个输入字符串作为示例： 上面的字符串包含九个空格和一个制表符，制表符用单引号括起来。我们的目标是仅在给定的输入字符串中计..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 示例输入字符串","slug":"_2-示例输入字符串","link":"#_2-示例输入字符串","children":[]},{"level":2,"title":"3. 使用Java标准库","slug":"_3-使用java标准库","link":"#_3-使用java标准库","children":[{"level":3,"title":"3.1. 经典解决方案：循环和计数","slug":"_3-1-经典解决方案-循环和计数","link":"#_3-1-经典解决方案-循环和计数","children":[]},{"level":3,"title":"3.2. 使用Java 8的Stream API","slug":"_3-2-使用java-8的stream-api","link":"#_3-2-使用java-8的stream-api","children":[]},{"level":3,"title":"3.3. 使用Regex的_Matcher.find()_方法","slug":"_3-3-使用regex的-matcher-find-方法","link":"#_3-3-使用regex的-matcher-find-方法","children":[]},{"level":3,"title":"3.4. 使用_String.replaceAll()_方法","slug":"_3-4-使用-string-replaceall-方法","link":"#_3-4-使用-string-replaceall-方法","children":[]},{"level":3,"title":"3.5. 使用_String.split()_方法","slug":"_3-5-使用-string-split-方法","link":"#_3-5-使用-string-split-方法","children":[]}]},{"level":2,"title":"4. 使用外部库","slug":"_4-使用外部库","link":"#_4-使用外部库","children":[{"level":3,"title":"4.1. 使用Apache Commons Lang 3库","slug":"_4-1-使用apache-commons-lang-3库","link":"#_4-1-使用apache-commons-lang-3库","children":[]},{"level":3,"title":"4.2. 使用Spring","slug":"_4-2-使用spring","link":"#_4-2-使用spring","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721955322000,"updatedTime":1721955322000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.92,"words":1475},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Count Spaces in a Java String.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>在Java字符串中计算空格数量</h1>\\n<h2>1. 概述</h2>\\n<p>当我们处理Java字符串时，有时我们可能希望计算字符串中的空格数量。</p>\\n<p>有多种方法可以得到结果。在这个快速教程中，我们将通过示例看到如何完成这个任务。</p>\\n<h2>2. 示例输入字符串</h2>\\n<p>首先，让我们准备一个输入字符串作为示例：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">INPUT_STRING</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"  This string has nine spaces and a Tab:'\\\\t'\\"</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
