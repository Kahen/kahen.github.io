import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const e={},p=t(`<h1 id="使用okhttp下载二进制文件" tabindex="-1"><a class="header-anchor" href="#使用okhttp下载二进制文件"><span>使用OkHttp下载二进制文件</span></a></h1><p>本文将提供一个实用示例，展示如何使用OkHttp库下载二进制文件。</p><h2 id="_2-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-maven依赖"><span>2. Maven依赖</span></a></h2><p>我们将首先添加基础库okhttp依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`\`&lt;dependency&gt;\`\`
    \`\`&lt;groupId&gt;\`\`com.squareup.okhttp3\`\`&lt;/groupId&gt;\`\`
    \`\`&lt;artifactId&gt;\`\`okhttp\`\`&lt;/artifactId&gt;\`\`
    \`\`&lt;version&gt;\`\`5.0.0-alpha.12\`\`&lt;/version&gt;\`\`
\`\`&lt;/dependency&gt;\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，<strong>如果我们想为使用OkHttp库实现的模块编写集成测试，我们可以使用mockwebserver库</strong>。这个库有模拟服务器及其响应的工具：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`\`&lt;dependency&gt;\`\`
    \`\`&lt;groupId&gt;\`\`com.squareup.okhttp3\`\`&lt;/groupId&gt;\`\`
    \`\`&lt;artifactId&gt;\`\`mockwebserver\`\`&lt;/artifactId&gt;\`\`
    \`\`&lt;version&gt;\`\`5.0.0-alpha.12\`\`&lt;/version&gt;\`\`
    \`&lt;scope&gt;\`test\`&lt;/scope&gt;\`
\`\`&lt;/dependency&gt;\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-请求二进制文件" tabindex="-1"><a class="header-anchor" href="#_3-请求二进制文件"><span>3. 请求二进制文件</span></a></h2><p>我们将首先实现一个类，该类接收一个URL参数，用于下载文件，并为该URL创建并执行HTTP请求。</p><p>为了使类可测试，我们将在构造函数中<strong>注入OkHttpClient和writer</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryFileDownloader</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OkHttpClient</span> client<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BinaryFileWriter</span> writer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BinaryFileDownloader</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span> client<span class="token punctuation">,</span> <span class="token class-name">BinaryFileWriter</span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> writer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将实现从URL下载文件的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Response</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResponseBody</span> responseBody <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBody <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;响应不包含文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> length <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token constant">CONTENT_LENGTH</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">.</span><span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载文件的过程有四个步骤。使用URL创建请求。执行请求并接收响应。获取响应的主体，如果为_null_则失败。将响应主体的字节写入文件。</p><h2 id="_4-将响应写入本地文件" tabindex="-1"><a class="header-anchor" href="#_4-将响应写入本地文件"><span>4. 将响应写入本地文件</span></a></h2><p>为了将从响应中接收到的字节写入本地文件，我们将实现一个BinaryFileWriter类，该类<strong>接受一个InputStream和一个OutputStream作为输入，并将InputStream中的内容复制到OutputStream中</strong>。</p><p>OutputStream将注入到构造函数中，以便类可以可测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryFileWriter</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OutputStream</span> outputStream<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BinaryFileWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> outputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>outputStream <span class="token operator">=</span> outputStream<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们将实现将InputStream中的内容复制到OutputStream中的方法。该方法首先使用BufferedInputStream包装InputStream，以便我们可以一次读取更多的字节。然后我们准备一个数据缓冲区，用于临时存储来自InputStream的字节。</p><p>最后，我们将缓冲的数据写入OutputStream。我们这样做，只要InputStream有数据可读：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">CHUNK_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readBytes<span class="token punctuation">;</span>
        <span class="token keyword">long</span> totalBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readBytes <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            totalBytes <span class="token operator">+=</span> readBytes<span class="token punctuation">;</span>
            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> totalBytes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-获取文件下载进度" tabindex="-1"><a class="header-anchor" href="#_5-获取文件下载进度"><span>5. 获取文件下载进度</span></a></h2><p>在某些情况下，我们可能想要告诉用户文件下载的进度。</p><p>我们首先需要创建一个函数式接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProgressCallback</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onProgress</span><span class="token punctuation">(</span><span class="token keyword">double</span> progress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将在BinaryFileWriter类中使用它。这将使我们在每一步都能得到下载器迄今为止写入的总字节数。</p><p>首先，我们将<strong>将ProgressCallback作为writer类的字段添加</strong>。然后，我们将更新write方法，使其<strong>接收响应的长度作为参数</strong>。这将帮助我们计算进度。</p><p>然后，我们将使用从到目前为止写入的_totalBytes_和_length_计算出的进度调用_onProgress_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryFileWriter</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProgressCallback</span> progressCallback<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
        progressCallback<span class="token punctuation">.</span><span class="token function">onProgress</span><span class="token punctuation">(</span>totalBytes <span class="token operator">/</span> length <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将更新BinaryFileDownloader类，以<strong>使用总响应长度调用write方法</strong>。我们将从_Content-Length_头中获取响应长度，然后将其传递给write方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryFileDownloader</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> length <span class="token operator">=</span> <span class="token function">getResponseLength</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getResponseLength</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token constant">CONTENT_LENGTH</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们实现了一个简单而实用的示例，展示了<strong>如何使用OkHttp库从URL下载二进制文件</strong>。</p><p>有关文件下载应用程序的完整实现以及单元测试，请查看GitHub上的项目。</p>`,34),o=[p];function l(c,i){return a(),s("div",null,o)}const d=n(e,[["render",l],["__file","2024-07-28-Download a Binary File Using OkHttp.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-Download%20a%20Binary%20File%20Using%20OkHttp.html","title":"使用OkHttp下载二进制文件","lang":"zh-CN","frontmatter":{"date":"2024-07-29T00:00:00.000Z","category":["Java","OkHttp"],"tag":["Java","OkHttp","文件下载"],"head":[["meta",{"name":"keywords","content":"Java, OkHttp, 文件下载"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-Download%20a%20Binary%20File%20Using%20OkHttp.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用OkHttp下载二进制文件"}],["meta",{"property":"og:description","content":"使用OkHttp下载二进制文件 本文将提供一个实用示例，展示如何使用OkHttp库下载二进制文件。 2. Maven依赖 我们将首先添加基础库okhttp依赖： 然后，如果我们想为使用OkHttp库实现的模块编写集成测试，我们可以使用mockwebserver库。这个库有模拟服务器及其响应的工具： 3. 请求二进制文件 我们将首先实现一个类，该类接收一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T21:25:35.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"OkHttp"}],["meta",{"property":"article:tag","content":"文件下载"}],["meta",{"property":"article:published_time","content":"2024-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T21:25:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用OkHttp下载二进制文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T21:25:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用OkHttp下载二进制文件 本文将提供一个实用示例，展示如何使用OkHttp库下载二进制文件。 2. Maven依赖 我们将首先添加基础库okhttp依赖： 然后，如果我们想为使用OkHttp库实现的模块编写集成测试，我们可以使用mockwebserver库。这个库有模拟服务器及其响应的工具： 3. 请求二进制文件 我们将首先实现一个类，该类接收一..."},"headers":[{"level":2,"title":"2. Maven依赖","slug":"_2-maven依赖","link":"#_2-maven依赖","children":[]},{"level":2,"title":"3. 请求二进制文件","slug":"_3-请求二进制文件","link":"#_3-请求二进制文件","children":[]},{"level":2,"title":"4. 将响应写入本地文件","slug":"_4-将响应写入本地文件","link":"#_4-将响应写入本地文件","children":[]},{"level":2,"title":"5. 获取文件下载进度","slug":"_5-获取文件下载进度","link":"#_5-获取文件下载进度","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722201935000,"updatedTime":1722201935000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-Download a Binary File Using OkHttp.md","localizedDate":"2024年7月29日","excerpt":"\\n<p>本文将提供一个实用示例，展示如何使用OkHttp库下载二进制文件。</p>\\n<h2>2. Maven依赖</h2>\\n<p>我们将首先添加基础库okhttp依赖：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>``&lt;dependency&gt;``\\n    ``&lt;groupId&gt;``com.squareup.okhttp3``&lt;/groupId&gt;``\\n    ``&lt;artifactId&gt;``okhttp``&lt;/artifactId&gt;``\\n    ``&lt;version&gt;``5.0.0-alpha.12``&lt;/version&gt;``\\n``&lt;/dependency&gt;``\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
