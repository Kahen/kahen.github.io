import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CM1q4_9A.js";const p={},e=t('<h1 id="java-中的流与循环比较" tabindex="-1"><a class="header-anchor" href="#java-中的流与循环比较"><span>Java 中的流与循环比较</span></a></h1><p>在本教程中，我们将深入比较 Java 8 中引入的流（Streams）和传统的 for 循环。这些工具在每个 Java 开发者的数据处理中扮演着至关重要的角色。尽管它们在许多方面都有所不同，正如我们将在文章的其余部分中看到的那样，它们有非常相似的用例，并且很多时候可以轻松互换使用。</p><p>流提供了一种函数式和声明性的处理方法，而 for 循环提供了传统的命令式方法。通过本文的学习，我们可以为我们的编程任务做出最合适的决策。</p><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h2><p>在比较特定编程问题的解决方案时，我们通常需要讨论性能。这个案例也不例外。由于流和 for 循环都用于处理大量数据，因此在选择合适的解决方案时，性能可能很重要。</p><p>让我们通过一个全面的基准测试示例来理解 for 循环和流之间的性能差异。我们将比较涉及过滤、映射和求和的复杂操作的执行时间，使用 for 循环和流。为此，我们将使用 Java 微基准测试工具（JMH），这是一个专门为基准测试 Java 代码而设计的工具。</p><h3 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h3><p>我们首先定义依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.openjdk.jmh``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``jmh-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.37``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.openjdk.jmh``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``jmh-generator-annprocess``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.37``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们始终可以在 Maven Central 上找到 JMH Core 和 JMH Annotation Processor 的最新版本。</p><h3 id="设置基准测试" tabindex="-1"><a class="header-anchor" href="#设置基准测试"><span>设置基准测试</span></a></h3><p>在我们的基准测试中，我们将创建一个包含从 0 到 999,999 的整数列表的场景。我们想要过滤掉偶数，将它们平方，然后计算它们的总和。除此之外，为了确保公平性，我们首先使用传统的 for 循环实现这个过程：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyState</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>` numbers<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Trial</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i `<span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <em>State</em> 类将传递给我们的基准测试。此外，《Setup》将在每个基准测试之前运行。</p><h3 id="使用-for-循环进行基准测试" tabindex="-1"><a class="header-anchor" href="#使用-for-循环进行基准测试"><span>使用 For 循环进行基准测试</span></a></h3><p>我们的 for 循环实现涉及遍历数字列表，检查偶数，将它们平方，并在变量中累加总和：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">forLoopBenchmark</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span>number <span class="token operator">*</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用流进行基准测试" tabindex="-1"><a class="header-anchor" href="#使用流进行基准测试"><span>使用流进行基准测试</span></a></h3><p>接下来，我们将使用 Java 流实现相同的复杂操作。此外，我们将首先过滤偶数，将它们映射到它们的平方，并最终计算总和：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">streamBenchMark</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span>` number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> number <span class="token operator">*</span> number<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用终端操作 <em>reduce()</em> 来计算数字的总和。此外，我们还可以以多种方式计算总和。</p><h3 id="运行基准测试" tabindex="-1"><a class="header-anchor" href="#运行基准测试"><span>运行基准测试</span></a></h3><p>有了我们的基准测试方法，我们将使用 JMH 运行基准测试。我们将多次执行基准测试以确保准确的结果，并测量平均执行时间。为此，我们将向我们的类添加以下注释：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些补充，我们确保结果更加准确，运行基准测试五次，在三次预热后，计算所有五个迭代的平均值。现在，我们可以运行主方法来查看结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">PerformanceBenchmark</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分析结果" tabindex="-1"><a class="header-anchor" href="#分析结果"><span>分析结果</span></a></h3><p>一旦我们运行基准测试，JMH 将为我们提供 for 循环和流实现的平均执行时间：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Benchmark                              Mode  Cnt         Score         Error  Units\nPerformanceBenchmark.forLoopBenchmark  avgt    5   3386660.051 ± 1375112.505  ns/op\nPerformanceBenchmark.streamBenchMark   avgt    5  12231480.518 ± 1609933.324  ns/op\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在我们的示例中，for 循环在性能方面比流表现得更好。尽管在这个例子中流的性能比 for 循环差，但在某些情况下，这种情况可能会改变，特别是在使用并行流时。</p><h2 id="语法和可读性" tabindex="-1"><a class="header-anchor" href="#语法和可读性"><span>语法和可读性</span></a></h2><p>作为程序员，我们的代码可读性起着重要作用。因此，当我们尝试为我们的问题选择最佳解决方案时，这一点变得非常重要。</p><p>首先，让我们深入了解流的语法和可读性。流促进了一种更简洁、更富有表现力的编码风格。这在过滤和映射数据时非常明显：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` fruits <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">long</span> count <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fruit <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流代码的阅读像是一个流畅的操作序列，过滤条件和计数操作在一个单一的、流畅的链中清晰地表达。此外，由于其声明性质，流通常会产生更容易阅读的代码。代码更注重需要完成什么，而不是如何完成。</p><p>相比之下，让我们探索 for 循环的语法和可读性。for 循环提供了一种更传统、更命令式的编码风格：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` fruits <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fruit <span class="token operator">:</span> fruits<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，代码涉及显式的迭代和条件语句。虽然这种方法被大多数开发人员所理解，但有时它可能导致更冗长的代码，使其可能更难阅读，特别是对于复杂操作。</p><h2 id="并行性和并发性" tabindex="-1"><a class="header-anchor" href="#并行性和并发性"><span>并行性和并发性</span></a></h2><p>并行性和并发性是考虑 Java 中流和 for 循环时需要考虑的关键方面。这两种方法在利用多核处理器和管理并发操作时提供了不同的能力和挑战。</p><p><strong>流被设计为使并行处理更容易访问</strong>。Java 8 引入了并行流的概念，它自动利用多核处理器来加速数据处理。我们可以轻松地将前面的基准测试重写为并发计算总和：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">parallelStreamBenchMark</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> number <span class="token operator">*</span> number<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要并行化过程，只需要将 <em>stream()</em> 替换为 <em>parallelStream()</em> 方法。另一方面，将 for 循环重写为并行计算数字总和的过程更为复杂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">concurrentForLoopBenchmark</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> numThreads <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>numThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Callable</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`<span class="token operator">&gt;</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> chunkSize <span class="token operator">=</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> numThreads<span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i `<span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token keyword">int</span> start <span class="token operator">=</span> i <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> numThreads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>\n        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>` <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> number <span class="token operator">=</span> state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span>number <span class="token operator">*</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">int</span> totalSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>` result <span class="token operator">:</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        totalSum <span class="token operator">+=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> totalSum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 Java 的并发实用工具，例如 <em>ExecutorService</em>，来并发执行任务。我们将列表分成块，并使用线程池并发处理它们。在决定使用流和 for 循环进行并行性和并发性时，我们应该考虑任务的复杂性。流为可以轻松并行化的任务提供了一种更直接的方式来启用并行处理。<strong>另一方面，for 循环for 循环，通过手动并发控制，适用于需要自定义线程管理和协调的更复杂场景。</strong></p><h2 id="可变性" tabindex="-1"><a class="header-anchor" href="#可变性"><span>可变性</span></a></h2><p>现在，让我们探讨可变性的问题以及流和 for 循环在处理可变数据方面的不同。理解这些如何处理可变数据对于做出明智的选择至关重要。</p><p><strong>首先，我们需要认识到，流本质上促进了不可变性</strong>。在流的上下文中，集合中的元素不是直接被修改的。相反，对流的操作会创建新的流或集合作为中间结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` upperCaseFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fruit <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个流操作中，原始列表保持不变。<em>map()</em> 操作产生了一个新的流，其中每个水果都被转换为大写，而 <em>collect()</em> 操作将这些转换后的元素收集到一个新的列表中。</p><p>相比之下，for 循环可以直接操作可变数据结构：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fruits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fruits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> fruits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 for 循环中，我们直接修改原始列表，将每个元素替换为其大写形式。这在需要就地修改现有数据时可能是有利的，但它也需要小心处理，以避免意外后果。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>流和循环都有其优点和缺点。流提供了一种更函数式和声明性的处理方法，增强了代码的可读性，并经常导致简洁而优雅的解决方案。另一方面，循环提供了一个熟悉且明确的控制结构，使它们适合于精确执行顺序或可变性控制至关重要的场景。</p><p>本文的所有源代码和所有代码片段都在 GitHub 上。</p><p>OK</p>',57),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-06-30-Streams vs. Loops in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Streams%20vs.%20Loops%20in%20Java.html","title":"Java 中的流与循环比较","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","编程"],"tag":["Java 8","性能","可读性","并发","流"],"head":[["meta",{"name":"keywords","content":"Java, 流, 循环, 性能, 可读性, 并发"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Streams%20vs.%20Loops%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 中的流与循环比较"}],["meta",{"property":"og:description","content":"Java 中的流与循环比较 在本教程中，我们将深入比较 Java 8 中引入的流（Streams）和传统的 for 循环。这些工具在每个 Java 开发者的数据处理中扮演着至关重要的角色。尽管它们在许多方面都有所不同，正如我们将在文章的其余部分中看到的那样，它们有非常相似的用例，并且很多时候可以轻松互换使用。 流提供了一种函数式和声明性的处理方法，而 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T16:36:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:tag","content":"性能"}],["meta",{"property":"article:tag","content":"可读性"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"流"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T16:36:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 中的流与循环比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T16:36:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 中的流与循环比较 在本教程中，我们将深入比较 Java 8 中引入的流（Streams）和传统的 for 循环。这些工具在每个 Java 开发者的数据处理中扮演着至关重要的角色。尽管它们在许多方面都有所不同，正如我们将在文章的其余部分中看到的那样，它们有非常相似的用例，并且很多时候可以轻松互换使用。 流提供了一种函数式和声明性的处理方法，而 ..."},"headers":[{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[{"level":3,"title":"开始","slug":"开始","link":"#开始","children":[]},{"level":3,"title":"设置基准测试","slug":"设置基准测试","link":"#设置基准测试","children":[]},{"level":3,"title":"使用 For 循环进行基准测试","slug":"使用-for-循环进行基准测试","link":"#使用-for-循环进行基准测试","children":[]},{"level":3,"title":"使用流进行基准测试","slug":"使用流进行基准测试","link":"#使用流进行基准测试","children":[]},{"level":3,"title":"运行基准测试","slug":"运行基准测试","link":"#运行基准测试","children":[]},{"level":3,"title":"分析结果","slug":"分析结果","link":"#分析结果","children":[]}]},{"level":2,"title":"语法和可读性","slug":"语法和可读性","link":"#语法和可读性","children":[]},{"level":2,"title":"并行性和并发性","slug":"并行性和并发性","link":"#并行性和并发性","children":[]},{"level":2,"title":"可变性","slug":"可变性","link":"#可变性","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1719765398000,"updatedTime":1719765398000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.56,"words":2268},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Streams vs. Loops in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将深入比较 Java 8 中引入的流（Streams）和传统的 for 循环。这些工具在每个 Java 开发者的数据处理中扮演着至关重要的角色。尽管它们在许多方面都有所不同，正如我们将在文章的其余部分中看到的那样，它们有非常相似的用例，并且很多时候可以轻松互换使用。</p>\\n<p>流提供了一种函数式和声明性的处理方法，而 for 循环提供了传统的命令式方法。通过本文的学习，我们可以为我们的编程任务做出最合适的决策。</p>\\n<h2>性能</h2>\\n<p>在比较特定编程问题的解决方案时，我们通常需要讨论性能。这个案例也不例外。由于流和 for 循环都用于处理大量数据，因此在选择合适的解决方案时，性能可能很重要。</p>","autoDesc":true}');export{k as comp,d as data};
