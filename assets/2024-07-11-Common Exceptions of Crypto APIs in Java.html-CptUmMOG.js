import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as p}from"./app-DNwYcgl6.js";const t={},e=p(`<h1 id="java中crypto-api的常见异常" tabindex="-1"><a class="header-anchor" href="#java中crypto-api的常见异常"><span>Java中Crypto API的常见异常</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p><code>Cipher</code>对象是一个重要的Java类，它帮助我们提供加密和解密功能。</p><p>在本文中，我们将看看在使用它来加密和解密文本时可能发生的一些常见异常。</p><h2 id="_2-nosuchalgorithmexception-找不到支持x的任何提供者" tabindex="-1"><a class="header-anchor" href="#_2-nosuchalgorithmexception-找不到支持x的任何提供者"><span>2. NoSuchAlgorithmException: 找不到支持X的任何提供者</span></a></h2><p>如果我们运行以下代码来使用一个虚构的算法获取<code>Cipher</code>的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们将看到以下开始的堆栈跟踪：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>NoSuchAlgorithmException</span><span class="token operator">:</span> <span class="token class-name">Cannot</span> find any provider supporting <span class="token constant">ABC</span>
    at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">543</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里实际上发生了什么？</p><p>嗯，要使用<code>Cipher.getInstance</code>，**我们需要传入一个算法转换作为_String_，并且必须是文档中列出的允许值。**如果不是，我们将得到一个<code>NoSuchAlgorithmException</code>。</p><p><strong>如果我们已经检查了文档，但我们仍然看到这个，我们最好确保我们检查转换是否有错误。</strong></p><p>我们还可以在我们的转换中指定算法模式和填充。</p><p>让我们确保这些字段的值与给定的文档相匹配。否则，我们将看到异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无效，导致异常</span>
<span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无效，导致异常</span>
<span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有效，无异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，如果我们没有指定这些额外的字段，那么将使用默认值。</p><p>算法模式的默认值是ECB，默认填充是“<strong>NoPadding</strong>”。</p><p>由于ECB被认为是弱的，我们将要指定一个模式以确保我们最终不会使用它。</p><p>总结一下，当解决<code>NoSuchAlgorithmException</code>时，我们将想要回顾我们选择的转换的每个部分是否在文档中允许的列表中存在，并注意检查我们的拼写是否有任何错误。</p><h2 id="_3-illegalblocksizeexception-输入长度不是x字节的倍数" tabindex="-1"><a class="header-anchor" href="#_3-illegalblocksizeexception-输入长度不是x字节的倍数"><span>3. IllegalBlockSizeException: 输入长度不是X字节的倍数</span></a></h2><p>我们可能会看到这种异常有几个原因。</p><p>首先，让我们看看在解密时抛出的异常，然后让我们在尝试加密时看看它。</p><h3 id="_3-1-解密期间的illegalblocksizeexception" tabindex="-1"><a class="header-anchor" href="#_3-1-解密期间的illegalblocksizeexception"><span>3.1. 解密期间的IllegalBlockSizeException</span></a></h3><p>让我们编写一个非常简单的解密方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的行为将根据传入我们方法的密文而改变，我们可能无法控制。</p><p>有时，我们可能会看到<code>IllegalBlockSizeException</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>IllegalBlockSizeException</span><span class="token operator">:</span> <span class="token class-name">Input</span> length not multiple of <span class="token number">16</span> bytes
    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">finalNoPadding</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1109</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">fillOutputBuffer</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1053</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">853</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCipher</span><span class="token punctuation">.</span><span class="token function">engineDoFinal</span><span class="token punctuation">(</span><span class="token class-name">AESCipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">446</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2168</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么‘区块大小’到底是什么意思，什么使它‘非法’呢？</p><p>为了理解这一点，让我们记住AES是一个块密码的例子。</p><p>块密码通过采用称为块的固定长度的位组来工作。</p><p>要找出我们的算法有多少字节在一个块中，我们可以使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从这，我们可以看到<strong>AES使用16字节的块。</strong></p><p>这意味着它将取一个16字节的块，执行相关的算法步骤，然后继续下一个16字节的块。</p><p>简单来说，<strong>一个非法块就是不包含正确字节数的块。</strong></p><p>通常，这发生在最终块上，当文本长度不是16字节的倍数时。</p><p><strong>这通常意味着要解密的文本最初没有正确加密，因此无法解密。</strong></p><p>请记住，我们不控制给我们的代码解密的输入，所以我们必须准备好处理这个异常。</p><p>因此，像_cipher.doFinal_这样的方法抛出_IllegalBlockSizeException_，迫使我们处理这个场景，要么通过抛出它，要么在一个_try-catch_语句中。否则，代码将无法编译。</p><p>然而，请记住，大约每16次中有一次，一些坏的密文会偶然地具有正确的长度，以避免AES的这种异常。</p><p>在这种情况下，我们很可能会碰到本文中提到的其他异常之一。</p><h3 id="_3-2-加密期间的illegalblocksizeexception" tabindex="-1"><a class="header-anchor" href="#_3-2-加密期间的illegalblocksizeexception"><span>3.2. 加密期间的IllegalBlockSizeException</span></a></h3><p>现在让我们看看我们在尝试加密文本“<em>https://www.baeldung.com/</em>”时的这个异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> plainText <span class="token operator">=</span> <span class="token string">&quot;https://www.baeldung.com/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainTextBytes <span class="token operator">=</span> plainText<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/NoPadding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>plainTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们上面看到的，对于AES算法来说，字节数必须是16的倍数，而我们的文本不是。因此，运行这段代码会给出与上面相同的异常。</p><p>那么，我们只能用AES加密具有16、32、48...字节的文本吗？</p><p>如果我们想要加密的文本没有正确的字节数怎么办？</p><p>嗯，这就是<strong>我们需要填充我们的数据的地方。</strong></p><p>**填充数据只是意味着我们将要在文本的开始、中间或结尾添加额外的字节，**从而确保数据现在具有正确的字节数。</p><p>正如算法名称和模式一样，有一组允许的填充操作列表，我们可以使用。</p><p>幸运的是，Java为我们处理了这些，所以我们不会在这里详细介绍它的工作原理。</p><p>我们所要做的就是<strong>设置一个填充操作，比如PKCS #5，在我们的_Cipher_实例上，而不是指定“NoPadding”：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，解密文本的代码也必须使用相同的填充操作。</p><h3 id="_3-3-其他故障排除提示" tabindex="-1"><a class="header-anchor" href="#_3-3-其他故障排除提示"><span>3.3. 其他故障排除提示</span></a></h3><p>如果我们开始得到_NoSuchAlgorithmException_或_NoSuchPaddingException_，我们需要检查Java文档以确保我们使用的是有效的填充——并且我们的拼写没有错误。</p><p>如果我们这样做了，那么可能值得检查我们正在查看的文档是否与我们正在使用的Java版本相匹配，因为允许的填充操作可能会在版本之间改变。本文提供的链接是针对Java 8的。</p><h2 id="_4-badpaddingexception-给定的最终块没有正确填充" tabindex="-1"><a class="header-anchor" href="#_4-badpaddingexception-给定的最终块没有正确填充"><span>4. BadPaddingException: 给定的最终块没有正确填充</span></a></h2><p>如果代码在处理填充时遇到问题，就会抛出_BadPaddingException_，这表明我们使用的填充有问题。</p><p>然而，实际上可能有几种不同的问题会导致我们看到这个异常。</p><h3 id="_4-1-由不正确的填充引起的badpaddingexception" tabindex="-1"><a class="header-anchor" href="#_4-1-由不正确的填充引起的badpaddingexception"><span>4.1. 由不正确的填充引起的BadPaddingException</span></a></h3><p>假设我们的文本，“<em>https://www.baeldung.com/</em>”，使用ISO 10126填充进行加密：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/ISO10126Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherTextBytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>plainTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，如果我们尝试使用不同的填充，比如说PKCS #5来解密：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> encryptionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的代码会抛出一个异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>BadPaddingException</span><span class="token operator">:</span> <span class="token class-name">Given</span> <span class="token keyword">final</span> block not properly <span class="token class-name"><span class="token namespace">padded<span class="token punctuation">.</span></span> Such</span> issues can arise <span class="token keyword">if</span> a bad key is used during decryption<span class="token punctuation">.</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">unpad</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">975</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">fillOutputBuffer</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1056</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">853</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCipher</span><span class="token punctuation">.</span><span class="token function">engineDoFinal</span><span class="token punctuation">(</span><span class="token class-name">AESCipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">446</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2168</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，当我们看到这个异常时，填充通常不是根本原因。</p><p>这由上面异常中的一行暗示，“如果解密时使用了错误的密钥，可能会出现这样的问题。”</p><p>所以让我们看看还有什么可能导致_BadPaddingException_。</p><h3 id="_4-2-由不正确的密钥引起的badpaddingexception" tabindex="-1"><a class="header-anchor" href="#_4-2-由不正确的密钥引起的badpaddingexception"><span>4.2. 由不正确的密钥引起的BadPaddingException</span></a></h3><p>正如堆栈跟踪所建议的，当我们在解密时没有使用正确的加密密钥时，我们可能会看到这个异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SecretKey</span> encryptionKey <span class="token operator">=</span> <span class="token class-name">CryptoUtils</span><span class="token punctuation">.</span><span class="token function">getKeyForText</span><span class="token punctuation">(</span><span class="token string">&quot;BaeldungIsASuperCoolSite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SecretKey</span> differentKey <span class="token operator">=</span> <span class="token class-name">CryptoUtils</span><span class="token punctuation">.</span><span class="token function">getKeyForText</span><span class="token punctuation">(</span><span class="token string">&quot;ThisGivesUsAnAlternative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> encryptionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherTextBytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>plainTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> differentKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码抛出_BadPaddingException_而不是_InvalidKeyException_，因为这是代码遇到问题并且无法继续进行的地方。</p><p>这可能是这种异常最常见的原因。</p><p><strong>如果我们看到这个异常，那么我们必须确保我们使用的是正确的密钥。</strong></p><p>这意味着我们必须在加密和解密中使用相同的密钥。</p><h3 id="_4-3-由不正确的算法引起的badpaddingexception" tabindex="-1"><a class="header-anchor" href="#_4-3-由不正确的算法引起的badpaddingexception"><span>4.3. 由不正确的算法引起的BadPaddingException</span></a></h3><p>鉴于上述情况，接下来这一点应该是显而易见的，但总是值得检查。</p><p>如果我们试图使用与数据加密时不同的算法或算法模式进行解密，我们可能会看到类似的症状：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherTextBytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>plainTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，数据使用CBC模式加密，但使用ECB模式解密，这在大多数情况下是行不通的。</p><p>通常，我们解决这个异常的方法是<strong>验证我们的解密机制的每个组件是否与数据加密的方式相匹配。</strong></p><h2 id="_5-invalidkeyexception" tabindex="-1"><a class="header-anchor" href="#_5-invalidkeyexception"><span>5. InvalidKeyException</span></a></h2><p><strong>InvalidKeyException通常表明我们设置Cipher对象的方式不正确。</strong></p><p>让我们看看最常见的原因。</p><h3 id="_5-1-invalidkeyexception-缺少参数" tabindex="-1"><a class="header-anchor" href="#_5-1-invalidkeyexception-缺少参数"><span>5.1. InvalidKeyException: 缺少参数</span></a></h3><p>我们使用的某些算法将需要一个初始化向量（IV）。</p><p>IV防止加密文本的重复，因此像CBC这样的一些加密模式需要它。</p><p>让我们尝试初始化一个没有设置IV的Cipher实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> encryptionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行上述代码，我们将看到以下堆栈跟踪：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>InvalidKeyException</span><span class="token operator">:</span> <span class="token class-name">Parameters</span> missing
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">469</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCipher</span><span class="token punctuation">.</span><span class="token function">engineInit</span><span class="token punctuation">(</span><span class="token class-name">AESCipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">313</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">implInit</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">805</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">chooseProvider</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">867</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>幸运的是，这个问题很容易解决，因为我们只需要用IV初始化我们的Cipher：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ivBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;g&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;I&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">IvParameterSpec</span> ivParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span>ivBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> encryptionKey<span class="token punctuation">,</span> ivParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedBytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherTextBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<strong>给定的IV必须与用于加密文本的IV相同。</strong></p><p>关于我们的IV的最后一个注意事项是，它必须具有特定的长度。</p><p><strong>如果我们使用CBC，我们的IV必须是正好16字节长。</strong></p><p>如果我们尝试使用不同数量的字节，我们将得到一个非常清晰的InvalidAlgorithmParameterException：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>InvalidAlgorithmParameterException</span><span class="token operator">:</span> <span class="token class-name">Wrong</span> <span class="token constant">IV</span> length<span class="token operator">:</span> must be <span class="token number">16</span> bytes <span class="token keyword">long</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">525</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCipher</span><span class="token punctuation">.</span><span class="token function">engineInit</span><span class="token punctuation">(</span><span class="token class-name">AESCipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">346</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">implInit</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">809</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">chooseProvider</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">867</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法很简单，只要确保我们的IV是16字节长。</p><h3 id="_5-2-invalidkeyexception-无效的aes密钥长度-x字节" tabindex="-1"><a class="header-anchor" href="#_5-2-invalidkeyexception-无效的aes密钥长度-x字节"><span>5.2. InvalidKeyException: 无效的AES密钥长度：X字节</span></a></h3><p>我们很快就会讲完这一点，因为这与上述情况非常相似。</p><p>如果我们尝试使用不正确长度的密钥，那么我们将看到一个简单的异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>InvalidKeyException</span><span class="token operator">:</span> <span class="token class-name">Invalid</span> <span class="token constant">AES</span> key length<span class="token operator">:</span> <span class="token class-name">X</span> bytes
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCrypt</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">AESCrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherBlockChaining</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherBlockChaining</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">591</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的密钥必须是16字节。</p><p>这是因为Java通常只支持默认的128位（16字节）加密。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了在加密和解密文本时可能发生的各种异常。</p><p>特别是，我们看到了一些异常可能会提到一个事情，比如填充，但根本原因实际上是别的，比如无效的密钥。</p><p>像往常一样，示例项目可在GitHub上获得。</p><p>OK</p>`,113),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","2024-07-11-Common Exceptions of Crypto APIs in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-11/2024-07-11-Common%20Exceptions%20of%20Crypto%20APIs%20in%20Java.html","title":"Java中Crypto API的常见异常","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","异常处理"],"tag":["Java加密","异常"],"head":[["meta",{"name":"keywords","content":"Java加密, Java异常处理, Cipher, NoSuchAlgorithmException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-11/2024-07-11-Common%20Exceptions%20of%20Crypto%20APIs%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中Crypto API的常见异常"}],["meta",{"property":"og:description","content":"Java中Crypto API的常见异常 1. 引言 Cipher对象是一个重要的Java类，它帮助我们提供加密和解密功能。 在本文中，我们将看看在使用它来加密和解密文本时可能发生的一些常见异常。 2. NoSuchAlgorithmException: 找不到支持X的任何提供者 如果我们运行以下代码来使用一个虚构的算法获取Cipher的实例： 我们将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-11T01:55:35.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java加密"}],["meta",{"property":"article:tag","content":"异常"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-11T01:55:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中Crypto API的常见异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-11T01:55:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中Crypto API的常见异常 1. 引言 Cipher对象是一个重要的Java类，它帮助我们提供加密和解密功能。 在本文中，我们将看看在使用它来加密和解密文本时可能发生的一些常见异常。 2. NoSuchAlgorithmException: 找不到支持X的任何提供者 如果我们运行以下代码来使用一个虚构的算法获取Cipher的实例： 我们将..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. NoSuchAlgorithmException: 找不到支持X的任何提供者","slug":"_2-nosuchalgorithmexception-找不到支持x的任何提供者","link":"#_2-nosuchalgorithmexception-找不到支持x的任何提供者","children":[]},{"level":2,"title":"3. IllegalBlockSizeException: 输入长度不是X字节的倍数","slug":"_3-illegalblocksizeexception-输入长度不是x字节的倍数","link":"#_3-illegalblocksizeexception-输入长度不是x字节的倍数","children":[{"level":3,"title":"3.1. 解密期间的IllegalBlockSizeException","slug":"_3-1-解密期间的illegalblocksizeexception","link":"#_3-1-解密期间的illegalblocksizeexception","children":[]},{"level":3,"title":"3.2. 加密期间的IllegalBlockSizeException","slug":"_3-2-加密期间的illegalblocksizeexception","link":"#_3-2-加密期间的illegalblocksizeexception","children":[]},{"level":3,"title":"3.3. 其他故障排除提示","slug":"_3-3-其他故障排除提示","link":"#_3-3-其他故障排除提示","children":[]}]},{"level":2,"title":"4. BadPaddingException: 给定的最终块没有正确填充","slug":"_4-badpaddingexception-给定的最终块没有正确填充","link":"#_4-badpaddingexception-给定的最终块没有正确填充","children":[{"level":3,"title":"4.1. 由不正确的填充引起的BadPaddingException","slug":"_4-1-由不正确的填充引起的badpaddingexception","link":"#_4-1-由不正确的填充引起的badpaddingexception","children":[]},{"level":3,"title":"4.2. 由不正确的密钥引起的BadPaddingException","slug":"_4-2-由不正确的密钥引起的badpaddingexception","link":"#_4-2-由不正确的密钥引起的badpaddingexception","children":[]},{"level":3,"title":"4.3. 由不正确的算法引起的BadPaddingException","slug":"_4-3-由不正确的算法引起的badpaddingexception","link":"#_4-3-由不正确的算法引起的badpaddingexception","children":[]}]},{"level":2,"title":"5. InvalidKeyException","slug":"_5-invalidkeyexception","link":"#_5-invalidkeyexception","children":[{"level":3,"title":"5.1. InvalidKeyException: 缺少参数","slug":"_5-1-invalidkeyexception-缺少参数","link":"#_5-1-invalidkeyexception-缺少参数","children":[]},{"level":3,"title":"5.2. InvalidKeyException: 无效的AES密钥长度：X字节","slug":"_5-2-invalidkeyexception-无效的aes密钥长度-x字节","link":"#_5-2-invalidkeyexception-无效的aes密钥长度-x字节","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720662935000,"updatedTime":1720662935000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.82,"words":2646},"filePathRelative":"posts/baeldung/2024-07-11/2024-07-11-Common Exceptions of Crypto APIs in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 引言</h2>\\n<p><code>Cipher</code>对象是一个重要的Java类，它帮助我们提供加密和解密功能。</p>\\n<p>在本文中，我们将看看在使用它来加密和解密文本时可能发生的一些常见异常。</p>\\n<h2>2. NoSuchAlgorithmException: 找不到支持X的任何提供者</h2>\\n<p>如果我们运行以下代码来使用一个虚构的算法获取<code>Cipher</code>的实例：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ABC\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
