import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,a as t}from"./app-CseMoHkL.js";const i={},l=t(`<h1 id="rabbitmq中的通道和连接-baeldung" tabindex="-1"><a class="header-anchor" href="#rabbitmq中的通道和连接-baeldung"><span>RabbitMQ中的通道和连接 | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本快速教程中，我们将展示如何使用与RabbitMQ相关的API，涉及两个核心概念：连接和通道。</p><h2 id="_2-rabbitmq快速回顾" tabindex="-1"><a class="header-anchor" href="#_2-rabbitmq快速回顾"><span>2. RabbitMQ快速回顾</span></a></h2><p>RabbitMQ是AMQP（高级消息队列协议）的流行实现，被各种规模的公司广泛用于处理其消息需求。</p><p>从应用程序的角度来看，我们通常关心AMQP的主要实体：虚拟主机、交换机和队列。由于我们已在早期文章中涵盖了这些概念，<strong>这里，我们将专注于两个较少讨论的概念的细节：连接和通道。</strong></p><p>客户端与RabbitMQ代理交互的第一步是建立连接。AMPQ是一个应用层协议，因此这种连接是在传输层协议之上发生的。这可以是常规的TCP连接或使用TLS加密的连接。连接的主要作用是提供一个安全的通道，通过这个通道客户端可以与代理交互。</p><p>这意味着在建立连接期间，客户端必须向服务器提供有效的凭据。服务器可能支持不同类型的凭据，包括常规的用户名/密码、SASL、X.509密码或任何支持的机制。</p><p>除了安全性外，连接建立阶段还负责协商AMPQ协议的某些方面。在这一点上，如果客户端和/或服务器不能就协议版本或调整参数值达成一致，连接将不会被建立，传输层连接将被关闭。</p><h3 id="_3-1-在java应用程序中创建连接" tabindex="-1"><a class="header-anchor" href="#_3-1-在java应用程序中创建连接"><span>3.1. 在Java应用程序中创建连接</span></a></h3><p>当使用Java时，与RabbitMQ代理通信的标准方式是使用_amqp-client_ Java库。我们可以通过添加相应的Maven依赖项将此库添加到我们的项目中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`com.rabbitmq\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`amqp-client\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`5.16.0\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此工件的最新版本可在Maven Central上获得。</p><p>这个库使用工厂模式来创建新连接。首先，我们创建一个新的_ConnectionFactory_实例，并设置创建连接所需的所有参数。至少，这需要通知RabbitMQ主机的地址：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;amqp.example.com&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置完这些参数后，我们使用_factory_的_newConnection()_工厂方法来创建一个新的_Connection_实例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Connection conn = factory.newConnection();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-通道" tabindex="-1"><a class="header-anchor" href="#_4-通道"><span>4. 通道</span></a></h2><p>**简单来说，AMQP通道是一种机制，允许在单个连接上复用多个逻辑流。**这允许在客户端和服务器端更好地使用资源，因为建立连接是一个相对昂贵的操作。</p><p>客户端创建一个或多个通道，以便它可以向代理发送命令。这包括与发送和/或接收消息相关的命令。</p><p>通道还提供了一些关于协议逻辑的额外保证：</p><ul><li>对于给定通道的命令总是按照发送的相同顺序执行。</li><li>假设客户端在单个连接上打开多个通道，实现可以在它们之间分配可用的带宽。</li><li>双方都可以发出流量控制命令，告知对方应该停止发送消息。</li></ul><p>通道的一个关键方面是其生命周期绑定到用于创建它的连接。<strong>这意味着如果我们关闭一个连接，所有相关联的通道也将被关闭。</strong></p><h3 id="_4-1-在java应用程序中创建通道" tabindex="-1"><a class="header-anchor" href="#_4-1-在java应用程序中创建通道"><span>4.1. 在Java应用程序中创建通道</span></a></h3><p>使用_amqp-client_库的Java应用程序使用前者的_createChannel()<em>方法从现有_Connection_创建一个新的_Channel</em>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>channel = conn.createChannel();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦我们有了_Channel_，我们就可以向服务器发送命令。例如，要创建一个队列，我们使用_queueDeclare()_方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>channel.queueDeclare(&quot;example.queue&quot;, true, false, true, null);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段代码“声明”了一个队列，这是AMQP表示“如果尚不存在，则创建”的方式。队列名称后的附加参数定义了它的其他特性：</p><ul><li><em>durable</em>: 此声明是持久的，意味着它将在服务器重启后存活</li><li><em>exclusive</em>: 此队列限制在与声明它的通道关联的连接上使用</li><li><em>autodelete</em>: 服务器将在不再使用时删除队列</li><li><em>args</em>: 用于调整队列行为的可选参数映射；例如，我们可以使用这些参数来定义消息的TTL和死信行为</li></ul><p>现在，要使用默认交换机向此队列发布消息，我们使用_basicPublish()_方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>channel.basicPublish(&quot;&quot;, queue, null, payload);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段代码使用队列名称作为其路由键，将消息发送到默认交换机。</p><h2 id="_5-通道分配策略" tabindex="-1"><a class="header-anchor" href="#_5-通道分配策略"><span>5. 通道分配策略</span></a></h2><p>让我们考虑使用消息系统的场景：CQRS（命令查询责任分离）应用程序。简而言之，基于CQRS的应用程序有两个独立的路径：命令和查询。命令可以更改数据但从不返回值。另一方面，查询返回值但从不修改它们。</p><p>由于命令路径从不返回任何数据，服务可以异步执行它们。在典型的实现中，我们有一个HTTP POST端点，它在内部构建一个消息并将其发送到队列以供以后处理。</p><p>**现在，对于一个必须处理数十甚至数百个并发请求的服务来说，每次打开连接和通道都不是一个现实的选择。**相反，更好的方法是使用通道池。</p><p>当然，这引出了下一个问题：我们应该从单个连接创建通道，还是使用多个连接？</p><h3 id="_5-1-单连接-多通道策略" tabindex="-1"><a class="header-anchor" href="#_5-1-单连接-多通道策略"><span>5.1. 单连接/多通道策略</span></a></h3><p>在这个策略中，我们将使用单个连接，只创建一个通道池，其容量等于服务可以管理的最大并发连接数。对于传统的每个请求一个线程模型，这应该设置为与请求处理线程池的大小相同。</p><p>这种策略的缺点是，在较重的负载下，我们必须通过关联的通道逐个发送命令，这意味着我们必须使用同步机制。这反过来又增加了我们希望最小化的命令路径的额外延迟。</p><h3 id="_5-2-每个线程连接策略" tabindex="-1"><a class="header-anchor" href="#_5-2-每个线程连接策略"><span>5.2. 每个线程连接策略</span></a></h3><p>另一个选择是走向另一个极端，使用_Connection_池，这样就没有通道的竞争。对于每个_Connection_，我们将创建一个单个_Channel_，处理线程将使用它向服务器发出命令。</p><p>然而，我们从客户端移除同步的事实是有代价的。代理必须为每个连接分配额外的资源，如套接字描述符和状态信息。此外，服务器必须在客户端之间分割可用的吞吐量。</p><h2 id="_6-基准测试策略" tabindex="-1"><a class="header-anchor" href="#_6-基准测试策略"><span>6. 基准测试策略</span></a></h2><p>为了评估这些候选策略，让我们为每一个运行一个简单的基准测试。**基准测试包括并行运行多个工作器，每个发送一千条4 Kbytes的消息。**在构造时，工作器接收一个_Connection_，它将从中创建一个_Channel_来发送命令。它还接收迭代次数、有效载荷大小和一个_CountDownLatch_，用于通知测试运行器它已完成发送消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Worker implements Callable\`&lt;Worker.WorkerResult&gt;\` {

    // ... 省略字段和构造函数
    @Override
    public WorkerResult call() throws Exception {

        try {
            long start = System.currentTimeMillis();
            for (int i = 0; i \`&lt; iterations; i++) {
                channel.basicPublish(&quot;&quot;, queue, null, payload);
            }

            long elapsed = System.currentTimeMillis() - start;
            channel.queueDelete(queue);
            return new WorkerResult(elapsed);
        } finally {
            counter.countDown();
        }
    }

    public static class WorkerResult {
        public final long elapsed;

        WorkerResult(long elapsed) {
            this.elapsed = elapsed;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了通过减少锁存器来指示它已完成工作外，工作器还返回一个_WorkerResult_实例，其中包含发送所有消息所需的经过时间。虽然这里我们只有一个_long_值，我们可以扩展它以返回更多细节。</p><p>控制器根据正在评估的策略创建连接工厂和工作器。对于单连接，它创建_Connection_实例并将其传递给每个工作器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Override
public Long call() {

    try {
        Connection connection = factory.newConnection();
        CountDownLatch counter = new CountDownLatch(workerCount);
        List&lt;Worker&gt;\` workers = new ArrayList&lt;&gt;();

        for (int i = 0; i \`&lt; workerCount; i++) {
            workers.add(new Worker(&quot;queue_&quot; + i, connection, iterations, counter, payloadSize));
        }

        ExecutorService executor = new ThreadPoolExecutor(workerCount, workerCount, 0,
                TimeUnit.SECONDS, new ArrayBlockingQueue&lt;&gt;\`(workerCount, true));
        long start = System.currentTimeMillis();
        executor.invokeAll(workers);

        if (counter.await(5, TimeUnit.MINUTES)) {
            long elapsed = System.currentTimeMillis() - start;
            return throughput(workerCount, iterations, elapsed);
        } else {
            throw new RuntimeException(&quot;Timeout waiting workers to complete&quot;);
        }
    } catch (Exception ex) {
        throw new RuntimeException(ex);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多连接策略，我们为每个工作器创建一个新的_Connection_：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>for (int i = 0; i &lt; workerCount; i++) {
    Connection conn = factory.newConnection();
    workers.add(new Worker(&quot;queue_&quot; + i, conn, iterations, counter, payloadSize));
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_throughput_函数计算基准测量将是完成所有工作器所需的总时间除以工作器的数量：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>private static long throughput(int workerCount, int iterations, long elapsed) {
    return (iterations * workerCount * 1000) / elapsed;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们需要将分子乘以1000，这样我们就可以得到每秒的消息吞吐量。</p><h2 id="_7-运行基准测试" tabindex="-1"><a class="header-anchor" href="#_7-运行基准测试"><span>7. 运行基准测试</span></a></h2><p>这些是我们对两种策略进行基准测试的结果。对于每个工作器计数，我们运行了10次基准测试，并使用平均值作为特定工作器/策略的吞吐量度量。环境本身按今天的标准来看是适度的：</p><ul><li>CPU: 双核心 i7 戴尔笔记本电脑 @ 3.0 GHz</li><li>总内存：16 GB</li><li>RabbitMQ: 3.10.7 在 Docker 上运行（docker-machine 有 4 GB 内存）</li></ul><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/10/throughput-benchmark.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对于这个特定的环境，我们发现单连接策略有轻微的优势。这种优势在150个工作器的场景中似有所增加。</p><h2 id="_8-选择策略" tabindex="-1"><a class="header-anchor" href="#_8-选择策略"><span>8. 选择策略</span></a></h2><p>鉴于基准测试结果，我们不能指出一个明显的赢家。对于5到100个工作器的计数，结果或多或少是相同的。之后，与在单个连接上处理多个通道相比，多个连接的开销似乎更高。</p><p>我们还必须考虑测试工作器只做一件事：向队列发送固定消息。像我们提到的CQRS这样的现实世界应用程序，通常在发送消息之前和/或之后会做一些额外的工作。<strong>因此，为了选择最佳策略，推荐的方式是使用尽可能接近生产环境的配置运行您自己的基准测试。</strong></p><h2 id="_9-结论" tabindex="-1"><a class="header-anchor" href="#_9-结论"><span>9. 结论</span></a></h2><p>在本文中，我们探讨了RabbitMQ中的通道和连接概念以及如何以不同方式使用它们。像往常一样，完整的代码可以在GitHub上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/8356e97cc1258253b4345b95412db68d?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/db9b6e888453bec33b0a1b1522bae628?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" alt="img" loading="lazy"></p><p>OK</p>`,67),s=[l];function r(d,o){return a(),n("div",null,s)}const p=e(i,[["render",r],["__file","2024-07-13-Channels and Connections in RabbitMQ.html.vue"]]),b=JSON.parse('{"path":"/posts/baeldung/2024-07-13/2024-07-13-Channels%20and%20Connections%20in%20RabbitMQ.html","title":"RabbitMQ中的通道和连接 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-10-01T00:00:00.000Z","category":["RabbitMQ","Java"],"tag":["Channels","Connections"],"head":[["meta",{"name":"keywords","content":"RabbitMQ, Java, Channels, Connections, AMQP"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-13/2024-07-13-Channels%20and%20Connections%20in%20RabbitMQ.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"RabbitMQ中的通道和连接 | Baeldung"}],["meta",{"property":"og:description","content":"RabbitMQ中的通道和连接 | Baeldung 1. 引言 在本快速教程中，我们将展示如何使用与RabbitMQ相关的API，涉及两个核心概念：连接和通道。 2. RabbitMQ快速回顾 RabbitMQ是AMQP（高级消息队列协议）的流行实现，被各种规模的公司广泛用于处理其消息需求。 从应用程序的角度来看，我们通常关心AMQP的主要实体：虚拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/10/throughput-benchmark.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-13T15:05:16.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Channels"}],["meta",{"property":"article:tag","content":"Connections"}],["meta",{"property":"article:published_time","content":"2022-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-13T15:05:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ中的通道和连接 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/10/throughput-benchmark.png\\",\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/8356e97cc1258253b4345b95412db68d?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/db9b6e888453bec33b0a1b1522bae628?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\"],\\"datePublished\\":\\"2022-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-13T15:05:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"RabbitMQ中的通道和连接 | Baeldung 1. 引言 在本快速教程中，我们将展示如何使用与RabbitMQ相关的API，涉及两个核心概念：连接和通道。 2. RabbitMQ快速回顾 RabbitMQ是AMQP（高级消息队列协议）的流行实现，被各种规模的公司广泛用于处理其消息需求。 从应用程序的角度来看，我们通常关心AMQP的主要实体：虚拟..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. RabbitMQ快速回顾","slug":"_2-rabbitmq快速回顾","link":"#_2-rabbitmq快速回顾","children":[{"level":3,"title":"3.1. 在Java应用程序中创建连接","slug":"_3-1-在java应用程序中创建连接","link":"#_3-1-在java应用程序中创建连接","children":[]}]},{"level":2,"title":"4. 通道","slug":"_4-通道","link":"#_4-通道","children":[{"level":3,"title":"4.1. 在Java应用程序中创建通道","slug":"_4-1-在java应用程序中创建通道","link":"#_4-1-在java应用程序中创建通道","children":[]}]},{"level":2,"title":"5. 通道分配策略","slug":"_5-通道分配策略","link":"#_5-通道分配策略","children":[{"level":3,"title":"5.1. 单连接/多通道策略","slug":"_5-1-单连接-多通道策略","link":"#_5-1-单连接-多通道策略","children":[]},{"level":3,"title":"5.2. 每个线程连接策略","slug":"_5-2-每个线程连接策略","link":"#_5-2-每个线程连接策略","children":[]}]},{"level":2,"title":"6. 基准测试策略","slug":"_6-基准测试策略","link":"#_6-基准测试策略","children":[]},{"level":2,"title":"7. 运行基准测试","slug":"_7-运行基准测试","link":"#_7-运行基准测试","children":[]},{"level":2,"title":"8. 选择策略","slug":"_8-选择策略","link":"#_8-选择策略","children":[]},{"level":2,"title":"9. 结论","slug":"_9-结论","link":"#_9-结论","children":[]}],"git":{"createdTime":1720883116000,"updatedTime":1720883116000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.74,"words":2623},"filePathRelative":"posts/baeldung/2024-07-13/2024-07-13-Channels and Connections in RabbitMQ.md","localizedDate":"2022年10月1日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本快速教程中，我们将展示如何使用与RabbitMQ相关的API，涉及两个核心概念：连接和通道。</p>\\n<h2>2. RabbitMQ快速回顾</h2>\\n<p>RabbitMQ是AMQP（高级消息队列协议）的流行实现，被各种规模的公司广泛用于处理其消息需求。</p>\\n<p>从应用程序的角度来看，我们通常关心AMQP的主要实体：虚拟主机、交换机和队列。由于我们已在早期文章中涵盖了这些概念，<strong>这里，我们将专注于两个较少讨论的概念的细节：连接和通道。</strong></p>\\n<p>客户端与RabbitMQ代理交互的第一步是建立连接。AMPQ是一个应用层协议，因此这种连接是在传输层协议之上发生的。这可以是常规的TCP连接或使用TLS加密的连接。连接的主要作用是提供一个安全的通道，通过这个通道客户端可以与代理交互。</p>","autoDesc":true}');export{p as comp,b as data};
