import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-CseMoHkL.js";const e={},p=t(`<hr><h1 id="在spring-data-cassandra中保存日期值" tabindex="-1"><a class="header-anchor" href="#在spring-data-cassandra中保存日期值"><span>在Spring Data Cassandra中保存日期值</span></a></h1><p>Apache Cassandra是一个可扩展的NoSQL数据库。它提供了<strong>无单点故障的持续可用性</strong>。此外，Cassandra能够以卓越的性能处理大量数据。</p><p>在本教程中，我们将探讨如何使用Spring Data和Docker连接到Cassandra。此外，我们将利用Spring Data的存储库抽象来处理Cassandra的数据层。</p><p>我们将看到如何在Cassandra中保存不同的Java日期值。最后，我们将研究这些日期值是如何映射到Cassandra类型的。</p><p>Spring Data for Apache Cassandra为Spring开发人员提供了<strong>一个熟悉的接口来使用Cassandra</strong>。这个项目将核心Spring概念应用于使用Cassandra数据存储的解决方案开发。</p><p>Spring Data允许我们基于常见的Spring接口创建存储库。它还允许使用_QueryBuilders_来消除学习Cassandra查询语言（CQL）的需要。该项目提供了简单的注释，以实现丰富的对象映射。</p><p>有两个重要的辅助类：</p><ul><li><em>CqlTemplate</em> 处理常见的数据访问操作</li><li><em>CassandraTemplate</em> 提供对象映射</li></ul><p>该项目与Spring的核心JDBC支持有显著的相似之处。</p><h3 id="_3-1-cassandra容器" tabindex="-1"><a class="header-anchor" href="#_3-1-cassandra容器"><span>3.1. Cassandra容器</span></a></h3><p>让我们使用_Testcontainers_库配置并启动Cassandra。首先，我们将定义一个Cassandra容器并将其暴露到特定端口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Container</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CassandraContainer</span> cassandra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CassandraContainer</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CassandraContainer</span><span class="token punctuation">(</span><span class="token string">&quot;cassandra:3.11.2&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withExposedPorts</span><span class="token punctuation">(</span><span class="token number">9042</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要覆盖Spring Data所需的测试属性，以便能够与Cassandra容器建立连接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestPropertyValues</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token string">&quot;spring.data.cassandra.keyspace-name=&quot;</span> <span class="token operator">+</span> <span class="token constant">KEYSPACE_NAME</span><span class="token punctuation">,</span>
    <span class="token string">&quot;spring.data.cassandra.contact-points=&quot;</span> <span class="token operator">+</span> cassandra<span class="token punctuation">.</span><span class="token function">getContainerIpAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;spring.data.cassandra.port=&quot;</span> <span class="token operator">+</span> cassandra<span class="token punctuation">.</span><span class="token function">getMappedPort</span><span class="token punctuation">(</span><span class="token number">9042</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyTo</span><span class="token punctuation">(</span>configurableApplicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，在创建任何对象/表之前，我们需要创建一个keyspace：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">session</span><span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE KEYSPACE IF NOT EXISTS &quot;</span> <span class="token operator">+</span> KEYSPACE_NAME <span class="token operator">+</span> <span class="token string">&quot; WITH replication = {&#39;class&#39;:&#39;SimpleStrategy&#39;,&#39;replication_factor&#39;:&#39;1&#39;};&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个keyspace在Cassandra中只是一个数据容器。实际上，它非常类似于关系数据库管理系统中的数据库。</p><h3 id="_3-2-cassandra存储库" tabindex="-1"><a class="header-anchor" href="#_3-2-cassandra存储库"><span>3.2. Cassandra存储库</span></a></h3><p>Spring Data的<strong>存储库支持大大简化了DAO的实现</strong>。让我们从创建一个简单的DAO开始。</p><p>_@Table_注解在_org.springframework.data.cassandra.core.mapping_包中提供，它启用了领域对象映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PrimaryKey</span>
    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//getters, setters, equals 和 hash code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将通过扩展_CassandraRepository_接口为我们的DAO定义一个Spring Data存储库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CassandraRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> UUID<span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，在开始编写集成测试之前，我们需要定义两个额外的属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.data.cassandra.schema-action</span><span class="token punctuation">=</span><span class="token value attr-value">create_if_not_exists</span>
<span class="token key attr-name">spring.data.cassandra.local-datacenter</span><span class="token punctuation">=</span><span class="token value attr-value">datacenter1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个属性将确保Spring Data为我们自动创建注释的表。</p><p>我们应该注意到，<strong>这种设置不推荐用于生产系统</strong>。</p><h3 id="_4-使用日期值" tabindex="-1"><a class="header-anchor" href="#_4-使用日期值"><span>4. 使用日期值</span></a></h3><p>在Spring Data for Apache Cassandra的现代版本中，使用日期值相当直接。<strong>Spring Data将自动确保Java日期类型正确映射</strong>到和从Apache Cassandra表示。</p><h4 id="_4-1-localdate类型" tabindex="-1"><a class="header-anchor" href="#_4-1-localdate类型"><span>4.1. LocalDate类型</span></a></h4><p>让我们向我们的_Person_ DAO添加一个名为_birthDate_的新字段，类型为_LocalDate_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenValidPersonUsingLocalDate_whenSavingIt_thenDataIsPersisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UUID</span> personId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> newPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>personId<span class="token punctuation">,</span> <span class="token string">&quot;Luka&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Modric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newPerson<span class="token punctuation">.</span><span class="token function">setBirthDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1985</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` savedPersons <span class="token operator">=</span> personRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>personId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedPersons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Spring Data自动将Java的_LocalDate_转换为Cassandra的_date_类型</strong>。在将记录保存和从Cassandra获取记录后，DAO中的_LocalDate_值是相同的。</p><h4 id="_4-2-localdatetime类型" tabindex="-1"><a class="header-anchor" href="#_4-2-localdatetime类型"><span>4.2. LocalDateTime类型</span></a></h4><p>让我们向我们的_Person_ DAO添加另一个名为_lastVisitedDate_的字段，类型为_LocalDateTime_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenValidPersonUsingLocalDateTime_whenSavingIt_thenDataIsPersisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UUID</span> personId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> newPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>personId<span class="token punctuation">,</span> <span class="token string">&quot;Luka&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Modric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newPerson<span class="token punctuation">.</span><span class="token function">setLastVisitedDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` savedPersons <span class="token operator">=</span> personRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>personId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedPersons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Spring Data自动将Java的_LocalDateTime_转换为Cassandra的_timestamp_类型</strong>。在将记录保存和从Cassandra获取记录后，DAO中的_LocalDateTime_值是相同的。</p><h4 id="_4-3-旧版date类型" tabindex="-1"><a class="header-anchor" href="#_4-3-旧版date类型"><span>4.3. 旧版Date类型</span></a></h4><p>最后，让我们向我们的_Person_ DAO添加一个名为_lastPurchasedDate_的字段，使用旧版类型_Date_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenValidPersonUsingLegacyDate_whenSavingIt_thenDataIsPersisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UUID</span> personId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> newPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>personId<span class="token punctuation">,</span> <span class="token string">&quot;Luka&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Modric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newPerson<span class="token punctuation">.</span><span class="token function">setLastPurchasedDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` savedPersons <span class="token operator">=</span> personRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>personId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedPersons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与_LocalDateTime_一样，<strong>Spring Data将Java的_java.util.Date_转换为Cassandra的_timestamp_类型</strong>。</p><h4 id="_4-4-映射的cassandra类型" tabindex="-1"><a class="header-anchor" href="#_4-4-映射的cassandra类型"><span>4.4. 映射的Cassandra类型</span></a></h4><p>让我们使用CQLSH检查保存在Cassandra中的数据。CQLSH是一个<strong>通过CQL与Cassandra交互的命令行shell</strong>。</p><p>为了在测试执行期间检查保存在Cassandra容器中的数据，我们可以简单地在我们的测试中设置一个断点。在暂停的测试执行期间，我们可以通过Docker桌面应用程序连接到Docker容器CLI：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># cqlsh</span>
Connected <span class="token keyword">to</span> Test Cluster at <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>:<span class="token number">9042.</span>
<span class="token punctuation">[</span>cqlsh <span class="token number">5.0</span><span class="token number">.1</span> <span class="token operator">|</span> Cassandra <span class="token number">3.11</span><span class="token number">.2</span> <span class="token operator">|</span> CQL spec <span class="token number">3.4</span><span class="token number">.4</span> <span class="token operator">|</span> Native protocol v4<span class="token punctuation">]</span>
<span class="token keyword">Use</span> HELP <span class="token keyword">for</span> help<span class="token punctuation">.</span>
cqlsh<span class="token operator">&gt;</span> <span class="token keyword">USE</span> test<span class="token punctuation">;</span>
cqlsh:test<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，CQLSH将显示表中保存的数据的格式化输出：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code> id                                   <span class="token operator">|</span> birthdate  <span class="token operator">|</span> firstname <span class="token operator">|</span> lastname <span class="token operator">|</span> lastpurchaseddate <span class="token operator">|</span> lastvisiteddate
<span class="token comment">--------------------------------------+------------+-----------+----------+-------------------+-----------------</span>
 <span class="token number">9</span>abef910<span class="token operator">-</span>e3fd<span class="token operator">-</span><span class="token number">11</span>eb<span class="token operator">-</span><span class="token number">9829</span><span class="token operator">-</span>c5149ac796de <span class="token operator">|</span> <span class="token number">1985</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">09</span> <span class="token operator">|</span>      Luka <span class="token operator">|</span>   Modric <span class="token operator">|</span>              <span class="token boolean">null</span> <span class="token operator">|</span>            <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，我们也想检查特定日期列使用的数据显示类型：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>cqlsh:test<span class="token operator">&gt;</span> <span class="token keyword">DESC</span> <span class="token keyword">TABLE</span> person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出返回了一个用于创建表的CQL命令。因此，它包含了所有数据类型定义：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>person <span class="token punctuation">(</span>
    id uuid <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    birthdate <span class="token keyword">date</span><span class="token punctuation">,</span>
    firstname <span class="token keyword">text</span><span class="token punctuation">,</span>
    lastname <span class="token keyword">text</span><span class="token punctuation">,</span>
    lastpurchaseddate <span class="token keyword">timestamp</span><span class="token punctuation">,</span>
    lastvisiteddate <span class="token keyword">timestamp</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们探讨了在Spring Data for Apache Cassandra中使用不同的日期值。</p><p>在示例中，我们涵盖了使用_LocalDate_、<em>LocalDateTime_和旧版_Date</em> Java类型。我们看到了如何连接到使用_Testcontainers_启动的Cassandra实例。最后，我们使用了Spring Data存储库抽象来操作存储在Cassandra中的数据。</p><p>如往常一样，源代码可在GitHub上获得。</p>`,56),o=[p];function c(l,i){return s(),n("div",null,o)}const d=a(e,[["render",c],["__file","2024-07-25-Saving Date Values in Spring Data Cassandra.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Saving%20Date%20Values%20in%20Spring%20Data%20Cassandra.html","title":"在Spring Data Cassandra中保存日期值","lang":"zh-CN","frontmatter":{"date":"2021-10-01T00:00:00.000Z","category":["Spring Data Cassandra","Tutorial"],"tag":["Java","Cassandra","Spring Data"],"head":[["meta",{"name":"keywords","content":"Spring Data Cassandra, Java, NoSQL, Date Types"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Saving%20Date%20Values%20in%20Spring%20Data%20Cassandra.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring Data Cassandra中保存日期值"}],["meta",{"property":"og:description","content":"在Spring Data Cassandra中保存日期值 Apache Cassandra是一个可扩展的NoSQL数据库。它提供了无单点故障的持续可用性。此外，Cassandra能够以卓越的性能处理大量数据。 在本教程中，我们将探讨如何使用Spring Data和Docker连接到Cassandra。此外，我们将利用Spring Data的存储库抽象来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T04:51:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Cassandra"}],["meta",{"property":"article:tag","content":"Spring Data"}],["meta",{"property":"article:published_time","content":"2021-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T04:51:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring Data Cassandra中保存日期值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T04:51:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring Data Cassandra中保存日期值 Apache Cassandra是一个可扩展的NoSQL数据库。它提供了无单点故障的持续可用性。此外，Cassandra能够以卓越的性能处理大量数据。 在本教程中，我们将探讨如何使用Spring Data和Docker连接到Cassandra。此外，我们将利用Spring Data的存储库抽象来..."},"headers":[{"level":3,"title":"3.1. Cassandra容器","slug":"_3-1-cassandra容器","link":"#_3-1-cassandra容器","children":[]},{"level":3,"title":"3.2. Cassandra存储库","slug":"_3-2-cassandra存储库","link":"#_3-2-cassandra存储库","children":[]},{"level":3,"title":"4. 使用日期值","slug":"_4-使用日期值","link":"#_4-使用日期值","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721883094000,"updatedTime":1721883094000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.65,"words":1396},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Saving Date Values in Spring Data Cassandra.md","localizedDate":"2021年10月1日","excerpt":"<hr>\\n<h1>在Spring Data Cassandra中保存日期值</h1>\\n<p>Apache Cassandra是一个可扩展的NoSQL数据库。它提供了<strong>无单点故障的持续可用性</strong>。此外，Cassandra能够以卓越的性能处理大量数据。</p>\\n<p>在本教程中，我们将探讨如何使用Spring Data和Docker连接到Cassandra。此外，我们将利用Spring Data的存储库抽象来处理Cassandra的数据层。</p>\\n<p>我们将看到如何在Cassandra中保存不同的Java日期值。最后，我们将研究这些日期值是如何映射到Cassandra类型的。</p>","autoDesc":true}');export{d as comp,k as data};
