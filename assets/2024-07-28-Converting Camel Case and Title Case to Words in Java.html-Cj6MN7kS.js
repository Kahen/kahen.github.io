import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as i}from"./app-BwYTipZw.js";const n={},s=i(`<h1 id="在java中将驼峰式和标题式转换为单词" tabindex="-1"><a class="header-anchor" href="#在java中将驼峰式和标题式转换为单词"><span>在Java中将驼峰式和标题式转换为单词</span></a></h1><p>字符串通常包含单词和其他分隔符的混合。有时，这些字符串可能会在没有空格的情况下通过大小写变化来分隔单词。例如，<strong>驼峰式在第一个单词之后每个单词的首字母大写</strong>，而标题式（或帕斯卡式）每个单词的首字母都大写。</p><p>我们可能希望将这些字符串解析回单词以便处理它们。</p><p>在这个简短的教程中，我们将探讨如何使用正则表达式在混合大小写字符串中找到单词，以及如何将它们转换为句子或标题。</p><h3 id="_2-解析大写字符串的用例" tabindex="-1"><a class="header-anchor" href="#_2-解析大写字符串的用例"><span>2. 解析大写字符串的用例</span></a></h3><p>处理驼峰式字符串的一个常见用例可能是文档中的字段名称。假设一个文档有一个字段“<em>firstName</em>”——我们可能希望在屏幕上显示为“First name”或“First Name”。</p><p>同样，如果我们通过反射扫描应用程序中的类型或函数，以便使用它们的名称生成报告，我们通常会发现我们可能希望转换的驼峰式或标题式标识符。</p><p>解析这些表达式时我们需要解决的一个额外问题是<strong>单字母单词导致连续大写字母</strong>。</p><p>为了清晰起见：</p><ul><li><em>thisIsAnExampleOfCamelCase</em></li><li><em>ThisIsTitleCase</em></li><li><em>thisHasASingleLetterWord</em></li></ul><p>现在我们知道了我们需要解析的标识符类型，让我们使用正则表达式来找到单词。</p><h3 id="_3-使用正则表达式查找单词" tabindex="-1"><a class="header-anchor" href="#_3-使用正则表达式查找单词"><span>3. 使用正则表达式查找单词</span></a></h3><h4 id="_3-1-定义一个正则表达式来查找单词" tabindex="-1"><a class="header-anchor" href="#_3-1-定义一个正则表达式来查找单词"><span>3.1. 定义一个正则表达式来查找单词</span></a></h4><p>让我们定义一个正则表达式来定位由小写字母组成、后面跟着小写字母的单个大写字母，或者单独的单个大写字母的单词：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pattern WORD_FINDER = Pattern.compile(&quot;(([A-Z]?[a-z]+)|([A-Z]))&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个表达式为正则表达式引擎提供了两个选项。第一个使用_“[A-Z]?”<em>表示“一个可选的第一个大写字母”，然后是</em>“[a-z]+”<em>表示“一个或多个小写字母”。之后是</em>“|”<em>字符提供_或_逻辑，后面是表达式</em>“[A-Z]”_，意思是“一个单独的大写字母”。</p><p>现在我们有了正则表达式，让我们解析我们的字符串。</p><h4 id="_3-2-在字符串中查找单词" tabindex="-1"><a class="header-anchor" href="#_3-2-在字符串中查找单词"><span>3.2. 在字符串中查找单词</span></a></h4><p>我们将定义一个使用这个正则表达式的方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public List\`\`\`\`&lt;String&gt;\`\`\`\` findWordsInMixedCase(String text) {
    Matcher matcher = WORD_FINDER.matcher(text);
    List\`\`\`\`&lt;String&gt;\`\`\`\` words = new ArrayList&lt;&gt;();
    while (matcher.find()) {
        words.add(matcher.group(0));
    }
    return words;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使用由正则表达式的_Pattern_创建的_Matcher_来帮助我们找到单词。<strong>我们在matcher仍然有匹配项时迭代它</strong>，将它们添加到我们的列表中。</p><p>这应该提取符合我们单词定义的任何内容。让我们测试一下。</p><h4 id="_3-3-测试单词查找器" tabindex="-1"><a class="header-anchor" href="#_3-3-测试单词查找器"><span>3.3. 测试单词查找器</span></a></h4><p>我们的单词查找器应该能够找到由任何非单词字符以及大小写变化分隔的单词。让我们从一个简单的例子开始：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(findWordsInMixedCase(&quot;some words&quot;))
  .containsExactly(&quot;some&quot;, &quot;words&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个测试通过并显示我们的算法是工作的。接下来，我们试试驼峰式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(findWordsInMixedCase(&quot;thisIsCamelCaseText&quot;))
  .containsExactly(&quot;this&quot;, &quot;Is&quot;, &quot;Camel&quot;, &quot;Case&quot;, &quot;Text&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们看到，单词从驼峰式字符串中提取出来，并且它们的大写保持不变。例如，_“Is”_在原始文本中以大写字母开始，在提取时也大写了。</p><p>我们也可以尝试标题式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(findWordsInMixedCase(&quot;ThisIsTitleCaseText&quot;))
  .containsExactly(&quot;This&quot;, &quot;Is&quot;, &quot;Title&quot;, &quot;Case&quot;, &quot;Text&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们可以检查单字母单词是否按我们的意图被提取：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(findWordsInMixedCase(&quot;thisHasASingleLetterWord&quot;))
  .containsExactly(&quot;this&quot;, &quot;Has&quot;, &quot;A&quot;, &quot;Single&quot;, &quot;Letter&quot;, &quot;Word&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，我们已经构建了一个单词提取器，但这些单词的大写方式可能不是输出的理想方式。</p><h3 id="_4-将单词列表转换为人类可读格式" tabindex="-1"><a class="header-anchor" href="#_4-将单词列表转换为人类可读格式"><span>4. 将单词列表转换为人类可读格式</span></a></h3><p>提取单词列表后，我们可能想要使用诸如_toUpperCase_或_toLowerCase_之类的方法来规范化它们。然后我们可以使用_String.join_将它们重新连接成一个带有分隔符的单个字符串。让我们看看如何用这些实现现实世界用例的几种方法。</p><h4 id="_4-1-转换为句子" tabindex="-1"><a class="header-anchor" href="#_4-1-转换为句子"><span>4.1. 转换为句子</span></a></h4><p><strong>句子以大写字母开始并以句号结束</strong>——“。”。我们将需要能够使一个单词以大写字母开始：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>private String capitalizeFirst(String word) {
    return word.substring(0, 1).toUpperCase()
      + word.substring(1).toLowerCase();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以遍历单词，将第一个单词大写，其余的变为小写：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public String sentenceCase(List\`\`\`\`&lt;String&gt;\`\`\`\` words) {
    List\`\`\`\`&lt;String&gt;\`\`\`\` capitalized = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; words.size(); i++) {
        String currentWord = words.get(i);
        if (i == 0) {
            capitalized.add(capitalizeFirst(currentWord));
        } else {
            capitalized.add(currentWord.toLowerCase());
        }
    }
    return String.join(&quot; &quot;, capitalized) + &quot;.&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的逻辑是第一个单词的首字符大写，其余的都是小写。我们用空格作为分隔符将它们连接起来，并在最后加上一个句号。</p><p>让我们测试一下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(sentenceCase(Arrays.asList(&quot;these&quot;, &quot;Words&quot;, &quot;Form&quot;, &quot;A&quot;, &quot;Sentence&quot;)))
  .isEqualTo(&quot;These words form a sentence.&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-转换为标题式" tabindex="-1"><a class="header-anchor" href="#_4-2-转换为标题式"><span>4.2. 转换为标题式</span></a></h4><p>标题式的规则比句子稍微复杂一些。<strong>每个单词都必须有一个大写字母，除非它是一个通常不大写的特殊停用词</strong>。然而，整个标题必须以大写字母开始。</p><p>我们可以通过定义我们的停用词来实现这一点：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Set\`\`\`\`&lt;String&gt;\`\`\`\` STOP_WORDS = Stream.of(&quot;a&quot;, &quot;an&quot;, &quot;the&quot;, &quot;and&quot;,
  &quot;but&quot;, &quot;for&quot;, &quot;at&quot;, &quot;by&quot;, &quot;to&quot;, &quot;or&quot;)
  .collect(Collectors.toSet());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此之后，我们可以修改我们的循环中的_if_语句，将任何不是停用词的单词以及第一个单词大写：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>if (i == 0 ||
  !STOP_WORDS.contains(currentWord.toLowerCase())) {
    capitalized.add(capitalizeFirst(currentWord));
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合单词的算法是相同的，尽管我们在最后不加上句号。</p><p>让我们测试一下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThat(capitalizeMyTitle(Arrays.asList(&quot;title&quot;, &quot;words&quot;, &quot;capitalize&quot;)))
  .isEqualTo(&quot;Title Words Capitalize&quot;);

assertThat(capitalizeMyTitle(Arrays.asList(&quot;a&quot;, &quot;stop&quot;, &quot;word&quot;, &quot;first&quot;)))
  .isEqualTo(&quot;A Stop Word First&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h3><p>在这篇短文中，我们探讨了如何使用正则表达式在_String_中找到单词。我们看到了如何定义这个正则表达式来使用大写作为单词边界找到不同的单词。</p><p>我们还看了一些简单的算法，用于将单词列表转换为句子或标题的正确大写形式。</p><p>像往常一样，示例代码可以在GitHub上找到。</p>`,56),r=[s];function d(l,o){return a(),t("div",null,r)}const p=e(n,[["render",d],["__file","2024-07-28-Converting Camel Case and Title Case to Words in Java.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-Converting%20Camel%20Case%20and%20Title%20Case%20to%20Words%20in%20Java.html","title":"在Java中将驼峰式和标题式转换为单词","lang":"zh-CN","frontmatter":{"date":"2022-04-24T00:00:00.000Z","category":["Java","Regular Expressions"],"tag":["camel case","title case","java"],"head":[["meta",{"name":"keywords","content":"Java, Camel Case, Title Case, Regular Expressions"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-Converting%20Camel%20Case%20and%20Title%20Case%20to%20Words%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中将驼峰式和标题式转换为单词"}],["meta",{"property":"og:description","content":"在Java中将驼峰式和标题式转换为单词 字符串通常包含单词和其他分隔符的混合。有时，这些字符串可能会在没有空格的情况下通过大小写变化来分隔单词。例如，驼峰式在第一个单词之后每个单词的首字母大写，而标题式（或帕斯卡式）每个单词的首字母都大写。 我们可能希望将这些字符串解析回单词以便处理它们。 在这个简短的教程中，我们将探讨如何使用正则表达式在混合大小写字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T05:24:47.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"camel case"}],["meta",{"property":"article:tag","content":"title case"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2022-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T05:24:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中将驼峰式和标题式转换为单词\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T05:24:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中将驼峰式和标题式转换为单词 字符串通常包含单词和其他分隔符的混合。有时，这些字符串可能会在没有空格的情况下通过大小写变化来分隔单词。例如，驼峰式在第一个单词之后每个单词的首字母大写，而标题式（或帕斯卡式）每个单词的首字母都大写。 我们可能希望将这些字符串解析回单词以便处理它们。 在这个简短的教程中，我们将探讨如何使用正则表达式在混合大小写字..."},"headers":[{"level":3,"title":"2. 解析大写字符串的用例","slug":"_2-解析大写字符串的用例","link":"#_2-解析大写字符串的用例","children":[]},{"level":3,"title":"3. 使用正则表达式查找单词","slug":"_3-使用正则表达式查找单词","link":"#_3-使用正则表达式查找单词","children":[]},{"level":3,"title":"4. 将单词列表转换为人类可读格式","slug":"_4-将单词列表转换为人类可读格式","link":"#_4-将单词列表转换为人类可读格式","children":[]},{"level":3,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722144287000,"updatedTime":1722144287000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.33,"words":1599},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-Converting Camel Case and Title Case to Words in Java.md","localizedDate":"2022年4月24日","excerpt":"\\n<p>字符串通常包含单词和其他分隔符的混合。有时，这些字符串可能会在没有空格的情况下通过大小写变化来分隔单词。例如，<strong>驼峰式在第一个单词之后每个单词的首字母大写</strong>，而标题式（或帕斯卡式）每个单词的首字母都大写。</p>\\n<p>我们可能希望将这些字符串解析回单词以便处理它们。</p>\\n<p>在这个简短的教程中，我们将探讨如何使用正则表达式在混合大小写字符串中找到单词，以及如何将它们转换为句子或标题。</p>\\n<h3>2. 解析大写字符串的用例</h3>\\n<p>处理驼峰式字符串的一个常见用例可能是文档中的字段名称。假设一个文档有一个字段“<em>firstName</em>”——我们可能希望在屏幕上显示为“First name”或“First Name”。</p>","autoDesc":true}');export{p as comp,m as data};
