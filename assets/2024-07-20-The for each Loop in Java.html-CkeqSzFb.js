import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,a as n}from"./app-DNwYcgl6.js";const i={},r=n(`<hr><h1 id="java-中的-for-each-循环" tabindex="-1"><a class="header-anchor" href="#java-中的-for-each-循环"><span>Java 中的 for-each 循环</span></a></h1><p>在本教程中，我们将讨论 Java 中的 for-each 循环，包括其语法、工作原理和代码示例。最后，我们将理解它的优点和缺点。</p><h2 id="_2-简单的-for-循环" tabindex="-1"><a class="header-anchor" href="#_2-简单的-for-循环"><span>2. 简单的 for 循环</span></a></h2><p><strong>Java 中的简单 for 循环基本上有三个部分——初始化、布尔条件和步骤：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>for (initialization; boolean-condition; step) {
    statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它从循环变量的初始化开始，然后是一个布尔表达式。如果条件为 true，则执行循环中的语句并将循环变量递增/递减。否则，终止循环。</p><p>这种模式使其稍微复杂且难以阅读。此外，<strong>如果我们没有正确编写条件，总有进入无限循环的机会。</strong></p><p>for-each 循环是在 Java 5 中引入的。<strong>我们也称它为增强的 for 循环。</strong></p><p>它是一种特别的遍历技术，专门用于遍历数组或集合。值得注意的是，它也使用 for 关键字。然而，它不是使用循环计数器变量，而是分配一个与数组或集合类型相同的变量。</p><p><strong>for-each 的名称意味着数组或集合的每个元素都被遍历，一个接一个。</strong></p><h3 id="_3-1-语法" tabindex="-1"><a class="header-anchor" href="#_3-1-语法"><span>3.1. 语法</span></a></h3><p>for-each 循环由一个循环变量的声明组成，后跟一个冒号（:），然后是数组或集合的名称：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>for (data_type var_name : array | collection) {
    // code
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-工作原理" tabindex="-1"><a class="header-anchor" href="#_3-2-工作原理"><span>3.2. 工作原理</span></a></h3><p>对于每次迭代，for-each 循环获取集合的每个元素并将其存储在循环变量中。<strong>因此，它为数组或集合的每个元素执行循环体中编写的代码。</strong></p><p>最重要的是，遍历直到数组或集合的最后一个元素。</p><h3 id="_3-3-示例" tabindex="-1"><a class="header-anchor" href="#_3-3-示例"><span>3.3. 示例</span></a></h3><p>让我们看一个使用 for-each 循环遍历数组的示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int numbers[] = { 1, 2, 3, 4, 5 };

for (int number : numbers) {
    System.out.print(number + &quot; &quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，for-each 循环逐个遍历数组 numbers 的每个元素，直到结束。<strong>因此，没有必要使用索引访问数组元素。</strong></p><p>现在，让我们看看一些使用 for-each 循环遍历各种集合的示例。</p><p>让我们从 List 开始：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String[] wordsArray = { &quot;Java &quot;, &quot;is &quot;, &quot;great!&quot; };
List\`\`&lt;String&gt;\`\` wordsList = Arrays.asList(wordsArray);

for (String word : wordsList) {
    System.out.print(word + &quot; &quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们可以遍历 Set 的所有元素：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Set\`\`&lt;String&gt;\`\` wordsSet = new HashSet();
wordsSet.addAll(wordsList);

for (String word : wordsSet) {
    System.out.print(word + &quot; &quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还可以在 Map<code>&lt;Integer, String&gt;</code> 中使用 for-each 循环：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Map\`\`\`&lt;Integer, String&gt;\`\`\` map = new HashMap&lt;&gt;();
map.put(1, &quot;Java&quot;);
map.put(2, &quot;is&quot;);
map.put(3, &quot;great!&quot;);

for (Entry\`\`\`&lt;Integer, String&gt;\`\`\` entry : map.entrySet()) {
    System.out.println(
      &quot;number: &quot; + entry.getKey() +
      &quot; - &quot; +
      &quot;Word: &quot; + entry.getValue());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们可以使用 for-each 循环遍历 Java 中的各种其他数据结构。</p><p><strong>然而，如果数组或集合为 null，则会抛出 NullPointerException：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int[] numbers = null;
for (int number : numbers) {
    System.out.print(number + &quot; &quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码抛出 NullPointerException：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; java.lang.NullPointerException
    at com.baeldung.core.controlstructures.loops.ForEachLoop.traverseArray(ForEachLoop.java:63)
    ..
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因此，我们必须在将数组或集合传递给 for-each 循环之前检查它是否为 null。</strong></p><p>如果数组或集合为空，则 for-each 循环根本不会执行。</p><h3 id="_3-4-优缺点" tabindex="-1"><a class="header-anchor" href="#_3-4-优缺点"><span>3.4. 优缺点</span></a></h3><p>for-each 循环是在 Java 5 中引入的重要特性之一。然而，它也有自己的优点和缺点。</p><p>for-each 循环的优点是：</p><ul><li>它帮助我们避免编程错误。</li><li>它使代码更精确和易于阅读。</li><li>它更容易实现。</li><li>它避免了无限循环的机会。</li></ul><p><strong>由于这些优点，我们更倾向于在处理数组或集合时使用 for-each 循环而不是 for 循环。</strong></p><p>for-each 循环的缺点是：</p><ul><li>我们不能跳过元素，因为它会遍历每个元素。</li><li>不可能按相反的顺序遍历。</li><li>如果我们使用 for-each 循环，就不能修改数组。</li><li>不可能跟踪索引。</li><li>它比 for 循环有一些性能开销。</li></ul><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本文中，我们探讨了 Java 中的 for-each 循环，包括其语法、工作原理和示例。最后，我们看到了它的优点和缺点。</p><p>如往常一样，这些示例的代码可以在 GitHub 上找到。</p>`,45),o=[r];function l(s,d){return t(),a("div",null,o)}const u=e(i,[["render",l],["__file","2024-07-20-The for each Loop in Java.html.vue"]]),v=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-The%20for%20each%20Loop%20in%20Java.html","title":"Java 中的 for-each 循环","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","控制结构"],"tag":["for-each循环","Java 5","增强for循环"],"head":[["meta",{"name":"keywords","content":"Java for-each loop, Java 5, 增强for循环"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-The%20for%20each%20Loop%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 中的 for-each 循环"}],["meta",{"property":"og:description","content":"Java 中的 for-each 循环 在本教程中，我们将讨论 Java 中的 for-each 循环，包括其语法、工作原理和代码示例。最后，我们将理解它的优点和缺点。 2. 简单的 for 循环 Java 中的简单 for 循环基本上有三个部分——初始化、布尔条件和步骤： 它从循环变量的初始化开始，然后是一个布尔表达式。如果条件为 true，则执行循..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T13:20:23.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"for-each循环"}],["meta",{"property":"article:tag","content":"Java 5"}],["meta",{"property":"article:tag","content":"增强for循环"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T13:20:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 中的 for-each 循环\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T13:20:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 中的 for-each 循环 在本教程中，我们将讨论 Java 中的 for-each 循环，包括其语法、工作原理和代码示例。最后，我们将理解它的优点和缺点。 2. 简单的 for 循环 Java 中的简单 for 循环基本上有三个部分——初始化、布尔条件和步骤： 它从循环变量的初始化开始，然后是一个布尔表达式。如果条件为 true，则执行循..."},"headers":[{"level":2,"title":"2. 简单的 for 循环","slug":"_2-简单的-for-循环","link":"#_2-简单的-for-循环","children":[{"level":3,"title":"3.1. 语法","slug":"_3-1-语法","link":"#_3-1-语法","children":[]},{"level":3,"title":"3.2. 工作原理","slug":"_3-2-工作原理","link":"#_3-2-工作原理","children":[]},{"level":3,"title":"3.3. 示例","slug":"_3-3-示例","link":"#_3-3-示例","children":[]},{"level":3,"title":"3.4. 优缺点","slug":"_3-4-优缺点","link":"#_3-4-优缺点","children":[]}]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1721481623000,"updatedTime":1721481623000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.43,"words":1028},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-The for each Loop in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java 中的 for-each 循环</h1>\\n<p>在本教程中，我们将讨论 Java 中的 for-each 循环，包括其语法、工作原理和代码示例。最后，我们将理解它的优点和缺点。</p>\\n<h2>2. 简单的 for 循环</h2>\\n<p><strong>Java 中的简单 for 循环基本上有三个部分——初始化、布尔条件和步骤：</strong></p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>for (initialization; boolean-condition; step) {\\n    statement;\\n}\\n</code></pre></div>","autoDesc":true}');export{u as comp,v as data};
