import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DpDzgwdT.js";const e={},p=t('<hr><h1 id="java中美化打印xml" tabindex="-1"><a class="header-anchor" href="#java中美化打印xml"><span>Java中美化打印XML</span></a></h1><p>当我们需要手动读取XML文件时，通常我们希望以美化打印的格式来阅读内容。许多文本编辑器或IDE可以重新格式化XML文档。如果我们在Linux环境下工作，我们可以从命令行美化打印XML文件。</p><p>然而，有时我们有需求在我们的Java程序中将原始的XML字符串转换为美化打印的格式。例如，我们可能希望在用户界面显示一个美化打印的XML文档，以便更好地视觉理解。</p><p>在本教程中，我们将探讨如何在Java中美化打印XML。</p><h2 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h2><p>为了简单起见，我们将以一个未格式化的_emails.xml_文件作为输入：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``````&lt;emails&gt;``````\n  ``````````&lt;email&gt;``````````\n    ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;``````````\n    `````````&lt;to&gt;`````````Amanda`````````&lt;/to&gt;`````````\n    `````````&lt;time&gt;`````````2018-03-05`````````&lt;/time&gt;`````````\n    `````````&lt;subject&gt;`````````I am flying to you`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n  ``````````&lt;email&gt;``````````\n    ``````````&lt;from&gt;``````````Jerry``````````&lt;/from&gt;``````````\n    `````````&lt;to&gt;`````````Tom`````````&lt;/to&gt;`````````\n    `````````&lt;time&gt;`````````1992-08-08`````````&lt;/time&gt;`````````\n    `````````&lt;subject&gt;`````````Hey Tom, catch me if you can!`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n`````&lt;/emails&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，_emails.xml_文件格式良好。但由于格式混乱，阅读起来并不容易。</p><p><strong>我们的目标是创建一个方法，将这个丑陋的原始XML字符串转换为一个美化格式的字符串。</strong></p><p>此外，我们将讨论自定义两个常见的输出属性：缩进大小（整数）和抑制XML声明（布尔值）。</p><p>缩进大小属性非常直接：它是每个级别缩进的空格数。另一方面，抑制XML声明选项决定我们是否希望在生成的XML中包含XML声明标签。一个典型的XML声明看起来像这样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在本教程中，我们将使用标准Java API和使用外部库的另一种方法来解决这个问题。</p><p>接下来，让我们看看它们是如何工作的。</p><h2 id="_3-使用-transformer-类美化打印xml" tabindex="-1"><a class="header-anchor" href="#_3-使用-transformer-类美化打印xml"><span>3. 使用_Transformer_类美化打印XML</span></a></h2><p>Java API提供了_Transformer_类来进行XML转换。</p><h3 id="_3-1-使用默认-transformer" tabindex="-1"><a class="header-anchor" href="#_3-1-使用默认-transformer"><span>3.1. 使用默认_Transformer_</span></a></h3><p>首先，让我们看看使用_Transformer_类的美化打印解决方案：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">prettyPrintByTransformer</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlString<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">InputSource</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">TransformerFactory</span> transformerFactory <span class="token operator">=</span> <span class="token class-name">TransformerFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transformerFactory<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;indent-number&quot;</span><span class="token punctuation">,</span> indent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> transformerFactory<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transformer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token class-name">OutputKeys</span><span class="token punctuation">.</span><span class="token constant">ENCODING</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transformer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token class-name">OutputKeys</span><span class="token punctuation">.</span><span class="token constant">OMIT_XML_DECLARATION</span><span class="token punctuation">,</span> ignoreDeclaration <span class="token operator">?</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transformer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token class-name">OutputKeys</span><span class="token punctuation">.</span><span class="token constant">INDENT</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Writer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DOMSource</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamResult</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurs when pretty-printing xml:\\n&quot;</span> <span class="token operator">+</span> xmlString<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们快速浏览一下这个方法并弄清楚它的工作原理：</p><ul><li>首先，我们解析原始的XML字符串并获取一个_Document_对象。</li><li>接下来，我们获取一个_TransformerFactory_实例并设置所需的缩进大小属性。</li><li>然后，我们可以从配置的_tranformerFactory_对象中获取一个默认的transformer实例。</li><li>_transformer_对象支持各种输出属性。<strong>为了决定我们是否想要跳过声明，我们设置了_OutputKeys.OMIT_XML_DECLARATION_属性。</strong></li><li>由于我们希望有一个美化格式的_String_对象，最后，我们_transform()_解析的XML <em>Document_到一个_StringWriter_并返回转换后的_String</em>。</li></ul><p>我们在上述方法中的_TransformerFactory_对象上设置了缩进大小。<strong>或者，我们也可以在_transformer_实例上定义_indent-amount_属性：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>transformer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token string">&quot;{http://xml.apache.org/xslt}indent-amount&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们测试一下这个方法是否如预期工作。</p><h3 id="_3-2-测试方法" tabindex="-1"><a class="header-anchor" href="#_3-2-测试方法"><span>3.2. 测试方法</span></a></h3><p>我们的Java项目是一个Maven项目，我们已经将_emails.xml_放在_src/main/resources/xml/email.xml_下。我们创建了_readFromInputStream_方法将输入文件作为_String_读取。但是，我们不会深入这个方法的细节，因为它与我们的主题没有太多关系。假设我们想要将缩进大小设置为2，并在结果中跳过XML声明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">XmlPrettyPrinter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/xml/emails.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> xmlString <span class="token operator">=</span> <span class="token function">readFromInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pretty printing by Transformer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=============================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">prettyPrintByTransformer</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如_main_方法所示，我们读取输入文件作为_String_，然后调用我们的_prettyPrintByTransformer_方法以获得一个美化打印的XML <em>String</em>。</p><p>接下来，<strong>让我们用Java 8运行_main_方法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pretty printing by Transformer\n=============================================\n``````&lt;emails&gt;``````\n  ``````````&lt;email&gt;``````````\n    ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;``````````\n    `````````&lt;to&gt;`````````Amanda`````````&lt;/to&gt;`````````\n    `````````&lt;time&gt;`````````2018-03-05`````````&lt;/time&gt;`````````\n    `````````&lt;subject&gt;`````````I am flying to you`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n  ``````````&lt;email&gt;``````````\n    ``````````&lt;from&gt;``````````Jerry``````````&lt;/from&gt;``````````\n    `````````&lt;to&gt;`````````Tom`````````&lt;/to&gt;`````````\n    `````````&lt;time&gt;`````````1992-08-08`````````&lt;/time&gt;`````````\n    `````````&lt;subject&gt;`````````Hey Tom, catch me if you can!`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n`````&lt;/emails&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的输出所示，我们的方法按预期工作。</p><p>然而，如果我们再次用Java 9或更高版本进行测试，我们可能会看到不同的输出。</p><p>接下来，<strong>让我们看看如果我们用Java 9运行它会生成什么：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pretty printing by Transformer\n=============================================\n``````&lt;emails&gt;``````\n \n  ``````````&lt;email&gt;``````````\n \n    ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;``````````\n \n    `````````&lt;to&gt;`````````Amanda`````````&lt;/to&gt;`````````\n \n    `````````&lt;time&gt;`````````2018-03-05`````````&lt;/time&gt;`````````\n \n    `````````&lt;subject&gt;`````````I am flying to you`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n \n  ``````````&lt;email&gt;``````````\n \n    ``````````&lt;from&gt;``````````Jerry``````````&lt;/from&gt;``````````\n \n    `````````&lt;to&gt;`````````Tom`````````&lt;/to&gt;`````````\n \n    `````````&lt;time&gt;`````````1992-08-08`````````&lt;/time&gt;`````````\n \n    `````````&lt;subject&gt;`````````Hey Tom, catch me if you can!`````````&lt;/subject&gt;`````````\n \n  `````````&lt;/email&gt;`````````\n \n`````&lt;/emails&gt;`````\n \n=============================================\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的输出所示，输出中有一些意外的空行。</p><p>这是因为我们的原始输入包含元素之间的空白，例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``````&lt;emails&gt;`````` ``````````&lt;email&gt;`````````` ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;`````````` ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>从Java 9开始，《Transformer》类的美化打印功能并没有定义实际的格式。因此，空白节点也将作为输出。</strong> 这已经在JDK错误票据中讨论过。此外，Java 9的发布说明也在xml/jaxp部分解释了这一点。</p><p><strong>如果我们希望我们的美化打印方法在不同版本的Java下始终生成相同的格式，我们需要提供一个样式表文件。</strong></p><p>接下来，让我们创建一个简单的_xsl_文件来实现这一点。</p><h3 id="_3-3-提供一个xslt文件" tabindex="-1"><a class="header-anchor" href="#_3-3-提供一个xslt文件"><span>3.3. 提供一个XSLT文件</span></a></h3><p>首先，让我们创建_prettyprint.xsl_文件来定义输出格式：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>stylesheet</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.0<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/1999/XSL/Transform<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>strip-space</span> <span class="token attr-name">elements</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>output</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n    \n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>template</span> <span class="token attr-name">match</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@*|node()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>copy</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>apply-templates</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@*|node()<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>copy</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>template</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>stylesheet</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，在_prettyprint.xsl_文件中，<strong>我们使用了<code>&lt; _xsl:strip-space/_&gt;</code>元素来移除空白节点，以便它们不会出现在输出中</strong>。</p><p>接下来，我们仍然需要对我们的方法进行一些小的更改。我们将不再使用默认的transformer了。相反，<strong>我们将使用我们的XSLT文档创建一个_Transformer_对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> transformerFactory<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token function">readPrettyPrintXslt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，_readPrettyPrintXslt()_方法读取_prettyprint.xsl_的内容。</p><p>现在，如果我们在Java 8和Java 9中测试这个方法，两者都会产生相同的输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pretty printing by Transformer\n=============================================\n``````&lt;emails&gt;``````\n  ``````````&lt;email&gt;``````````\n    ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;``````````\n    `````````&lt;to&gt;`````````Amanda`````````&lt;/to&gt;`````````\n    `````````&lt;time&gt;`````````2018-03-05`````````&lt;/time&gt;`````````\n    `````````&lt;subject&gt;`````````I am flying to you`````````&lt;/subject&gt;`````````\n  `````````&lt;/email&gt;`````````\n  ...\n`````&lt;/emails&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经使用标准Java API解决了问题。接下来，让我们使用外部库美化打印_emails.xml_。</p><h2 id="_4-使用dom4j库美化打印xml" tabindex="-1"><a class="header-anchor" href="#_4-使用dom4j库美化打印xml"><span>4. 使用Dom4j库美化打印XML</span></a></h2><p>Dom4j是一个流行的XML库。它允许我们轻松地美化打印XML文档。</p><p>首先，让我们将Dom4j依赖项添加到我们的_pom.xml_中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.dom4j`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`dom4j`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`2.1.3`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以2.1.3版本为例。我们可以在Maven中央仓库中找到最新版本。</p><p>接下来，让我们看看如何使用Dom4j库美化打印XML：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">prettyPrintByDom4j</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlString<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> skipDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">OutputFormat</span> format <span class="token operator">=</span> <span class="token class-name">OutputFormat</span><span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        format<span class="token punctuation">.</span><span class="token function">setIndentSize</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        format<span class="token punctuation">.</span><span class="token function">setSuppressDeclaration</span><span class="token punctuation">(</span>skipDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        format<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span>Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">parseText</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">XMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>sw<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurs when pretty-printing xml:\\n&quot;</span> <span class="token operator">+</span> xmlString<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dom4j的_OutputFormat_类提供了一个_createPrettyPrint_方法来创建一个预定义的美化打印_OutputFormat_对象。</strong> 如上方法所示，我们可以在默认美化打印格式上添加一些自定义。在这种情况下，我们设置了缩进大小，并决定是否希望在结果中包含声明。</p><p>接下来，我们解析原始的XML字符串并使用准备好的_OutputFormat_实例创建一个_XMLWritter_对象。</p><p>最后，_XMLWriter_对象将以所需的格式写入解析的XML文档。</p><p>接下来，让我们测试一下它是否可以美化打印_emails.xml_文件。这次，假设我们希望在结果中包含声明，并具有8个缩进大小：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pretty printing by Dom4j&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=============================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">prettyPrintByDom4j</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们运行该方法时，我们将看到输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pretty printing by Dom4j\n=============================================\n``&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;``\n``````&lt;emails&gt;``````\n        ``````````&lt;email&gt;``````````\n                ``````````&lt;from&gt;``````````Kai``````````&lt;/from&gt;``````````\n                `````````&lt;to&gt;`````````Amanda`````````&lt;/to&gt;`````````\n                `````````&lt;time&gt;`````````2018-03-05`````````&lt;/time&gt;`````````\n                `````````&lt;subject&gt;`````````I am flying to you`````````&lt;/subject&gt;`````````\n        `````````&lt;/email&gt;`````````\n        ``````````&lt;email&gt;``````````\n                ``````````&lt;from&gt;``````````Jerry``````````&lt;/from&gt;``````````\n                `````````&lt;to&gt;`````````Tom`````````&lt;/to&gt;`````````\n                `````````&lt;time&gt;`````````1992-08-08`````````&lt;/time&gt;`````````\n                `````````&lt;subject&gt;`````````Hey Tom, catch me if you can!`````````&lt;/subject&gt;`````````\n        `````````&lt;/email&gt;`````````\n`````&lt;/emails&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的输出所示，该方法已经解决了问题。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们讨论了在Java中美化打印XML文件的两种方法。</p><p>我们可以使用标准Java API美化打印XML。然而，我们需要记住_Transformer_对象可能会根据Java版本产生不同的结果。解决方案是提供一个XSLT文件。</p><p>或者，Dom4j库可以直截了当地解决这个问题。</p><p>一如既往，代码的完整版本可以在GitHub上找到。</p>',71),l=[p];function o(c,i){return a(),s("div",null,l)}const d=n(e,[["render",o],["__file","2024-07-20-Pretty Print XML in Java.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Pretty%20Print%20XML%20in%20Java.html","title":"Java中美化打印XML","lang":"zh-CN","frontmatter":{"date":"2024-07-21T00:00:00.000Z","category":["Java","XML"],"tag":["Pretty-Print","XML","Java"],"head":[["meta",{"name":"keywords","content":"Java, XML, Pretty-Print, 格式化"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Pretty%20Print%20XML%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中美化打印XML"}],["meta",{"property":"og:description","content":"Java中美化打印XML 当我们需要手动读取XML文件时，通常我们希望以美化打印的格式来阅读内容。许多文本编辑器或IDE可以重新格式化XML文档。如果我们在Linux环境下工作，我们可以从命令行美化打印XML文件。 然而，有时我们有需求在我们的Java程序中将原始的XML字符串转换为美化打印的格式。例如，我们可能希望在用户界面显示一个美化打印的XML文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T22:13:55.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Pretty-Print"}],["meta",{"property":"article:tag","content":"XML"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-07-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T22:13:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中美化打印XML\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T22:13:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中美化打印XML 当我们需要手动读取XML文件时，通常我们希望以美化打印的格式来阅读内容。许多文本编辑器或IDE可以重新格式化XML文档。如果我们在Linux环境下工作，我们可以从命令行美化打印XML文件。 然而，有时我们有需求在我们的Java程序中将原始的XML字符串转换为美化打印的格式。例如，我们可能希望在用户界面显示一个美化打印的XML文..."},"headers":[{"level":2,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":2,"title":"3. 使用_Transformer_类美化打印XML","slug":"_3-使用-transformer-类美化打印xml","link":"#_3-使用-transformer-类美化打印xml","children":[{"level":3,"title":"3.1. 使用默认_Transformer_","slug":"_3-1-使用默认-transformer","link":"#_3-1-使用默认-transformer","children":[]},{"level":3,"title":"3.2. 测试方法","slug":"_3-2-测试方法","link":"#_3-2-测试方法","children":[]},{"level":3,"title":"3.3. 提供一个XSLT文件","slug":"_3-3-提供一个xslt文件","link":"#_3-3-提供一个xslt文件","children":[]}]},{"level":2,"title":"4. 使用Dom4j库美化打印XML","slug":"_4-使用dom4j库美化打印xml","link":"#_4-使用dom4j库美化打印xml","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721513635000,"updatedTime":1721513635000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.41,"words":2223},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Pretty Print XML in Java.md","localizedDate":"2024年7月21日","excerpt":"<hr>\\n<h1>Java中美化打印XML</h1>\\n<p>当我们需要手动读取XML文件时，通常我们希望以美化打印的格式来阅读内容。许多文本编辑器或IDE可以重新格式化XML文档。如果我们在Linux环境下工作，我们可以从命令行美化打印XML文件。</p>\\n<p>然而，有时我们有需求在我们的Java程序中将原始的XML字符串转换为美化打印的格式。例如，我们可能希望在用户界面显示一个美化打印的XML文档，以便更好地视觉理解。</p>\\n<p>在本教程中，我们将探讨如何在Java中美化打印XML。</p>\\n<h2>2. 问题介绍</h2>\\n<p>为了简单起见，我们将以一个未格式化的_emails.xml_文件作为输入：</p>","autoDesc":true}');export{d as comp,m as data};
