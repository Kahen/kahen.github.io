import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Bx_7oN2A.js";const e={},p=t(`<p>我将为您翻译网页标题和部分页面信息，但请注意，由于无法访问提供的链接，我将使用模拟数据来完成翻译任务。</p><hr><p>date: 2024-07-29 category:</p><ul><li>Spring Framework</li><li>Validation tag:</li><li>Spring Service Layer</li><li>Validation Techniques head:</li><li><ul><li>meta</li><li>name: keywords content: Spring, Service Layer, Validation, Best Practices</li></ul></li></ul><hr><h1 id="spring服务层验证" tabindex="-1"><a class="header-anchor" href="#spring服务层验证"><span>Spring服务层验证</span></a></h1><p>请注意，以上内容是根据您提供的要求模拟的，实际的网页内容可能有所不同。如果需要准确的翻译，请确保网页链接可用并重新提供。## 概述</p><p>在本教程中，我们将讨论Java应用程序服务层中的Spring验证。尽管Spring Boot支持与自定义验证器的无缝集成，但执行验证的事实标准是Hibernate验证器。</p><p>这里，我们将学习如何将我们的验证逻辑从控制器移动到单独的服务层。此外，我们将在Spring应用程序中实现服务层的验证。</p><h2 id="应用分层" tabindex="-1"><a class="header-anchor" href="#应用分层"><span>应用分层</span></a></h2><p>根据需求，Java业务应用程序可以采用几种不同的形状和类型。例如，我们必须根据这些标准确定我们的应用程序需要哪些层。除非有特定需求，否则许多应用程序将不会从服务或存储库层的增加复杂性和维护成本中受益。</p><p>我们可以通过使用多个层来满足所有这些关注点。这些层是：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/Layered-Architecture.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>消费者层或Web层是Web应用程序的最顶层。<strong>它负责解释用户的输入并提供适当的响应</strong>。其他层抛出的异常也必须由Web层处理。由于Web层是我们应用程序的入口点，因此它负责身份验证，并作为防止未经授权的用户的第一道防线。</p><p>Web层下面是服务层。它作为事务性屏障，包含应用程序和基础设施服务。此外，服务层的公共API由应用程序服务提供。<strong>它们通常作为事务边界，负责授权交易</strong>。基础设施服务提供了连接到外部工具的“管道代码”，包括文件系统、数据库和电子邮件服务器。这些方法通常由多个应用程序服务使用。</p><p><strong>Web应用程序的最低层是持久层。</strong> 换句话说，它负责与用户的数据存储交互。</p><p>服务层是应用程序中的一个层，它促进了控制器和持久层之间的通信。此外，业务逻辑存储在服务层中。它特别包括验证逻辑。模型状态用于在控制器和服务层之间进行通信。</p><p>将验证视为业务逻辑有优点和缺点，Spring的验证（和数据绑定）架构不排除任何一种。<strong>特别是，验证不应该绑定到Web层，应该是简单易定位的，并且应该允许使用任何可用的验证器。</strong></p><p>此外，客户端输入数据并不总是通过REST控制器流程，<strong>如果我们不在服务层也进行验证，不可接受的数据就可以通过，导致几个问题</strong>。在这种情况下，<strong>我们将使用标准的Java JSR-303验证方案</strong>。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>让我们考虑使用Spring Boot开发的一个简单的用户账户注册表单。</p><h3 id="_4-1-简单的域类" tabindex="-1"><a class="header-anchor" href="#_4-1-简单的域类"><span>4.1. 简单的域类</span></a></h3><p>首先，我们只有名称、年龄、电话和密码属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAccount</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;密码必须在4到15个字符之间&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;名称不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄不应小于18岁&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;电话不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数/设置器/获取器/toString</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的类中，我们使用了四个注释 - <em>@NotNull</em>、<em>@Size</em>、<em>@NotBlank</em> 和 <em>@Min</em> - 以确保输入属性既不为空也不是空白，并且符合大小要求。</p><h3 id="_4-2-在服务层实现验证" tabindex="-1"><a class="header-anchor" href="#_4-2-在服务层实现验证"><span>4.2. 在服务层实现验证</span></a></h3><p>有许多验证解决方案可用，Spring或Hibernate处理实际的验证。<strong>另一方面，手动验证是一个可行的替代方案</strong>。当我们将验证集成到应用程序的正确部分时，这为我们提供了很多灵活性。</p><p>接下来，让我们在服务类中实现我们的验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAccountService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Validator</span> validator<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserAccountDao</span> dao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUserAccount</span><span class="token punctuation">(</span><span class="token class-name">UserAccount</span> useraccount<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Set</span>\`<span class="token operator">&lt;</span><span class="token class-name">ConstraintViolation</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserAccount</span><span class="token punctuation">&gt;</span></span>\`\`<span class="token operator">&gt;</span> violations <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>useraccount<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>violations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserAccount</span><span class="token punctuation">&gt;</span></span>\` constraintViolation <span class="token operator">:</span> violations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>constraintViolation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">(</span><span class="token string">&quot;发生错误: &quot;</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> violations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        dao<span class="token punctuation">.</span><span class="token function">addUserAccount</span><span class="token punctuation">(</span>useraccount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;账户为 &quot;</span> <span class="token operator">+</span> useraccount<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 已添加!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>Validator</em> 是Bean验证API的一部分，负责验证Java对象</strong>。此外，Spring自动提供了一个_Validator_实例，我们可以将其注入到我们的_UserAccountService_中。_Validator_用于在_validate(..)<em>函数内验证传递的对象。结果是_ConstraintViolation_的_Set</em>。</p><p>如果没有违反验证约束（对象有效），则_Set_为空。否则，我们抛出一个_ConstraintViolationException_。</p><h3 id="_4-3-实现rest控制器" tabindex="-1"><a class="header-anchor" href="#_4-3-实现rest控制器"><span>4.3. 实现REST控制器</span></a></h3><p>在此之后，让我们构建Spring REST控制器类，以向客户端或最终用户显示服务并评估应用程序的输入验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAccountController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserAccountService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/addUserAccount&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">addUserAccount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserAccount</span> userAccount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">addUserAccount</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们没有在上述REST控制器表单中使用_@Valid_注释以防止任何验证。</p><h3 id="_4-4-测试rest控制器" tabindex="-1"><a class="header-anchor" href="#_4-4-测试rest控制器"><span>4.4. 测试REST控制器</span></a></h3><p>现在，让我们通过运行Spring Boot应用程序来测试这个方法。之后，使用Postman或任何其他API测试工具，我们将JSON输入发布到_localhost:8080/addUserAccount_ URL：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span>
   <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;password&quot;</span><span class="token operator">:</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;useraddress&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;countryCode&quot;</span><span class="token operator">:</span><span class="token string">&quot;UK&quot;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在确认测试成功运行后，现在让我们检查验证是否按预期工作。下一个合乎逻辑的步骤是使用一些无效输入来测试应用程序。因此，我们将更新我们的输入JSON为无效值：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span>
   <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;password&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;useraddress&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;countryCode&quot;</span><span class="token operator">:</span><span class="token string">&quot;UK&quot;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将收到一个带有HTTP状态400的响应，意味着一个错误的请求，以及以下错误消息。因此，<strong>我们可以看到Validator的使用对于验证至关重要</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>发生错误: 密码必须在4到15个字符之间，名称不能为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="优点和缺点" tabindex="-1"><a class="header-anchor" href="#优点和缺点"><span>优点和缺点</span></a></h2><p><strong>在服务/业务层中，这通常是一种成功的验证方法。</strong> 它不仅限于方法参数，而且可以应用于各种对象。例如，我们可以从数据库加载一个对象，更改它，然后在继续之前验证它。</p><p>我们还可以使用这种方法进行单元测试，以便我们可以实际模拟服务类。<strong>为了在单元测试中促进真正的验证，我们可以手动生成必要的_Validator_实例</strong>。</p><p>在任何情况下，我们都不需要在我们的测试中引导Spring应用程序上下文。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>在这个快速教程中，我们探讨了Java业务应用程序的不同层。我们学习了如何将我们的验证逻辑从控制器移动到单独的服务层。此外，我们实现了在Spring应用程序的服务层执行验证的一种方法。</p><p>示例中的代码可以在GitHub上找到。</p><p>OK</p>`,50),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","2024-07-29-Spring Validation in the Service Layer.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Spring%20Validation%20in%20the%20Service%20Layer.html","title":"Spring服务层验证","lang":"zh-CN","frontmatter":{"description":"我将为您翻译网页标题和部分页面信息，但请注意，由于无法访问提供的链接，我将使用模拟数据来完成翻译任务。 date: 2024-07-29 category: Spring Framework Validation tag: Spring Service Layer Validation Techniques head: meta name: keywo...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Spring%20Validation%20in%20the%20Service%20Layer.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring服务层验证"}],["meta",{"property":"og:description","content":"我将为您翻译网页标题和部分页面信息，但请注意，由于无法访问提供的链接，我将使用模拟数据来完成翻译任务。 date: 2024-07-29 category: Spring Framework Validation tag: Spring Service Layer Validation Techniques head: meta name: keywo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/06/Layered-Architecture.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T07:05:25.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:modified_time","content":"2024-07-29T07:05:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring服务层验证\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/06/Layered-Architecture.png\\"],\\"dateModified\\":\\"2024-07-29T07:05:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"应用分层","slug":"应用分层","link":"#应用分层","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"4.1. 简单的域类","slug":"_4-1-简单的域类","link":"#_4-1-简单的域类","children":[]},{"level":3,"title":"4.2. 在服务层实现验证","slug":"_4-2-在服务层实现验证","link":"#_4-2-在服务层实现验证","children":[]},{"level":3,"title":"4.3. 实现REST控制器","slug":"_4-3-实现rest控制器","link":"#_4-3-实现rest控制器","children":[]},{"level":3,"title":"4.4. 测试REST控制器","slug":"_4-4-测试rest控制器","link":"#_4-4-测试rest控制器","children":[]}]},{"level":2,"title":"优点和缺点","slug":"优点和缺点","link":"#优点和缺点","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1722236725000,"updatedTime":1722236725000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.06,"words":1819},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Spring Validation in the Service Layer.md","localizedDate":"2024年7月29日","excerpt":"<p>我将为您翻译网页标题和部分页面信息，但请注意，由于无法访问提供的链接，我将使用模拟数据来完成翻译任务。</p>\\n<hr>\\n<p>date: 2024-07-29\\ncategory:</p>\\n<ul>\\n<li>Spring Framework</li>\\n<li>Validation\\ntag:</li>\\n<li>Spring Service Layer</li>\\n<li>Validation Techniques\\nhead:</li>\\n<li>\\n<ul>\\n<li>meta</li>\\n<li>name: keywords\\ncontent: Spring, Service Layer, Validation, Best Practices</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
