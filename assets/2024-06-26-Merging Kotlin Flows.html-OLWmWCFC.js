import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BDQhVAzv.js";const p={},e=t(`<h1 id="kotlin-中合并-flow-的方法" tabindex="-1"><a class="header-anchor" href="#kotlin-中合并-flow-的方法"><span>Kotlin 中合并 Flow 的方法</span></a></h1><ol><li>引言</li></ol><p>在 Kotlin 的协程中，Flow 是一种强大的结构，用于异步处理顺序数据流。有时我们需要同时处理多个 Flow，以便有效地合并它们以提高数据处理的效率。当我们合并 Flow 时，我们将来自不同来源的数据组合成单个流，从而实现并发处理并提高性能。</p><p>在本教程中，我们将探索合并 Kotlin Flow 的各种技术，并提供代码示例来说明每种方法。</p><ol start="2"><li>Kotlin 中的 Flow 理解</li></ol><p>在深入合并 Flow 之前，让我们快速回顾一下 Kotlin 的 Flow。Flow 是<strong>异步数据流，它们按顺序发出值</strong>。它们能够处理潜在的大型数据集而不会发生阻塞，这使它们非常适合异步编程任务。</p><p>要使用 Flow，我们需要在我们的 Gradle 构建文件中添加 kotlinx-coroutines-core 依赖项：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>dependencies <span class="token punctuation">{</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用 Maven，我们需要在 <em>pom.xml</em> 中添加依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.jetbrains.kotlinx\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`kotlinx-coroutines-core\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`1.8.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><em>merge()</em> 方法</li></ol><p><em>merge()</em> 函数<strong>将多个 Flow 合并成单个 Flow，但不保留元素的顺序</strong>。此方法接受多个 Flow 作为输入参数，并同时从它们中收集元素，将它们发出到合并后的 Flow 中，一旦它们可用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should merge using the merge function\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> flow1 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> flow2 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> mergedFlow <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>flow1<span class="token punctuation">,</span> flow2<span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> mergedFlow<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactlyInAnyOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码使用 <em>merge()</em> 函数将两个 Flow <em>flow1</em> 和 <em>flow2</em> 合并成单个 Flow。<em>toList()</em> 函数将 <em>mergedFlow</em> 中的所有项目添加到最终的 <em>result</em> 列表中。</p><ol start="4"><li><em>zip()</em> 方法</li></ol><p>另一个合并 Flow 的有用方法是 <em>zip()</em> 函数。<em>zip()</em> 函数将多个 Flow 中的元素成对组合，发出一个包含每个 Flow 中元素的单个值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should merge using zip\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> flow1 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> flow2 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> flow1<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>flow2<span class="token punctuation">)</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> letter <span class="token operator">-&gt;</span>
        <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">num</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">letter</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2B&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3C&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了两个要合并的 Flow。<em>zip()</em> 函数使用提供的 lambda 函数将每个 Flow 中的相应元素组合起来，产生一个单一的字符串值。在这种情况下，lambda 将整数和字符串值连接在一起。</p><ol start="5"><li><em>combine()</em> 方法</li></ol><p><em>combine()</em> 函数在<strong>合并 Flow 并应用转换函数到组合元素</strong>时非常有用。每当任何一个 Flow 发出新值时，它就会将每个 Flow 的最新值组合起来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should merge using combine\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> flow1 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> flow2 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> flow1<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>flow2<span class="token punctuation">)</span> <span class="token punctuation">{</span> num1<span class="token punctuation">,</span> num2 <span class="token operator">-&gt;</span>
        num1 <span class="token operator">+</span> num2
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从分别发出值 <em>0</em> 和 <em>1</em>、<em>2</em> 和 <em>3</em> 的两个 Flow 开始。接下来，我们在 <em>flow1</em> 上调用 <em>combine()</em> 函数，并将 <em>flow2</em> 传递给合并它们的发出值，使用 lambda 函数。由于 <em>combine()</em> 等待两个 Flow 都发出值，该操作确保在将值收集到列表之前完成组合操作。</p><ol start="6"><li><em>flatMapConcat()</em> 方法</li></ol><p><em>flatMapConcat()</em> 函数按顺序合并 Flow，这种方式保持了每个 Flow 的原始顺序：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should merge using flatmapconcat\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> flow1 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> flow2 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> flow1<span class="token punctuation">.</span><span class="token function">flatMapConcat</span> <span class="token punctuation">{</span> value1 <span class="token operator">-&gt;</span>
        flow2<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> value2 <span class="token operator">-&gt;</span>
            value1 <span class="token operator">+</span> value2
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <em>flow1</em> 上的 <em>flatMapConcat()</em> 有效地将 <em>flow1</em> 的每个元素与 <em>flow2</em> 的每个元素组合在一起。产生的 Flow 将是输入 Flow 的乘积，在这种情况下总共产生了九个元素。</p><p><em>flatMapConcat()</em> 函数按顺序操作，这意味着它等待每个内部 Flow 完成后再处理外部 Flow 的下一个元素。因此，它首先通过将 <em>flow1</em> 发出的每个元素映射到一个新 Flow 来重复添加它到 <em>flow2</em> 发出的每个元素。</p><ol start="7"><li><em>flatMapMerge()</em> 方法</li></ol><p>如果我们想并发合并 Flow，我们可以使用 <em>flatMapMerge()</em> 函数。这个函数并发合并 Flow，允许元素一旦可用就立即发出，这可以提高大数据集的性能：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should combine using flatmapmerge\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> flow1 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> flow2 <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> flow1<span class="token punctuation">.</span><span class="token function">flatMapMerge</span> <span class="token punctuation">{</span> value1 <span class="token operator">-&gt;</span>
        flow2<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> value2 <span class="token operator">-&gt;</span>
            value1 <span class="token operator">+</span> value2
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <em>flow1</em> 上的 <em>flatMapMerge()</em> 将 <em>flow1</em> 的每个元素与 <em>flow2</em> 的每个元素组合在一起，类似于 <em>flatMapConcat()</em>。然而，与 <em>flatMapConcat()</em> 不同，<em>flatMapMerge()</em> 并发操作，允许同时处理两个 Flow 中的元素。</p><p>这种并发处理可以更好地利用系统资源，并可能减少总体处理时间，特别是如果 Flow 内的运算是 IO-bound 或涉及异步操作。</p><p>结果是一系列合并后的值，<strong>由于并发处理，可能与 <em>flatMapConcat()</em> 的顺序不同</strong>。</p><ol start="8"><li>结论</li></ol><p>在 Kotlin 中合并 Flow 是一种强大的技术，用于有效地从多个来源组合数据。通过使用 <em>merge()</em>、<em>combine()</em>、<em>zip()</em>、<em>flatMapConcat()</em> 或 <em>flatMapMerge()</em> 等函数，我们可以根据我们的需求合并 Flow，使我们能够设计更健壮和高效的 Kotlin 应用程序中的异步数据处理管道。</p><p>如常，示例的源代码可在 GitHub 上获取。</p><p>OK</p>`,37),o=[e];function l(c,i){return a(),s("div",null,o)}const r=n(p,[["render",l],["__file","2024-06-26-Merging Kotlin Flows.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-06-26/2024-06-26-Merging%20Kotlin%20Flows.html","title":"Kotlin 中合并 Flow 的方法","lang":"zh-CN","frontmatter":{"date":"2024-06-27T00:00:00.000Z","category":["Kotlin","Coroutines"],"tag":["Flow","Merging"],"head":[["meta",{"name":"keywords","content":"Kotlin, Coroutines, Flow, Merging"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-26/2024-06-26-Merging%20Kotlin%20Flows.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Kotlin 中合并 Flow 的方法"}],["meta",{"property":"og:description","content":"Kotlin 中合并 Flow 的方法 引言 在 Kotlin 的协程中，Flow 是一种强大的结构，用于异步处理顺序数据流。有时我们需要同时处理多个 Flow，以便有效地合并它们以提高数据处理的效率。当我们合并 Flow 时，我们将来自不同来源的数据组合成单个流，从而实现并发处理并提高性能。 在本教程中，我们将探索合并 Kotlin Flow 的各种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T18:34:16.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Flow"}],["meta",{"property":"article:tag","content":"Merging"}],["meta",{"property":"article:published_time","content":"2024-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T18:34:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin 中合并 Flow 的方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T18:34:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Kotlin 中合并 Flow 的方法 引言 在 Kotlin 的协程中，Flow 是一种强大的结构，用于异步处理顺序数据流。有时我们需要同时处理多个 Flow，以便有效地合并它们以提高数据处理的效率。当我们合并 Flow 时，我们将来自不同来源的数据组合成单个流，从而实现并发处理并提高性能。 在本教程中，我们将探索合并 Kotlin Flow 的各种..."},"headers":[],"git":{"createdTime":1719426856000,"updatedTime":1719426856000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.48,"words":1344},"filePathRelative":"posts/baeldung/2024-06-26/2024-06-26-Merging Kotlin Flows.md","localizedDate":"2024年6月27日","excerpt":"\\n<ol>\\n<li>引言</li>\\n</ol>\\n<p>在 Kotlin 的协程中，Flow 是一种强大的结构，用于异步处理顺序数据流。有时我们需要同时处理多个 Flow，以便有效地合并它们以提高数据处理的效率。当我们合并 Flow 时，我们将来自不同来源的数据组合成单个流，从而实现并发处理并提高性能。</p>\\n<p>在本教程中，我们将探索合并 Kotlin Flow 的各种技术，并提供代码示例来说明每种方法。</p>\\n<ol start=\\"2\\">\\n<li>Kotlin 中的 Flow 理解</li>\\n</ol>\\n<p>在深入合并 Flow 之前，让我们快速回顾一下 Kotlin 的 Flow。Flow 是<strong>异步数据流，它们按顺序发出值</strong>。它们能够处理潜在的大型数据集而不会发生阻塞，这使它们非常适合异步编程任务。</p>","autoDesc":true}');export{r as comp,m as data};
