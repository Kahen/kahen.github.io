import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-C5QtKXnb.js";const i={},o=n(`<hr><h1 id="java中-代码太大-编译错误解析" tabindex="-1"><a class="header-anchor" href="#java中-代码太大-编译错误解析"><span>Java中&quot;代码太大&quot;编译错误解析</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>当Java方法超过65535字节时，我们会收到“代码太大”的编译错误。本文将讨论这个错误发生的原因以及如何解决它。</p><h2 id="_2-jvm限制" tabindex="-1"><a class="header-anchor" href="#_2-jvm限制"><span>2. JVM限制</span></a></h2><p><em>Code_attribute</em> 是JVM规范中_method_info_结构的可变长度表。这个结构包含了一个方法的JVM指令，可以是一个常规方法，也可以是一个实例、类或接口的初始化方法：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Code_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 max_stack;
    u2 max_locals;
    u4 code_length;
    u1 code[code_length];
    u2 exception_table_length;
    {
        u2 start_pc;
        u2 end_pc;
        u2 handler_pc;
        u2 catch_type;
    }
    exception_table[exception_table_length];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_attribute_中的_code_length_指定了方法中代码的长度：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>code_length
code_length项的值给出了此方法的code数组中的字节数。
code_length的值必须大于零（因为code数组不能为空）且小于65536。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所见，<strong>JVM规范规定</strong>方法的代码长度必须小于65536字节，这意味着方法的大小不能超过65535字节。</p><h2 id="_3-问题发生的原因" tabindex="-1"><a class="header-anchor" href="#_3-问题发生的原因"><span>3. 问题发生的原因</span></a></h2><p>现在我们知道了方法的大小限制，让我们看看可能导致如此大方法的情况：</p><ul><li>代码生成器：大多数大方法是由使用像ANTLR解析器这样的代码生成器产生的。</li><li>初始化方法：GUI初始化可能会在一个方法中添加许多细节，如布局、事件监听器等。</li><li>JSP页面：将所有代码包含在类的单个方法中。</li><li>代码插桩：在运行时向编译后的类添加字节码。</li><li>数组初始化器：如下所示的方法初始化非常大的数组：</li></ul><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>String[][] largeStringArray = new String[][] {
    { &quot;java&quot;, &quot;code&quot;, &quot;exceeded&quot;, &quot;65355&quot;, &quot;bytes&quot; },
    { &quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;delta&quot;, &quot;epsilon&quot; },
    { &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot; },
    { &quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;, &quot;cinco&quot; },

    // 更多值
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-如何修复错误" tabindex="-1"><a class="header-anchor" href="#_4-如何修复错误"><span>4. 如何修复错误</span></a></h2><p>正如我们所指出的，错误的根源是方法超过了65535字节的阈值。因此，<strong>将出错的方法重构为几个较小的方法</strong>将为我们解决这个问题。</p><p>在数组初始化的情况下，我们可以将数组分割或从文件中加载。我们还可以使用静态初始化器。即使我们使用代码生成器，我们仍然可以重构代码。在大型JSP文件的情况下，我们可以使用jsp:include指令并将其拆分为较小的单元。</p><p>上述问题相对容易处理，但<strong>当我们在代码中添加插桩后收到“代码太大”的错误时，事情就变得复杂了</strong>。如果我们拥有代码，我们仍然可以重构方法。但是，当我们从第三方库收到这个错误时，我们就陷入了困境。通过减少插桩级别，我们可能能够解决这个问题。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们讨论了“代码太大”错误的成因和潜在解决方案。我们始终可以参考JVM规范的Code_Attributes部分以获取有关此约束的更多详细信息。</p>`,20),l=[o];function r(d,s){return a(),t("div",null,l)}const p=e(i,[["render",r],["__file","2024-07-28- Code too large  Compilation Error in Java.html.vue"]]),_=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-%20Code%20too%20large%20%20Compilation%20Error%20in%20Java.html","title":"Java中\\"代码太大\\"编译错误解析","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Compilation"],"tag":["Java","JVM","Compilation Error"],"head":[["meta",{"name":"keywords","content":"Java, JVM, Compilation Error, Code too large"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-%20Code%20too%20large%20%20Compilation%20Error%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中\\"代码太大\\"编译错误解析"}],["meta",{"property":"og:description","content":"Java中\\"代码太大\\"编译错误解析 1. 概述 当Java方法超过65535字节时，我们会收到“代码太大”的编译错误。本文将讨论这个错误发生的原因以及如何解决它。 2. JVM限制 Code_attribute 是JVM规范中_method_info_结构的可变长度表。这个结构包含了一个方法的JVM指令，可以是一个常规方法，也可以是一个实例、类或接口的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T06:01:28.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:tag","content":"Compilation Error"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T06:01:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中\\\\\\"代码太大\\\\\\"编译错误解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T06:01:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中\\"代码太大\\"编译错误解析 1. 概述 当Java方法超过65535字节时，我们会收到“代码太大”的编译错误。本文将讨论这个错误发生的原因以及如何解决它。 2. JVM限制 Code_attribute 是JVM规范中_method_info_结构的可变长度表。这个结构包含了一个方法的JVM指令，可以是一个常规方法，也可以是一个实例、类或接口的..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. JVM限制","slug":"_2-jvm限制","link":"#_2-jvm限制","children":[]},{"level":2,"title":"3. 问题发生的原因","slug":"_3-问题发生的原因","link":"#_3-问题发生的原因","children":[]},{"level":2,"title":"4. 如何修复错误","slug":"_4-如何修复错误","link":"#_4-如何修复错误","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722146488000,"updatedTime":1722146488000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.59,"words":777},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28- Code too large  Compilation Error in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java中\\"代码太大\\"编译错误解析</h1>\\n<h2>1. 概述</h2>\\n<p>当Java方法超过65535字节时，我们会收到“代码太大”的编译错误。本文将讨论这个错误发生的原因以及如何解决它。</p>\\n<h2>2. JVM限制</h2>\\n<p><em>Code_attribute</em> 是JVM规范中_method_info_结构的可变长度表。这个结构包含了一个方法的JVM指令，可以是一个常规方法，也可以是一个实例、类或接口的初始化方法：</p>\\n<div class=\\"language-plaintext\\" data-ext=\\"plaintext\\" data-title=\\"plaintext\\"><pre class=\\"language-plaintext\\"><code>Code_attribute {\\n    u2 attribute_name_index;\\n    u4 attribute_length;\\n    u2 max_stack;\\n    u2 max_locals;\\n    u4 code_length;\\n    u1 code[code_length];\\n    u2 exception_table_length;\\n    {\\n        u2 start_pc;\\n        u2 end_pc;\\n        u2 handler_pc;\\n        u2 catch_type;\\n    }\\n    exception_table[exception_table_length];\\n    u2 attributes_count;\\n    attribute_info attributes[attributes_count];\\n}\\n</code></pre></div>","autoDesc":true}');export{p as comp,_ as data};
