import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CbPcg273.js";const e={},p=t(`<h1 id="jackson中将布尔值序列化为整数" tabindex="-1"><a class="header-anchor" href="#jackson中将布尔值序列化为整数"><span>Jackson中将布尔值序列化为整数</span></a></h1><p>Jackson库是Java世界处理JSON数据的事实标准。尽管Jackson有明确定义的默认设置，但要将布尔值映射为整数，我们仍然需要手动配置。</p><p>当然，一些开发人员想知道如何以最佳方式并以最小的努力实现这一点。</p><p>在本文中，我们将解释如何在Jackson中将布尔值序列化为整数和数字字符串，反之亦然。</p><h2 id="_2-序列化" tabindex="-1"><a class="header-anchor" href="#_2-序列化"><span>2. 序列化</span></a></h2><p>首先，我们将研究序列化部分。要测试布尔值到整数的序列化，让我们定义我们的模型，Game：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> paused<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> over<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像往常一样，默认的Game对象序列化将使用Jackson的ObjectMapper：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;My Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setPaused</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不出所料，布尔字段的输出将是默认的 - true或false：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;My Game&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;paused&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;over&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，我们的目标是最终从我们的Game对象中得到以下JSON输出：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;My Game&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;paused&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;over&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-字段级别配置" tabindex="-1"><a class="header-anchor" href="#_2-1-字段级别配置"><span>2.1. 字段级别配置</span></a></h3><p>将布尔值序列化为整数的一个直接方法是使用@JsonFormat注解并设置Shape.NUMBER：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token constant">NUMBER</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> paused<span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token constant">NUMBER</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> over<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们在测试方法中尝试我们的序列化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;My Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setPaused</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:1,\\&quot;over\\&quot;:0}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在JSON输出中注意到的，我们的布尔字段 - paused和over - 变成了数字1和0。我们可以看到值是以整数格式存在的，因为它们没有被引号包围。</p><h3 id="_2-2-全局配置" tabindex="-1"><a class="header-anchor" href="#_2-2-全局配置"><span>2.2. 全局配置</span></a></h3><p>有时，注释每个字段并不实用。例如，根据要求，我们可能需要全局配置我们的布尔值到整数序列化。</p><p>幸运的是，<strong>Jackson允许我们通过覆盖ObjectMapper中的默认值来全局配置@JsonFormat</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">configOverride</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token class-name">JsonFormat<span class="token punctuation">.</span>Value</span><span class="token punctuation">.</span><span class="token function">forShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token constant">NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;My Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setPaused</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:1,\\&quot;over\\&quot;:0}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-反序列化" tabindex="-1"><a class="header-anchor" href="#_3-反序列化"><span>3. 反序列化</span></a></h2><p>同样，我们可能还想在将JSON字符串反序列化为我们的模型时从数字中获取布尔值。</p><p>幸运的是，Jackson可以通过默认设置解析数字 - 只有1和0 - 到布尔值。因此，我们也不需要使用@JsonFormat注解或任何其他配置。</p><p>因此，无需配置，让我们借助另一个测试方法来查看这种行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:1,\\&quot;over\\&quot;:0}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isPaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，<strong>整数到布尔值的反序列化在Jackson中是开箱即用的</strong>。</p><h2 id="_4-数字字符串而不是整数" tabindex="-1"><a class="header-anchor" href="#_4-数字字符串而不是整数"><span>4. 数字字符串而不是整数</span></a></h2><p>另一个用例是使用数字字符串 - &quot;1&quot;和&quot;0&quot; - 而不是整数。在这种情况下，将布尔值序列化为数字字符串或将其反序列化回布尔值需要更多的努力。</p><h3 id="_4-1-序列化为数字字符串" tabindex="-1"><a class="header-anchor" href="#_4-1-序列化为数字字符串"><span>4.1. 序列化为数字字符串</span></a></h3><p>要将布尔值序列化为数字字符串等价物，我们需要定义自定义序列化器。</p><p>所以，让我们通过扩展Jackson的JsonSerializer创建我们的NumericBooleanSerializer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumericBooleanSerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        gen<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>value <span class="token operator">?</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺便说一下，通常，布尔类型可以为null。但是，Jackson在内部处理这个问题，并且当value字段为null时，不会考虑我们的自定义序列化器。因此，我们在这里是安全的。</p><p>接下来，我们将注册我们的自定义序列化器，以便Jackson识别并使用它。</p><p><strong>如果我们只需要对有限数量的字段进行这种行为，我们可以选择使用@JsonSerialize注解进行字段级别配置。</strong></p><p>相应地，让我们注释我们的布尔字段，paused和over：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> paused<span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> over<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，同样地，在测试方法中尝试序列化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;My Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setPaused</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:\\&quot;1\\&quot;,\\&quot;over\\&quot;:\\&quot;0\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管测试方法的实现与之前的几乎相同，但我们应该注意到引号 - &quot;paused&quot;:&quot;1&quot;, &quot;over&quot;:&quot;0&quot; - 围绕数字值。这肯定表明这些值实际上是包含数字内容的字符串。</p><p>最后但同样重要的是，如果我们需要在任何地方执行此自定义序列化，<strong>Jackson通过将它们添加到ObjectMapper的Jackson模块来支持序列化器的全局配置</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SimpleModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NumericBooleanSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;My Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setPaused</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function">setOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:\\&quot;1\\&quot;,\\&quot;over\\&quot;:\\&quot;0\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，只要我们使用相同的ObjectMapper实例，Jackson将所有布尔类型的字段序列化为数字字符串。</p><h3 id="_4-2-从数字字符串反序列化" tabindex="-1"><a class="header-anchor" href="#_4-2-从数字字符串反序列化"><span>4.2. 从数字字符串反序列化</span></a></h3><p>与序列化类似，这次我们将定义一个自定义反序列化器来解析数字字符串为布尔值。</p><p>让我们通过扩展JsonDeserializer创建我们的类NumericBooleanDeserializer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumericBooleanDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> p<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们再次注释我们的布尔字段，但这次使用@JsonDeserialize：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> paused<span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">NumericBooleanDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Boolean</span> over<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，让我们编写另一个测试方法来看看我们的NumericBooleanDeserializer在行动：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:\\&quot;1\\&quot;,\\&quot;over\\&quot;:\\&quot;0\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isPaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，通过Jackson模块，我们的自定义反序列化器的全局配置也是可能的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SimpleModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NumericBooleanDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;My Game\\&quot;,\\&quot;paused\\&quot;:\\&quot;1\\&quot;,\\&quot;over\\&quot;:\\&quot;0\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> game <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isPaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">isOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们描述了如何将布尔值序列化为整数和数字字符串，以及如何将它们反序列化回来。</p><p>如常，示例的源代码和更多内容可在GitHub上找到。</p>`,59),o=[p];function c(l,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","2024-07-23-Serialize and Deserialize Booleans as Integers With Jackson.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-23/2024-07-23-Serialize%20and%20Deserialize%20Booleans%20as%20Integers%20With%20Jackson.html","title":"Jackson中将布尔值序列化为整数","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","category":["Java","Jackson"],"tag":["JSON","Serialization","Deserialization"],"head":[["meta",{"name":"keywords","content":"Jackson, JSON, Serialization, Deserialization, Boolean, Integer"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-23/2024-07-23-Serialize%20and%20Deserialize%20Booleans%20as%20Integers%20With%20Jackson.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Jackson中将布尔值序列化为整数"}],["meta",{"property":"og:description","content":"Jackson中将布尔值序列化为整数 Jackson库是Java世界处理JSON数据的事实标准。尽管Jackson有明确定义的默认设置，但要将布尔值映射为整数，我们仍然需要手动配置。 当然，一些开发人员想知道如何以最佳方式并以最小的努力实现这一点。 在本文中，我们将解释如何在Jackson中将布尔值序列化为整数和数字字符串，反之亦然。 2. 序列化 首..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T22:49:53.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"Serialization"}],["meta",{"property":"article:tag","content":"Deserialization"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T22:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jackson中将布尔值序列化为整数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T22:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Jackson中将布尔值序列化为整数 Jackson库是Java世界处理JSON数据的事实标准。尽管Jackson有明确定义的默认设置，但要将布尔值映射为整数，我们仍然需要手动配置。 当然，一些开发人员想知道如何以最佳方式并以最小的努力实现这一点。 在本文中，我们将解释如何在Jackson中将布尔值序列化为整数和数字字符串，反之亦然。 2. 序列化 首..."},"headers":[{"level":2,"title":"2. 序列化","slug":"_2-序列化","link":"#_2-序列化","children":[{"level":3,"title":"2.1. 字段级别配置","slug":"_2-1-字段级别配置","link":"#_2-1-字段级别配置","children":[]},{"level":3,"title":"2.2. 全局配置","slug":"_2-2-全局配置","link":"#_2-2-全局配置","children":[]}]},{"level":2,"title":"3. 反序列化","slug":"_3-反序列化","link":"#_3-反序列化","children":[]},{"level":2,"title":"4. 数字字符串而不是整数","slug":"_4-数字字符串而不是整数","link":"#_4-数字字符串而不是整数","children":[{"level":3,"title":"4.1. 序列化为数字字符串","slug":"_4-1-序列化为数字字符串","link":"#_4-1-序列化为数字字符串","children":[]},{"level":3,"title":"4.2. 从数字字符串反序列化","slug":"_4-2-从数字字符串反序列化","link":"#_4-2-从数字字符串反序列化","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721774993000,"updatedTime":1721774993000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.34,"words":1601},"filePathRelative":"posts/baeldung/2024-07-23/2024-07-23-Serialize and Deserialize Booleans as Integers With Jackson.md","localizedDate":"2024年7月24日","excerpt":"\\n<p>Jackson库是Java世界处理JSON数据的事实标准。尽管Jackson有明确定义的默认设置，但要将布尔值映射为整数，我们仍然需要手动配置。</p>\\n<p>当然，一些开发人员想知道如何以最佳方式并以最小的努力实现这一点。</p>\\n<p>在本文中，我们将解释如何在Jackson中将布尔值序列化为整数和数字字符串，反之亦然。</p>\\n<h2>2. 序列化</h2>\\n<p>首先，我们将研究序列化部分。要测试布尔值到整数的序列化，让我们定义我们的模型，Game：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Game</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Long</span> id<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Boolean</span> paused<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Boolean</span> over<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 构造函数，getter和setter</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
