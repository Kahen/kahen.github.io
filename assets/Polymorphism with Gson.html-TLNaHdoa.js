import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as p}from"./app-BZTl7mFs.js";const e={},t=p(`<h1 id="gson中的多态性" tabindex="-1"><a class="header-anchor" href="#gson中的多态性"><span>Gson中的多态性</span></a></h1><p>在本教程中，我们将探讨如何使用Gson处理多态性。我们还将探索一些处理多态性序列化和反序列化的技巧。</p><h2 id="_2-json中的多态性" tabindex="-1"><a class="header-anchor" href="#_2-json中的多态性"><span>2. JSON中的多态性</span></a></h2><p>Java中的多态性是众所周知的。我们有一个类层次结构，适当的时候，我们可以以某些方式将不同但相关的类型视为相同。</p><p>例如，我们可能有一些二维形状的定义。不同形状的定义方式各不相同，但它们都有一些共同的特征——例如，它们都可以计算面积。</p><p>因此，我们可以定义一些多态类来定义一些形状：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> area<span class="token punctuation">;</span>

    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> area<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> area<span class="token punctuation">;</span>

    <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> side<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> side<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> area<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些形状各自有自己的特点，但如果我们只关它们都是_Shape_并且我们可以计算它们的面积，我们可以将它们全部视为相同。</p><p>但这与JSON有什么关系呢？<strong>我们显然不能在JSON文档中拥有功能，但我们可以有重叠的数据，我们可能希望以一种合理的方式在JSON中表示多态类。</strong></p><p>例如，上述形状可能被表示为：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;shape&quot;</span><span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;radius&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">50.26548245743669</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;shape&quot;</span><span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;side&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">25</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想简单地将它们视为_Shape_实例，我们已经拥有了可用的_area_。然而，如果我们想知道它们确切的形状，那么我们可以识别这一点，并从它们中提取额外的信息。</p><h2 id="_3-使用包装对象" tabindex="-1"><a class="header-anchor" href="#_3-使用包装对象"><span>3. 使用包装对象</span></a></h2><p><strong>解决这个问题的最简单方法是使用一个包装对象，并为我们的每种类型使用不同的字段</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Circle</span> circle<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Square</span> square<span class="token punctuation">;</span>

    <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token class-name">Circle</span> circle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>circle <span class="token operator">=</span> circle<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>square <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token class-name">Square</span> square<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>square <span class="token operator">=</span> square<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>circle <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这样的方式，我们的JSON将看起来像：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;circle&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;radius&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">50.26548245743669</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;square&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;side&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">25</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这不是技术上的多态，这意味着JSON的形状与我们之前看到的不同，但这非常容易实现。特别是，我们只需要编写我们的包装类型，Gson将自动为我们做所有事情：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span><span class="token punctuation">&gt;</span></span>\`\` shapes <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">4d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">5d</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样反序列化也正如我们所期望的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Type</span> collectionType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span><span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span><span class="token punctuation">&gt;</span></span>\`\`<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span><span class="token punctuation">&gt;</span></span>\`\` shapes <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> collectionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们需要在这里使用_TypeToken_，因为我们正在反序列化到一个泛型列表。这与我们的包装类型和多态结构无关。</p><p><strong>然而，这意味着我们的_Wrapper_类型需要支持每种可能的子类型。</strong> 添加新的子类型意味着需要做更多的工作来实现我们期望的结果。</p><h2 id="_4-在对象中添加类型字段" tabindex="-1"><a class="header-anchor" href="#_4-在对象中添加类型字段"><span>4. 在对象中添加类型字段</span></a></h2><p><strong>如果我们只对序列化我们的对象感兴趣，我们可以简单地向它们添加一个字段来指示类型</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 添加字段</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> area<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> side<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> side<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做将导致这个新的_type_字段出现在序列化的JSON中，允许客户端知道每种形状的类型：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;side&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这现在更接近我们之前看到的内容。<strong>然而，我们不能使用这种技术轻松地反序列化这个JSON</strong>，所以它只在我们不需要这样做的情况下才真正可行。</p><h2 id="_5-自定义类型适配器" tabindex="-1"><a class="header-anchor" href="#_5-自定义类型适配器"><span>5. 自定义类型适配器</span></a></h2><p><strong>我们将探索的最后方法是编写自定义类型适配器。这是我们可以贡献给Gson实例的一些代码，然后它将为我们处理类型序列化和反序列化。</strong></p><h3 id="_5-1-自定义序列化器" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义序列化器"><span>5.1. 自定义序列化器</span></a></h3><p>我们想要实现的第一件事是能够正确地序列化我们的类型。<strong>这意味着使用所有标准逻辑序列化它们，然后添加一个额外的_type_字段来指示对象的类型。</strong></p><p>我们通过为我们的类型编写自定义的_JsonSerializer_实现来实现这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeTypeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">JsonElement</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> shape<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">JsonSerializationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JsonElement</span> elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJsonTree</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elem<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> shape<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意，我们需要使用一个新的_Gson_实例来序列化值本身。如果我们重用了原始实例——通过_JsonSerializationContext_——那么我们将陷入一个无限循环，其中序列化器不断地调用自己。</strong></p><p>在这里，我们使用完整的类名作为我们的类型，但我们也可以使用任何我们想要支持的东西。我们只需要某种方式来在字符串和类名之间进行唯一转换。</p><p>使用这个，生成的JSON将是：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;radius&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">50.26548245743669</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.baeldung.gson.polymorphic.TypeAdapterUnitTest$Circle&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;side&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">&quot;area&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.baeldung.gson.polymorphic.TypeAdapterUnitTest$Square&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-自定义反序列化器" tabindex="-1"><a class="header-anchor" href="#_5-2-自定义反序列化器"><span>5.2. 自定义反序列化器</span></a></h3><p>现在我们可以将类型序列化到JSON中，我们需要也能够将它们反序列化。<strong>这意味着理解_type_字段，然后使用它来反序列化到正确的类中。</strong></p><p>我们通过为我们的类型编写自定义的_JsonDeserializer_实现来实现这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeTypeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonDeserializer</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonElement</span> json<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">JsonDeserializationContext</span> jsonDeserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonParseException</span> <span class="token punctuation">{</span>
        <span class="token class-name">JsonObject</span> jsonObject <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> typeName <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\` cls <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`<span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JsonParseException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以在同一个类中实现我们的序列化器和反序列化器，只需实现两个接口即可。这有助于保持逻辑在一起，以便我们知道两者是相互兼容的。</strong></p><p>和以前一样，我们需要使用一个新的_Gson_实例来实际执行反序列化。否则，我们将陷入一个无限循环。</p><h3 id="_5-3-连接类型适配器" tabindex="-1"><a class="header-anchor" href="#_5-3-连接类型适配器"><span>5.3. 连接类型适配器</span></a></h3><p>**现在我们已经得到了一个可以用于序列化和反序列化我们的多态类型的类型适配器，我们需要能够使用它。**这意味着创建一个将其连接的_Gson_实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ShapeTypeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们使用_registerTypeHierarchyAdapter_调用将其连接，因为这意味着它将被用于我们的_Shape_类和实现它的任何内容。</strong> 这将导致这个_Gson_实例在尝试将实现我们的_Shape_接口的任何内容序列化为JSON时，或在尝试将JSON反序列化为实现_Shape_接口的任何内容时，使用此适配器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`\`\` shapes <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">4d</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">5d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Type</span> collectionType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span><span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>\`\`\`\` result <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> collectionType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>在这里，我们看到了几种使用Gson管理多态类型的技术，无论是将它们序列化为JSON还是从JSON反序列化回来。</p><p>下次你在处理JSON和多态类型时，不妨试试其中的一些技术？</p><p>和往常一样，本文的全部代码可以在GitHub上找到。</p><p>评论在文章发布后30天内开放。对于此日期之后的任何问题，请使用网站上的联系表</p>`,55),o=[t];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","Polymorphism with Gson.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Polymorphism%20with%20Gson.html","title":"Gson中的多态性","lang":"zh-CN","frontmatter":{"date":"2024-06-19T00:00:00.000Z","category":["Spring","Java"],"tag":["Gson","Polymorphism"],"head":[["meta",{"name":"keywords","content":"Java, Gson, Polymorphism, JSON, Serialization, Deserialization"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Polymorphism%20with%20Gson.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Gson中的多态性"}],["meta",{"property":"og:description","content":"Gson中的多态性 在本教程中，我们将探讨如何使用Gson处理多态性。我们还将探索一些处理多态性序列化和反序列化的技巧。 2. JSON中的多态性 Java中的多态性是众所周知的。我们有一个类层次结构，适当的时候，我们可以以某些方式将不同但相关的类型视为相同。 例如，我们可能有一些二维形状的定义。不同形状的定义方式各不相同，但它们都有一些共同的特征——..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Gson"}],["meta",{"property":"article:tag","content":"Polymorphism"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gson中的多态性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Gson中的多态性 在本教程中，我们将探讨如何使用Gson处理多态性。我们还将探索一些处理多态性序列化和反序列化的技巧。 2. JSON中的多态性 Java中的多态性是众所周知的。我们有一个类层次结构，适当的时候，我们可以以某些方式将不同但相关的类型视为相同。 例如，我们可能有一些二维形状的定义。不同形状的定义方式各不相同，但它们都有一些共同的特征——..."},"headers":[{"level":2,"title":"2. JSON中的多态性","slug":"_2-json中的多态性","link":"#_2-json中的多态性","children":[]},{"level":2,"title":"3. 使用包装对象","slug":"_3-使用包装对象","link":"#_3-使用包装对象","children":[]},{"level":2,"title":"4. 在对象中添加类型字段","slug":"_4-在对象中添加类型字段","link":"#_4-在对象中添加类型字段","children":[]},{"level":2,"title":"5. 自定义类型适配器","slug":"_5-自定义类型适配器","link":"#_5-自定义类型适配器","children":[{"level":3,"title":"5.1. 自定义序列化器","slug":"_5-1-自定义序列化器","link":"#_5-1-自定义序列化器","children":[]},{"level":3,"title":"5.2. 自定义反序列化器","slug":"_5-2-自定义反序列化器","link":"#_5-2-自定义反序列化器","children":[]},{"level":3,"title":"5.3. 连接类型适配器","slug":"_5-3-连接类型适配器","link":"#_5-3-连接类型适配器","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":6.21,"words":1864},"filePathRelative":"posts/baeldung/Archive/Polymorphism with Gson.md","localizedDate":"2024年6月19日","excerpt":"\\n<p>在本教程中，我们将探讨如何使用Gson处理多态性。我们还将探索一些处理多态性序列化和反序列化的技巧。</p>\\n<h2>2. JSON中的多态性</h2>\\n<p>Java中的多态性是众所周知的。我们有一个类层次结构，适当的时候，我们可以以某些方式将不同但相关的类型视为相同。</p>\\n<p>例如，我们可能有一些二维形状的定义。不同形状的定义方式各不相同，但它们都有一些共同的特征——例如，它们都可以计算面积。</p>\\n<p>因此，我们可以定义一些多态类来定义一些形状：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Shape</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">getArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Circle</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Shape</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">double</span> radius<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">double</span> area<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">Circle</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> radius<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>radius <span class=\\"token operator\\">=</span> radius<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>area <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">PI</span> <span class=\\"token operator\\">*</span> radius <span class=\\"token operator\\">*</span> radius<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">getArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> area<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Square</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Shape</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">double</span> side<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">double</span> area<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">Square</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> side<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>side <span class=\\"token operator\\">=</span> side<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>area <span class=\\"token operator\\">=</span> side <span class=\\"token operator\\">*</span> side<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">getArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> area<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
