import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DpDzgwdT.js";const e={},p=t(`<h1 id="ktor-控制器测试指南" tabindex="-1"><a class="header-anchor" href="#ktor-控制器测试指南"><span>Ktor 控制器测试指南</span></a></h1><p>在本教程中，我们将学习一种编写 Ktor 控制器测试的方法。我们将创建一个 Ktor API 进行测试，并且为了专注于测试，我们不会使用任何数据库。</p><h2 id="_2-应用设置" tabindex="-1"><a class="header-anchor" href="#_2-应用设置"><span>2. 应用设置</span></a></h2><p>让我们开始在我们的 Ktor 应用程序的 <em>build.gradle</em> 文件中导入 <em>ktor-server-core</em>、<em>ktor-server-netty</em> 和 <em>ktor-serialization-jackson</em> 依赖项：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.ktor&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;ktor-server-core&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2.3.5&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.ktor&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;ktor-server-netty&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2.3.5&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.ktor&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;ktor-serialization-jackson&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2.3.5&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以添加 <em>ktor-server-tests</em> 和 <em>kotlin-test-junit</em> 测试依赖项：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.ktor&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;ktor-server-tests&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2.3.5&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin-test-junit&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;1.9.10&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-内容协商" tabindex="-1"><a class="header-anchor" href="#_2-1-内容协商"><span>2.1. 内容协商</span></a></h3><p>我们将使用 Jackson 来处理我们的内容序列化。让我们创建一个 <em>Application</em> 扩展方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">install</span><span class="token punctuation">(</span>ContentNegotiation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">jackson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-路由配置" tabindex="-1"><a class="header-anchor" href="#_2-2-路由配置"><span>2.2. 路由配置</span></a></h3><p>为了路由我们的应用程序请求，让我们创建另一个扩展方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    routing <span class="token punctuation">{</span>
        <span class="token function">route</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;cars&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-嵌入式服务器" tabindex="-1"><a class="header-anchor" href="#_2-3-嵌入式服务器"><span>2.3. 嵌入式服务器</span></a></h3><p>现在，我们可以使用这些扩展为我们的服务器：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">embeddedServer</span><span class="token punctuation">(</span>Netty<span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">,</span> host <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;0.0.0.0&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>wait <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-ktor-控制器" tabindex="-1"><a class="header-anchor" href="#_3-ktor-控制器"><span>3. Ktor 控制器</span></a></h2><p>在开始配置我们的路由之前，让我们创建一个 <em>Car</em> 类来表示我们的领域：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Car</span><span class="token punctuation">(</span>
    <span class="token keyword">val</span> id<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">var</span> brand<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">var</span> price<span class="token operator">:</span> Double
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们不会使用任何数据库，我们将创建一个存储模拟类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> CarStorageMock <span class="token punctuation">{</span>
    <span class="token keyword">val</span> carStorage <span class="token operator">=</span> ArrayList\`\`\`\`<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span>\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用这些类来 <strong>在“cars”路由内编码路由</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">get</span> <span class="token punctuation">{</span>
    call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span>
    <span class="token keyword">val</span> car <span class="token operator">=</span> CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>
        text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span>
        status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound
    <span class="token punctuation">)</span>
    call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
post <span class="token punctuation">{</span>
    <span class="token keyword">val</span> car <span class="token operator">=</span> call<span class="token punctuation">.</span>receive\`\`\`\`<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span>\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span>
    CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span>
    call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>Created<span class="token punctuation">,</span> message <span class="token operator">=</span> car<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span>
    <span class="token keyword">val</span> car <span class="token operator">=</span> CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token keyword">return</span><span class="token label symbol">@put</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>
        text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span>
        status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound
    <span class="token punctuation">)</span>
    <span class="token keyword">val</span> carUpdate <span class="token operator">=</span> call<span class="token punctuation">.</span>receive\`\`\`\`<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span>\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span>
    car<span class="token punctuation">.</span>brand <span class="token operator">=</span> carUpdate<span class="token punctuation">.</span>brand
    car<span class="token punctuation">.</span>price <span class="token operator">=</span> carUpdate<span class="token punctuation">.</span>price
    call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;car.deleted&quot;</span></span><span class="token punctuation">,</span> status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span> status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管我们使用模拟存储，但这是一个功能性服务器，它将帮助我们创建真实的测试。</p><h2 id="_4-测试设置" tabindex="-1"><a class="header-anchor" href="#_4-测试设置"><span>4. 测试设置</span></a></h2><p>我们将使用 <em>testApplication()</em> 函数来创建测试。由于我们使用 <em>embeddedServer</em>，我们必须手动添加模块。所以，让我们从“获取所有”端点开始：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`when get cars then should return a list with cars\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> testApplication <span class="token punctuation">{</span>
    application <span class="token punctuation">{</span>
        <span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要为这个服务器发出请求，<strong>我们可以创建一个客户端，并使用 <em>Jackson</em> 作为其内容协商者</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> client <span class="token operator">=</span> createClient <span class="token punctuation">{</span>
    <span class="token function">install</span><span class="token punctuation">(</span>ContentNegotiation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">jackson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们将在所有测试中使用这种模式，让我们创建一个方法来避免重复：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> ApplicationTestBuilder<span class="token punctuation">.</span><span class="token function">configureServerAndGetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> HttpClient <span class="token punctuation">{</span>
    application <span class="token punctuation">{</span>
        <span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> client <span class="token operator">=</span> createClient <span class="token punctuation">{</span>
        <span class="token function">install</span><span class="token punctuation">(</span>ContentNegotiation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">jackson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每次测试之前清除我们的模拟非常重要：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Before</span>
<span class="token keyword">fun</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-获取汽车" tabindex="-1"><a class="header-anchor" href="#_4-1-获取汽车"><span>4.1. 获取汽车</span></a></h3><p>要检索汽车列表，让我们在我们的模拟类中添加几辆汽车：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>
    <span class="token function">listOf</span><span class="token punctuation">(</span>
        <span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;BMW&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">10000.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">11000.0</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用客户端创建一个 GET 请求：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要将响应体解析为 <em>List</em>，我们需要为变量声明一个类型：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> responseBody<span class="token operator">:</span> List\`\`\`\`<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span>\`\`\`\` <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们可以断言结果。对于 REST API，我们应该始终断言响应状态和响应体：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>size<span class="token punctuation">)</span>

<span class="token keyword">val</span> bmwCar <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span> <span class="token punctuation">}</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;BMW&quot;</span></span><span class="token punctuation">,</span> bmwCar<span class="token operator">?</span><span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">10000.0</span><span class="token punctuation">,</span> bmwCar<span class="token operator">?</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span>

<span class="token keyword">val</span> audiCar <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span> <span class="token punctuation">}</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> audiCar<span class="token operator">?</span><span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">11000.0</span><span class="token punctuation">,</span> audiCar<span class="token operator">?</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用几乎相同的方法来测试“按 ID 获取”端点：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/1&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> responseBody<span class="token operator">:</span> Car <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;BMW&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于“按 ID 获取”，我们还必须测试一个在我们的服务器中不存在的 ID 的请求：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/3&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> responseText <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bodyAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span> responseText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-创建汽车" tabindex="-1"><a class="header-anchor" href="#_4-2-创建汽车"><span>4.2. 创建汽车</span></a></h3><p>要测试 POST 请求，我们必须在请求中发送一个正文：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">contentType</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Json<span class="token punctuation">)</span>
    <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">11000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，断言响应：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> responseBody<span class="token operator">:</span> Car <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Created<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-更新汽车" tabindex="-1"><a class="header-anchor" href="#_4-3-更新汽车"><span>4.3. 更新汽车</span></a></h3><p>对于 PUT 方法，我们必须首先创建一辆汽车，然后我们可以更新它：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;BMW&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">10000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/1&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">contentType</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Json<span class="token punctuation">)</span>
    <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">11000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> responseBody<span class="token operator">:</span> Car <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span>brand<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这个功能，我们还有对无效 ID 的验证：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/2&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">contentType</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Json<span class="token punctuation">)</span>
    <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Audi&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">11000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> responseText <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bodyAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span> responseText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-删除汽车" tabindex="-1"><a class="header-anchor" href="#_4-4-删除汽车"><span>4.4. 删除汽车</span></a></h3><p>DELETE 方法也需要一个现有的汽车才能被删除：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>CarStorageMock<span class="token punctuation">.</span>carStorage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Car</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> brand <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;BMW&quot;</span></span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">10000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/1&quot;</span></span><span class="token punctuation">)</span>
valresponseText <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bodyAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;car.deleted&quot;</span></span><span class="token punctuation">,</span> responseText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以断言响应体和状态码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/cars/2&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> responseText <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bodyAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;car.not.found&quot;</span></span><span class="token punctuation">,</span> responseText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们创建了一个功能性的模拟并为其编写了测试。重要的是要注意，<strong>如果我们实现任何数据库，我们的测试仍然有效</strong>，当然，我们需要更改所有 <em>CarStorageMock</em> 访问。这种方法是测试驱动开发的重要部分。</p><p>所有代码都可以在 GitHub 上找到。</p><p><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Kotlin Logo</a><a href="https://www.baeldung.com/wp-content/uploads/sites/5/2022/11/kotlin_sublogo.png" target="_blank" rel="noopener noreferrer">Kotlin Sublogo</a><a href="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar Logo</a><a href="https://www.baeldung.com/wp-content/uploads/custom_avatars/Michael-Krimgen-150x150.png" target="_blank" rel="noopener noreferrer">Michael Krimgen Avatar</a><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/whiteleaf.svg" target="_blank" rel="noopener noreferrer">Whiteleaf Icon</a></p><p>OK</p>`,66),o=[p];function l(i,c){return a(),s("div",null,o)}const k=n(e,[["render",l],["__file","2024-07-06-Testing Ktor Controllers.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-06/2024-07-06-Testing%20Ktor%20Controllers.html","title":"Ktor 控制器测试指南","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","Ktor"],"tag":["Testing","Ktor","API"],"head":[["meta",{"name":"keywords","content":"Ktor, Testing, API, Kotlin"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-06/2024-07-06-Testing%20Ktor%20Controllers.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Ktor 控制器测试指南"}],["meta",{"property":"og:description","content":"Ktor 控制器测试指南 在本教程中，我们将学习一种编写 Ktor 控制器测试的方法。我们将创建一个 Ktor API 进行测试，并且为了专注于测试，我们不会使用任何数据库。 2. 应用设置 让我们开始在我们的 Ktor 应用程序的 build.gradle 文件中导入 ktor-server-core、ktor-server-netty 和 ktor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-06T14:58:26.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:tag","content":"Ktor"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-06T14:58:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ktor 控制器测试指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-06T14:58:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Ktor 控制器测试指南 在本教程中，我们将学习一种编写 Ktor 控制器测试的方法。我们将创建一个 Ktor API 进行测试，并且为了专注于测试，我们不会使用任何数据库。 2. 应用设置 让我们开始在我们的 Ktor 应用程序的 build.gradle 文件中导入 ktor-server-core、ktor-server-netty 和 ktor..."},"headers":[{"level":2,"title":"2. 应用设置","slug":"_2-应用设置","link":"#_2-应用设置","children":[{"level":3,"title":"2.1. 内容协商","slug":"_2-1-内容协商","link":"#_2-1-内容协商","children":[]},{"level":3,"title":"2.2. 路由配置","slug":"_2-2-路由配置","link":"#_2-2-路由配置","children":[]},{"level":3,"title":"2.3. 嵌入式服务器","slug":"_2-3-嵌入式服务器","link":"#_2-3-嵌入式服务器","children":[]}]},{"level":2,"title":"3. Ktor 控制器","slug":"_3-ktor-控制器","link":"#_3-ktor-控制器","children":[]},{"level":2,"title":"4. 测试设置","slug":"_4-测试设置","link":"#_4-测试设置","children":[{"level":3,"title":"4.1. 获取汽车","slug":"_4-1-获取汽车","link":"#_4-1-获取汽车","children":[]},{"level":3,"title":"4.2. 创建汽车","slug":"_4-2-创建汽车","link":"#_4-2-创建汽车","children":[]},{"level":3,"title":"4.3. 更新汽车","slug":"_4-3-更新汽车","link":"#_4-3-更新汽车","children":[]},{"level":3,"title":"4.4. 删除汽车","slug":"_4-4-删除汽车","link":"#_4-4-删除汽车","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720277906000,"updatedTime":1720277906000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1310},"filePathRelative":"posts/baeldung/2024-07-06/2024-07-06-Testing Ktor Controllers.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>在本教程中，我们将学习一种编写 Ktor 控制器测试的方法。我们将创建一个 Ktor API 进行测试，并且为了专注于测试，我们不会使用任何数据库。</p>\\n<h2>2. 应用设置</h2>\\n<p>让我们开始在我们的 Ktor 应用程序的 <em>build.gradle</em> 文件中导入 <em>ktor-server-core</em>、<em>ktor-server-netty</em> 和 <em>ktor-serialization-jackson</em> 依赖项：</p>\\n<div class=\\"language-kotlin\\" data-ext=\\"kt\\" data-title=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token function\\">implementation</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"io.ktor\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"ktor-server-core\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"2.3.5\\"</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">implementation</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"io.ktor\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"ktor-server-netty\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"2.3.5\\"</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">implementation</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"io.ktor\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"ktor-serialization-jackson\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\"2.3.5\\"</span></span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
