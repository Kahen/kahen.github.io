import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C5QtKXnb.js";const e={},p=t(`<h1 id="keycloak集成-使用swagger-ui的oauth2和openid" tabindex="-1"><a class="header-anchor" href="#keycloak集成-使用swagger-ui的oauth2和openid"><span>Keycloak集成 - 使用Swagger UI的OAuth2和OpenID</span></a></h1><p>在本教程中，我们将重点介绍如何使用Keycloak对REST服务进行身份验证和授权，并使用Swagger UI进行测试。</p><h2 id="_2-挑战" tabindex="-1"><a class="header-anchor" href="#_2-挑战"><span>2. 挑战</span></a></h2><p>像其他Web资源一样，REST API通常需要安全保护。因此，服务消费者（例如Swagger UI）不仅需要处理HTTP调用本身，还需要向服务提供商提供身份验证信息。</p><p>Keycloak是一个IAM服务器，允许在服务提供商的实现之外进行身份验证和授权。它是架构的一部分，如下所示：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/oauth.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先，我们需要安装Keycloak服务器，并将其实现在Spring Boot应用程序中作为REST服务提供商。然后，我们需要扩展Swagger UI。</p><h2 id="_3-集成swagger-ui" tabindex="-1"><a class="header-anchor" href="#_3-集成swagger-ui"><span>3. 集成Swagger UI</span></a></h2><p>要在spring-boot和swagger-ui之间进行集成，请将库添加到项目依赖列表中（无需额外配置）：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.springdoc\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`springdoc-openapi-starter-webmvc-ui\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`2.5.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用标准" tabindex="-1"><a class="header-anchor" href="#_4-使用标准"><span>4. 使用标准</span></a></h2><p>对于特定供应商的代码扩展Swagger UI，只有在特殊情况下才有意义。因此，我们应该优先使用供应商中立的标准。以下部分将描述如何实现这一点。</p><h3 id="_4-1-现有标准" tabindex="-1"><a class="header-anchor" href="#_4-1-现有标准"><span>4.1. 现有标准</span></a></h3><p>首先，我们需要知道存在哪些标准。对于身份验证和授权，有一个像OAuth2这样的协议。对于单点登录（SSO），我们可以使用OpenID Connect（OIDC）作为OAuth2的扩展。</p><p>描述REST API的标准是OpenAPI。这个标准包括定义多种安全方案，包括OAuth2和OIDC：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span>
  <span class="token key atrule">/api/v1/products</span><span class="token punctuation">:</span>
    <span class="token key atrule">get</span><span class="token punctuation">:</span>
      <span class="token punctuation">...</span>
      <span class="token key atrule">security</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">my_oAuth_security_schema</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> read_access
<span class="token punctuation">...</span>
<span class="token key atrule">securitySchemes</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_oAuth_security_schema</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> oauth2
    <span class="token key atrule">flows</span><span class="token punctuation">:</span>
      <span class="token key atrule">implicit</span><span class="token punctuation">:</span>
        <span class="token key atrule">authorizationUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//api.example.com/oauth2/authorize
        <span class="token key atrule">scopes</span><span class="token punctuation">:</span>
          <span class="token key atrule">read_access</span><span class="token punctuation">:</span> 读取数据
          <span class="token key atrule">write_access</span><span class="token punctuation">:</span> 修改数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-扩展服务提供商" tabindex="-1"><a class="header-anchor" href="#_4-2-扩展服务提供商"><span>4.2. 扩展服务提供商</span></a></h3><p>在代码优先的方法中，服务提供商可以根据代码生成OpenAPI文档。因此，安全方案也必须以这种方式提供。例如，使用Spring Boot，包括SpringDoc，我们可以编写这样的配置类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenAPISecurityConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${keycloak.auth-server-url}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> authServerUrl<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${keycloak.realm}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> realm<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OAUTH_SCHEME_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;my_oAuth_security_schema&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">openAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Components</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addSecuritySchemes</span><span class="token punctuation">(</span><span class="token constant">OAUTH_SCHEME_NAME</span><span class="token punctuation">,</span> <span class="token function">createOAuthScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addSecurityItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addList</span><span class="token punctuation">(</span><span class="token constant">OAUTH_SCHEME_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Todos Management Service&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;A service providing todos.&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">SecurityScheme</span> <span class="token function">createOAuthScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OAuthFlows</span> flows <span class="token operator">=</span> <span class="token function">createOAuthFlows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">SecurityScheme<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OAUTH2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">flows</span><span class="token punctuation">(</span>flows<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">OAuthFlows</span> <span class="token function">createOAuthFlows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OAuthFlow</span> flow <span class="token operator">=</span> <span class="token function">createAuthorizationCodeFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OAuthFlows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">implicit</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">OAuthFlow</span> <span class="token function">createAuthorizationCodeFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OAuthFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">authorizationUrl</span><span class="token punctuation">(</span>authServerUrl <span class="token operator">+</span> <span class="token string">&quot;/realms/&quot;</span> <span class="token operator">+</span> realm <span class="token operator">+</span> <span class="token string">&quot;/protocol/openid-connect/auth&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span><span class="token string">&quot;read_access&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;read data&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span><span class="token string">&quot;write_access&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;modify data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，使用其他技术将导致不同的实现。但我们应该始终意识到需要生成的OpenAPI。</p><h3 id="_4-3-扩展服务消费者" tabindex="-1"><a class="header-anchor" href="#_4-3-扩展服务消费者"><span>4.3. 扩展服务消费者</span></a></h3><p>Swagger UI默认支持OpenAPI身份验证方案 - 无需自定义。我们将获得一个认证的可能性：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/swagger-ui-auth.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其他客户端将有不同的解决方案。例如，有一个为Angular应用程序提供的NPM模块，以简单直接的方式提供OAuth2和OpenID Connect（OIDC）。</p><h2 id="_5-从swaggerui测试端点" tabindex="-1"><a class="header-anchor" href="#_5-从swaggerui测试端点"><span>5. 从SwaggerUI测试端点</span></a></h2><p>按照本文提供的配置，您应该已经配置了一个能够登录应用程序的用户。为了使用swagger-UI，您还应该配置客户端（<em>login-app</em>）并启用_隐式流身份验证方法_：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/implicit-flow-1024x338.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>您还需要通过首先在_Client Scope_会话中创建作用域来链接应用程序作用域（读取和写入）：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/scopes-creation-1024x564.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后将它们添加到应用程序的启用作用域列表中：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/add-scopes.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在，您将能够在swagger-ui应用程序中使用正确的作用域进行身份验证，该应用程序可在地址http://localhost:8081/swagger-ui/index.html访问：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/auhtorized-swagger.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后，我们可以点击swagger中定义的控制器端点：</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们指出了在使用Keycloak作为IAM的情况下，使用Swagger UI测试REST服务的可能性。最佳解决方案是使用OpenAPI、OAuth2和OpenID Connect等标准，这些工具都支持。</p><p>如常，所有代码都可以在GitHub上找到。</p>`,37),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-22-Keycloak Integration   OAuth2 and OpenID with Swagger UI.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Keycloak%20Integration%20%20%20OAuth2%20and%20OpenID%20with%20Swagger%20UI.html","title":"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID","lang":"zh-CN","frontmatter":{"date":"2022-01-01T00:00:00.000Z","category":["Keycloak","OAuth2","OpenID","Swagger UI"],"tag":["Integration","Security","REST API","Spring Boot"],"head":[["meta",{"name":"keywords","content":"Keycloak, OAuth2, OpenID, Swagger UI, REST API, Spring Boot, Security, Integration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Keycloak%20Integration%20%20%20OAuth2%20and%20OpenID%20with%20Swagger%20UI.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID"}],["meta",{"property":"og:description","content":"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID 在本教程中，我们将重点介绍如何使用Keycloak对REST服务进行身份验证和授权，并使用Swagger UI进行测试。 2. 挑战 像其他Web资源一样，REST API通常需要安全保护。因此，服务消费者（例如Swagger UI）不仅需要处理HTTP调用本身，还需要向服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/01/oauth.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T20:46:08.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Integration"}],["meta",{"property":"article:tag","content":"Security"}],["meta",{"property":"article:tag","content":"REST API"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T20:46:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/01/oauth.svg\\",\\"https://www.baeldung.com/wp-content/uploads/2022/01/swagger-ui-auth.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/01/implicit-flow-1024x338.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/01/scopes-creation-1024x564.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/01/add-scopes.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/01/auhtorized-swagger.png\\"],\\"datePublished\\":\\"2022-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T20:46:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID 在本教程中，我们将重点介绍如何使用Keycloak对REST服务进行身份验证和授权，并使用Swagger UI进行测试。 2. 挑战 像其他Web资源一样，REST API通常需要安全保护。因此，服务消费者（例如Swagger UI）不仅需要处理HTTP调用本身，还需要向服..."},"headers":[{"level":2,"title":"2. 挑战","slug":"_2-挑战","link":"#_2-挑战","children":[]},{"level":2,"title":"3. 集成Swagger UI","slug":"_3-集成swagger-ui","link":"#_3-集成swagger-ui","children":[]},{"level":2,"title":"4. 使用标准","slug":"_4-使用标准","link":"#_4-使用标准","children":[{"level":3,"title":"4.1. 现有标准","slug":"_4-1-现有标准","link":"#_4-1-现有标准","children":[]},{"level":3,"title":"4.2. 扩展服务提供商","slug":"_4-2-扩展服务提供商","link":"#_4-2-扩展服务提供商","children":[]},{"level":3,"title":"4.3. 扩展服务消费者","slug":"_4-3-扩展服务消费者","link":"#_4-3-扩展服务消费者","children":[]}]},{"level":2,"title":"5. 从SwaggerUI测试端点","slug":"_5-从swaggerui测试端点","link":"#_5-从swaggerui测试端点","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721681168000,"updatedTime":1721681168000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1038},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Keycloak Integration   OAuth2 and OpenID with Swagger UI.md","localizedDate":"2022年1月1日","excerpt":"\\n<p>在本教程中，我们将重点介绍如何使用Keycloak对REST服务进行身份验证和授权，并使用Swagger UI进行测试。</p>\\n<h2>2. 挑战</h2>\\n<p>像其他Web资源一样，REST API通常需要安全保护。因此，服务消费者（例如Swagger UI）不仅需要处理HTTP调用本身，还需要向服务提供商提供身份验证信息。</p>\\n<p>Keycloak是一个IAM服务器，允许在服务提供商的实现之外进行身份验证和授权。它是架构的一部分，如下所示：</p>\\n<figure><img src=\\"https://www.baeldung.com/wp-content/uploads/2022/01/oauth.svg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{d as comp,k as data};
