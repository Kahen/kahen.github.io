import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-Bx_7oN2A.js";const t={},p=e('<hr><h1 id="在java包中查找所有类" tabindex="-1"><a class="header-anchor" href="#在java包中查找所有类"><span>在Java包中查找所有类</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>有时，我们希望了解应用程序的运行时行为，例如查找运行时可用的所有类。</p><p>在本教程中，我们将探讨几个示例，展示如何在运行时查找Java包中的所有类。</p><h2 id="_2-类加载器" tabindex="-1"><a class="header-anchor" href="#_2-类加载器"><span>2. 类加载器</span></a></h2><p>首先，我们将从Java类加载器开始讨论。Java类加载器是Java运行时环境（JRE）的一部分，它动态地将Java类加载到Java虚拟机（JVM）中。Java类加载器将JRE与文件和文件系统解耦。<strong>并非所有类都由单个类加载器加载</strong>。</p><p>让我们通过图示来理解Java中可用的类加载器：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/05/ClassLoaders.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Java 9在类加载器方面引入了一些重大变化。随着模块的引入，我们可以选择在类路径旁边提供模块路径。系统类加载器加载在模块路径上存在的类。</p><p><strong>类加载器是动态的</strong>。它们不需要告诉JVM它在运行时可以提供哪些类。因此，查找包中的类本质上是一个文件系统操作，而不是通过使用Java反射来完成的。</p><p>然而，我们可以编写自己的类加载器或检查类路径以查找包内的类。</p><p>为了说明，让我们创建一个包 <code>com.baeldung.reflection.access.packages.search</code>。</p><p>现在，让我们定义一个示例类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">class</span> <span class="token class-name">NestedClass</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们定义一个接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceExample</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在接下来的部分中，我们将看看如何使用系统类加载器和一些第三方库来查找类。</p><h3 id="_3-1-系统类加载器" tabindex="-1"><a class="header-anchor" href="#_3-1-系统类加载器"><span>3.1. 系统类加载器</span></a></h3><p>首先，我们将使用内置的系统类加载器。<strong>系统类加载器</strong> <strong>加载在类路径中找到的所有类</strong>。这发生在JVM的早期初始化期间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessingAllClassesInPackage</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">findAllClassesUsingClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">InputStream</span> stream <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>packageName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;[.]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> reader<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> line<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token function">getClass</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Class</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>packageName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span>\n              <span class="token operator">+</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> className<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 处理异常</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们上面的示例中，我们使用静态 <em>getSystemClassLoader()</em> 方法加载系统类加载器。</p><p>接下来，我们将查找给定包中的资源。我们将使用 <em>getResourceAsStream</em> 方法将资源作为URL流读取。为了获取包下的资源，我们需要将包名转换为URL字符串。因此，我们需要将所有的点（.）替换为路径分隔符（“/”）。</p><p>之后，我们将流输入到 <em>BufferedReader</em> 并过滤所有以 <em>.class</em> 扩展名结尾的URL。获取所需的资源后，我们将构造类并将所有结果收集到一个 <em>Set</em> 中。<strong>由于Java不允许lambda抛出异常，我们必须在 <em>getClass</em> 方法中处理它</strong>。</p><p>让我们现在测试这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">when_findAllClassesUsingClassLoader_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AccessingAllClassesInPackage</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessingAllClassesInPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` classes <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">findAllClassesUsingClassLoader</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;com.baeldung.reflection.access.packages.search&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> classes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包中只有两个Java文件。然而，我们声明了三个类——包括嵌套类 <em>NestedExample</em>。因此，我们的测试结果显示了三个类。</p><p>请注意，搜索包与当前工作包不同。</p><h3 id="_3-2-reflections库" tabindex="-1"><a class="header-anchor" href="#_3-2-reflections库"><span>3.2. Reflections库</span></a></h3><p>Reflections是一个流行的库，它扫描当前类路径并允许我们在运行时查询它。</p><p>让我们首先将 <em>reflections</em> 依赖项添加到我们的Maven项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.reflections``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``reflections``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``0.9.12``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们深入代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">findAllClassesUsingReflectionsLibrary</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Reflections</span> reflections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reflections</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SubTypesScanner</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> reflections<span class="token punctuation">.</span><span class="token function">getSubTypesOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种方法中，我们初始化了 <em>SubTypesScanner</em> 类，并获取了 <em>Object</em> 类的所有子类型。通过这种方法，我们在获取类时可以获得更多的粒度。</p><p>再次，让我们测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">when_findAllClassesUsingReflectionsLibrary_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AccessingAllClassesInPackage</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessingAllClassesInPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` classes <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">findAllClassesUsingReflectionsLibrary</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;com.baeldung.reflection.access.packages.search&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> classes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与我们之前的测试类似，这个测试找到了在给定包中声明的类。</p><p>现在，让我们继续下一个示例。</p><h3 id="_3-3-google-guava库" tabindex="-1"><a class="header-anchor" href="#_3-3-google-guava库"><span>3.3. Google Guava库</span></a></h3><p>在这一部分，我们将看到如何使用Google Guava库查找类。Google Guava提供了一个 <em>ClassPath</em> 工具类，它扫描类加载器的源并找到所有可加载的类和资源。</p><p>首先，让我们将 <em>guava</em> 依赖项添加到我们的项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n      ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.google.guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n      ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n      ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``31.0.1-jre``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们深入代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">findAllClassesUsingGoogleGuice</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ClassPath</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">getAllClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-&gt;</span> clazz<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>clazz <span class="token operator">-&gt;</span> clazz<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们将系统类加载器作为输入提供给 <em>ClassPath#from</em> 方法。所有由 <em>ClassPath</em> 扫描的类都根据包名进行过滤。过滤后的类然后被加载（但未链接或初始化）并收集到一个 <em>Set</em> 中。</p><p>让我们现在测试这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">when_findAllClassesUsingGoogleGuice_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AccessingAllClassesInPackage</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessingAllClassesInPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span>`````` classes <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">findAllClassesUsingGoogleGuice</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;com.baeldung.reflection.access.packages.search&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> classes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，Google Guava库还提供了 <em>getTopLevelClasses()</em> 和 <em>getTopLevelClassesRecursive()</em> 方法。</p><p>重要的是要注意，在所有上述示例中，如果存在 <em>package-info</em> 并在包下注释了一个或多个包级注释，则会将其包含在可用类列表中。</p><p>下一节将讨论如何在模块化应用程序中查找类。</p><h3 id="_4-在模块化应用程序中查找类" tabindex="-1"><a class="header-anchor" href="#_4-在模块化应用程序中查找类"><span>4. 在模块化应用程序中查找类</span></a></h3><p>Java平台模块系统（JPMS）通过模块引入了<strong>新的访问控制级别</strong>。每个包必须显式导出才能被模块外部访问。</p><p>在模块化应用程序中，每个模块可以是命名模块、未命名模块或自动模块。</p><p>对于命名和自动模块，内置系统类加载器将没有类路径。系统类加载器将使用应用程序模块路径搜索类和资源。</p><p>对于未命名模块，它将将类路径设置为当前工作目录。</p><h3 id="_4-1-模块内" tabindex="-1"><a class="header-anchor" href="#_4-1-模块内"><span>4.1. 模块内</span></a></h3><p>模块中的所有包都可以访问模块中的其他包。模块内的代码享有对所有类型及其成员的反射访问权限。</p><h3 id="_4-2-模块外" tabindex="-1"><a class="header-anchor" href="#_4-2-模块外"><span>4.2. 模块外</span></a></h3><p>由于Java执行最严格的访问控制，我们必须显式声明使用 <em>export</em> 或 <em>open</em> 模块声明来获取模块内类的反射访问权限。</p><p>对于普通模块，导出包（但不是开放包）的反射访问仅提供对声明包的 <em>public</em> 和 <em>protected</em> 类型及其所有成员的访问权限。</p><p>我们可以构建一个导出需要搜索的包的模块：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">my<span class="token punctuation">.</span>module</span> <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>access<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于普通模块，开放包的反射访问提供对声明包的所有类型及其成员的访问：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">my<span class="token punctuation">.</span>module</span> <span class="token punctuation">{</span>\n    <span class="token keyword">opens</span> <span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>access<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，开放模块授予对所有类型及其成员的反射访问权限，就好像所有包都已打开一样。让我们现在打开我们的整个模块以进行反射访问：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">open</span> <span class="token keyword">module</span> <span class="token namespace">my<span class="token punctuation">.</span>module</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，在确保为模块提供了适当的模块描述以访问包之后，可以使用上一节中的任何方法来查找包中的所有可用类。</p>',68),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","2024-07-29-Finding All Classes in a Java Package.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Finding%20All%20Classes%20in%20a%20Java%20Package.html","title":"在Java包中查找所有类","lang":"zh-CN","frontmatter":{"date":"2021-05-01T00:00:00.000Z","category":["Java","Reflection"],"tag":["Java","Reflection","Class Loaders","Reflections Library","Google Guava Library"],"head":[["meta",{"name":"keywords","content":"Java, Reflection, Class Loaders, Reflections Library, Google Guava Library"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Finding%20All%20Classes%20in%20a%20Java%20Package.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java包中查找所有类"}],["meta",{"property":"og:description","content":"在Java包中查找所有类 1. 概述 有时，我们希望了解应用程序的运行时行为，例如查找运行时可用的所有类。 在本教程中，我们将探讨几个示例，展示如何在运行时查找Java包中的所有类。 2. 类加载器 首先，我们将从Java类加载器开始讨论。Java类加载器是Java运行时环境（JRE）的一部分，它动态地将Java类加载到Java虚拟机（JVM）中。Ja..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/05/ClassLoaders.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T13:08:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Reflection"}],["meta",{"property":"article:tag","content":"Class Loaders"}],["meta",{"property":"article:tag","content":"Reflections Library"}],["meta",{"property":"article:tag","content":"Google Guava Library"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T13:08:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java包中查找所有类\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/05/ClassLoaders.png\\"],\\"datePublished\\":\\"2021-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T13:08:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java包中查找所有类 1. 概述 有时，我们希望了解应用程序的运行时行为，例如查找运行时可用的所有类。 在本教程中，我们将探讨几个示例，展示如何在运行时查找Java包中的所有类。 2. 类加载器 首先，我们将从Java类加载器开始讨论。Java类加载器是Java运行时环境（JRE）的一部分，它动态地将Java类加载到Java虚拟机（JVM）中。Ja..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 类加载器","slug":"_2-类加载器","link":"#_2-类加载器","children":[{"level":3,"title":"3.1. 系统类加载器","slug":"_3-1-系统类加载器","link":"#_3-1-系统类加载器","children":[]},{"level":3,"title":"3.2. Reflections库","slug":"_3-2-reflections库","link":"#_3-2-reflections库","children":[]},{"level":3,"title":"3.3. Google Guava库","slug":"_3-3-google-guava库","link":"#_3-3-google-guava库","children":[]},{"level":3,"title":"4. 在模块化应用程序中查找类","slug":"_4-在模块化应用程序中查找类","link":"#_4-在模块化应用程序中查找类","children":[]},{"level":3,"title":"4.1. 模块内","slug":"_4-1-模块内","link":"#_4-1-模块内","children":[]},{"level":3,"title":"4.2. 模块外","slug":"_4-2-模块外","link":"#_4-2-模块外","children":[]}]}],"git":{"createdTime":1722258514000,"updatedTime":1722258514000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.98,"words":1795},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Finding All Classes in a Java Package.md","localizedDate":"2021年5月1日","excerpt":"<hr>\\n<h1>在Java包中查找所有类</h1>\\n<h2>1. 概述</h2>\\n<p>有时，我们希望了解应用程序的运行时行为，例如查找运行时可用的所有类。</p>\\n<p>在本教程中，我们将探讨几个示例，展示如何在运行时查找Java包中的所有类。</p>\\n<h2>2. 类加载器</h2>\\n<p>首先，我们将从Java类加载器开始讨论。Java类加载器是Java运行时环境（JRE）的一部分，它动态地将Java类加载到Java虚拟机（JVM）中。Java类加载器将JRE与文件和文件系统解耦。<strong>并非所有类都由单个类加载器加载</strong>。</p>\\n<p>让我们通过图示来理解Java中可用的类加载器：</p>","autoDesc":true}');export{r as comp,d as data};
