import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const p={},e=t(`<h1 id="如何在-kotlin-中将整数表转换为-intarray" tabindex="-1"><a class="header-anchor" href="#如何在-kotlin-中将整数表转换为-intarray"><span>如何在 Kotlin 中将整数表转换为 IntArray</span></a></h1><p>如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。</p><p>在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的 Kotlin 代码。</p><h2 id="_2-使用-for-循环" tabindex="-1"><a class="header-anchor" href="#_2-使用-for-循环"><span>2. 使用 for 循环</span></a></h2><p>第一种方法是程序化方法，我们<strong>使用简单的 for 循环遍历列表中的条目，并将每个条目添加到数组中</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 for 循环将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> list<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-intarray-构造函数" tabindex="-1"><a class="header-anchor" href="#_3-使用-intarray-构造函数"><span>3. 使用 IntArray 构造函数</span></a></h2><p>或者，我们可以使用接受两个参数的 <em>IntArray</em> 构造函数从整数列表中获取整数数组——数组大小和一个 lambda 表达式，该表达式返回数组中每个索引的值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 intArray 构造函数将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上，我们创建了一个与列表大小相同的数组。此外，lambda 表达式将列表中的每个元素复制到 result 数组中。它通过将列表中索引为 i 的元素分配给 result 数组的第 i 索引来实现这一点。</p><h2 id="_4-使用-tointarray-方法" tabindex="-1"><a class="header-anchor" href="#_4-使用-tointarray-方法"><span>4. 使用 toIntArray() 方法</span></a></h2><p>toIntArray() 方法是 Kotlin 中的一个内置函数，我们可以使用它将整数列表转换为整数数组。结果是包含与原始列表相同元素的整数数组：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 toIntArray() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们可以使用 map() 方法将整数列表转换为整数数组。<strong>map() 方法帮助我们迭代列表并创建一个与原始列表具有相同条目的新列表</strong>。最后，我们使用 toIntArray() 方法将这个新列表转换为整数数组：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 map() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-totypedarray-方法" tabindex="-1"><a class="header-anchor" href="#_5-使用-totypedarray-方法"><span>5. 使用 toTypedArray() 方法</span></a></h2><p>有趣的是，我们还有 toTypedArray() 方法。<strong>基本上，我们使用这个方法将列表转换为由编译器推断类型的数组</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 toTypedArray() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toTypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 toTypedArray() 方法将整数列表转换为数组。然后最后我们调用 toIntArray() 方法将得到的 Integer 对象数组转换为原始整数数组。</p><h2 id="_6-使用-stream-方法" tabindex="-1"><a class="header-anchor" href="#_6-使用-stream-方法"><span>6. 使用 stream() 方法</span></a></h2><p>stream() 方法允许我们将列表转换为整数的流：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 stream() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上，我们在流上调用 mapToInt() 方法将每个整数映射到其相应的值。最后，我们使用 toArray() 方法获得整数数组。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们探讨了在 Kotlin 中将整数列表转换为整数数组的各种方法。toIntArray() 方法是实现此目的的最简单和最简洁的方式，而 copyOf()、stream()、带有索引运算符的 for 循环和提供是替代选项。此外，我们为每种方法编写了单元测试以确保正确性。</p><p>如往常一样，示例的源代码可在 GitHub 上找到。好的，翻译已经完成。以下是翻译的完整内容：</p><hr><p>date: 2022-11-01 category:</p><ul><li>Kotlin tag:</li><li>Kotlin</li><li>Programming head:</li><li><ul><li>meta</li><li>name: keywords content: Kotlin, Integer List, IntArray, Convert</li></ul></li></ul><hr><h1 id="如何在-kotlin-中将整数列表转换为-intarray" tabindex="-1"><a class="header-anchor" href="#如何在-kotlin-中将整数列表转换为-intarray"><span>如何在 Kotlin 中将整数列表转换为 IntArray</span></a></h1><p>如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p><h2 id="_1-引言-1" tabindex="-1"><a class="header-anchor" href="#_1-引言-1"><span>1. 引言</span></a></h2><p>有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。</p><p>在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的 Kotlin 代码。</p><h2 id="_2-使用-for-循环-1" tabindex="-1"><a class="header-anchor" href="#_2-使用-for-循环-1"><span>2. 使用 for 循环</span></a></h2><p>第一种方法是程序化方法，我们<strong>使用简单的 for 循环遍历列表中的条目，并将每个条目添加到数组中</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 for 循环将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> list<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-intarray-构造函数-1" tabindex="-1"><a class="header-anchor" href="#_3-使用-intarray-构造函数-1"><span>3. 使用 IntArray 构造函数</span></a></h2><p>或者，我们可以使用接受两个参数的 <em>IntArray</em> 构造函数从整数列表中获取整数数组——数组大小和一个 lambda 表达式，该表达式返回数组中每个索引的值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 intArray 构造函数将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上，我们创建了一个与列表大小相同的数组。此外，lambda 表达式将列表中的每个元素复制到 result 数组中。它通过将列表中索引为 i 的元素分配给 result 数组的第 i 索引来实现这一点。</p><h2 id="_4-使用-tointarray-方法-1" tabindex="-1"><a class="header-anchor" href="#_4-使用-tointarray-方法-1"><span>4. 使用 toIntArray() 方法</span></a></h2><p>toIntArray() 方法是 Kotlin 中的一个内置函数，我们可以使用它将整数列表转换为整数数组。结果是包含与原始列表相同元素的整数数组：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 toIntArray() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们可以使用 map() 方法将整数列表转换为整数数组。<strong>map() 方法帮助我们迭代列表并创建一个与原始列表具有相同条目的新列表</strong>。最后，我们使用 toIntArray() 方法将这个新列表转换为整数数组：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 map() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-totypedarray-方法-1" tabindex="-1"><a class="header-anchor" href="#_5-使用-totypedarray-方法-1"><span>5. 使用 toTypedArray() 方法</span></a></h2><p>有趣的是，我们还有 toTypedArray() 方法。<strong>基本上，我们使用这个方法将列表转换为由编译器推断类型的数组</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 toTypedArray() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toTypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 toTypedArray() 方法将整数列表转换为数组。然后最后我们调用 toIntArray() 方法将得到的 Integer 对象数组转换为原始整数数组。</p><h2 id="_6-使用-stream-方法-1" tabindex="-1"><a class="header-anchor" href="#_6-使用-stream-方法-1"><span>6. 使用 stream() 方法</span></a></h2><p>stream() 方法允许我们将列表转换为整数的流：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用 stream() 方法将整数列表转换为整数数组\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上，我们在流上调用 mapToInt() 方法将每个整数映射到其相应的值。最后，我们使用 toArray() 方法获得整数数组。</p><h2 id="_7-结论-1" tabindex="-1"><a class="header-anchor" href="#_7-结论-1"><span>7. 结论</span></a></h2><p>在本文中，我们探讨了在 Kotlin 中将整数列表转换为整数数组的各种方法。toIntArray() 方法是实现此目的的最简单和最简洁的方式，而 copyOf()、stream()、带有索引运算符的 for 循环和提供是替代选项。此外，我们为每种方法编写了单元测试以确保正确性。</p><p>如往常一样，示例的源代码可在 GitHub 上找到。</p><p>OK</p>`,61),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-28-How to Convert Integer List to IntArray in Kotlin.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Convert%20Integer%20List%20to%20IntArray%20in%20Kotlin.html","title":"如何在 Kotlin 中将整数表转换为 IntArray","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin"],"tag":["Kotlin","Programming"],"head":[["meta",{"name":"keywords","content":"Kotlin, Integer List, IntArray, Convert"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Convert%20Integer%20List%20to%20IntArray%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在 Kotlin 中将整数表转换为 IntArray"}],["meta",{"property":"og:description","content":"如何在 Kotlin 中将整数表转换为 IntArray 如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的贡献指南。 1. 引言 有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。 在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T09:01:10.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"Programming"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T09:01:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在 Kotlin 中将整数表转换为 IntArray\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T09:01:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在 Kotlin 中将整数表转换为 IntArray 如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的贡献指南。 1. 引言 有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。 在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 使用 for 循环","slug":"_2-使用-for-循环","link":"#_2-使用-for-循环","children":[]},{"level":2,"title":"3. 使用 IntArray 构造函数","slug":"_3-使用-intarray-构造函数","link":"#_3-使用-intarray-构造函数","children":[]},{"level":2,"title":"4. 使用 toIntArray() 方法","slug":"_4-使用-tointarray-方法","link":"#_4-使用-tointarray-方法","children":[]},{"level":2,"title":"5. 使用 toTypedArray() 方法","slug":"_5-使用-totypedarray-方法","link":"#_5-使用-totypedarray-方法","children":[]},{"level":2,"title":"6. 使用 stream() 方法","slug":"_6-使用-stream-方法","link":"#_6-使用-stream-方法","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]},{"level":2,"title":"1. 引言","slug":"_1-引言-1","link":"#_1-引言-1","children":[]},{"level":2,"title":"2. 使用 for 循环","slug":"_2-使用-for-循环-1","link":"#_2-使用-for-循环-1","children":[]},{"level":2,"title":"3. 使用 IntArray 构造函数","slug":"_3-使用-intarray-构造函数-1","link":"#_3-使用-intarray-构造函数-1","children":[]},{"level":2,"title":"4. 使用 toIntArray() 方法","slug":"_4-使用-tointarray-方法-1","link":"#_4-使用-tointarray-方法-1","children":[]},{"level":2,"title":"5. 使用 toTypedArray() 方法","slug":"_5-使用-totypedarray-方法-1","link":"#_5-使用-totypedarray-方法-1","children":[]},{"level":2,"title":"6. 使用 stream() 方法","slug":"_6-使用-stream-方法-1","link":"#_6-使用-stream-方法-1","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论-1","link":"#_7-结论-1","children":[]}],"git":{"createdTime":1722157270000,"updatedTime":1722157270000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.89,"words":2066},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-How to Convert Integer List to IntArray in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>\\n<h2>1. 引言</h2>\\n<p>有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。</p>\\n<p>在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的 Kotlin 代码。</p>\\n<h2>2. 使用 for 循环</h2>\\n<p>第一种方法是程序化方法，我们<strong>使用简单的 for 循环遍历列表中的条目，并将每个条目添加到数组中</strong>：</p>","autoDesc":true}');export{k as comp,d as data};
