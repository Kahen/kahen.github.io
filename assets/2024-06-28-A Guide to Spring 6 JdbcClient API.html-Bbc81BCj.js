import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Bx_7oN2A.js";const e={},p=t('<hr><h1 id="spring-6中的jdbcclient-api指南" tabindex="-1"><a class="header-anchor" href="#spring-6中的jdbcclient-api指南"><span>Spring 6中的JdbcClient API指南</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将学习Spring Framework 6.1中最新添加的_JdbcClient_接口。它提供了一个流畅的接口，为_JdbcTemplate_和_NamedParameterJdbcTemplate_提供了统一的门面，这意味着现在它支持链式操作。<strong>我们现在可以用流畅的API风格定义查询，设置参数，并执行数据库操作</strong>。</p><p>这个特性简化了JDBC操作，使它们更易于阅读和理解。然而，我们必须回退到旧的_JdbcTemplate_和_NamedParameterJdbcTemplate_类来进行JDBC批量操作和存储过程调用。</p><p>在本文中，我们将使用H2数据库来展示_JdbcClient_的能力。</p><h2 id="_2-先决条件数据库设置" tabindex="-1"><a class="header-anchor" href="#_2-先决条件数据库设置"><span>2. 先决条件数据库设置</span></a></h2><p>让我们从查看我们将在探索_JdbcClient_时引用的_student_表开始：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>\n    student_id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>\n    student_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    age <span class="token keyword">INT</span><span class="token punctuation">,</span>\n    grade <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    gender <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    state <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 学生 1</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;John Smith&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Male&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;California&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 学生 2</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Emily Johnson&#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Female&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 更多插入语句...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述SQL脚本创建了_student_表并插入了记录。</p><h2 id="_3-创建-jdbcclient" tabindex="-1"><a class="header-anchor" href="#_3-创建-jdbcclient"><span>3. 创建_JdbcClient_</span></a></h2><p>Spring Boot框架在_application.properties_中自动发现数据库连接属性，并在应用程序启动时创建_JdbcClient_ bean。之后，<em>JdbcClient</em> bean可以在任何类中自动装配。</p><p>以下是一个示例，我们在_StudentDao_类中注入了_JdbcClient_ bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">class</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">JdbcClient</span> jdbcClient<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在本文中使用_StudentDao_来定义我们的方法，以理解_JdbcClient_接口。</p><p>然而，<strong>接口中也有静态方法如_create(DataSource dataSource)_, <em>create(JdbcOperations jdbcTemplate)</em>, 和 <em>create(NamedParameterJdbcOperations jdbcTemplate)</em>，这些方法可以创建_JdbcClient_的实例</strong>。</p><h2 id="_4-使用-jdbcclient-执行数据库查询" tabindex="-1"><a class="header-anchor" href="#_4-使用-jdbcclient-执行数据库查询"><span>4. 使用_JdbcClient_执行数据库查询</span></a></h2><p>正如前面提到的，_JdbcClient_是_JdbcTemplate_和_NamedParameterJdbcTemplate_的统一门面。因此，我们将看到它如何同时支持它们。</p><h3 id="_4-1-隐式支持位置参数" tabindex="-1"><a class="header-anchor" href="#_4-1-隐式支持位置参数"><span>4.1. 隐式支持位置参数</span></a></h3><p>在这一部分，我们将讨论使用占位符_?_绑定SQL语句参数的位置参数的支持。基本上，我们将看到它如何支持_JdbcTemplate_的特性。</p><p>让我们看看下面_StudentDao_类中的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">getStudentsOfGradeStateAndGenderWithPositionalParams</span><span class="token punctuation">(</span><span class="token keyword">int</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n            <span class="token operator">+</span> <span class="token string">&quot; where grade = ? and state = ? and gender = ?&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，参数_grade_、_state_和_gender_是隐式注册的，它们被分配到方法_param()_的顺序。最后，当调用方法_query()_时，语句被执行，结果通过_RowMapper_帮助检索，就像在_JdbcTemplate_中一样。</p><p>方法_query()_还支持_ResultSetExtractor_和_RowCallbackHandler_参数。我们将在接下来的部分看到相关示例。</p><p>有趣的是，直到调用方法_list()<em>之前，都不会检索结果。**还有其它终端操作也得到支持，如_optional()</em>, <em>set()</em>, <em>single()</em>, 和 <em>stream()</em>**</p><p>现在，让我们看看它是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithPositionalParams_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` students <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeStateAndGenderWithPositionalParams</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看如何使用Varargs来完成同样的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> <span class="token function">getStudentsOfGradeStateAndGenderWithParamsInVarargs</span><span class="token punctuation">(</span><span class="token keyword">int</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot; where grade = ? and state = ? and gender = ? limit 1&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span>grade<span class="token punctuation">,</span> state<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在上面看到的，我们已经用_params()<em>替换了_param()</em>，它接受Varargs参数。我们还使用了_single()_方法来检索仅有的一条记录。</p><p>让我们看看它是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithParamsInVarargs_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeStateAndGenderWithParamsInVarargs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步地，<strong>方法_params()_也有一个重载版本，它接受一个_List_参数</strong>。让我们看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">getStudentsOfGradeStateAndGenderWithParamsInList</span><span class="token punctuation">(</span><span class="token class-name">List</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot; where grade = ? and state = ? and gender = ? limit 1&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>除了_params(List<code>&lt;?&gt;</code> values)_, 我们还看到了_optional()_方法，它返回了_Optional<code>&lt;Student&gt;</code>_对象</strong>。这是上述方法的实际操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithParamsInList_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span> params <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Optional</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` optional <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeStateAndGenderWithParamsInList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-显式支持索引位置参数" tabindex="-1"><a class="header-anchor" href="#_4-2-显式支持索引位置参数"><span>4.2. 显式支持索引位置参数</span></a></h3><p><strong>如果我们需要设置SQL语句参数的位置呢？为此我们将使用方法</strong> <em>param(int jdbcIndex, Object value)</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">getStudentsOfGradeStateAndGenderWithParamIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot; where grade = ? and state = ? and gender = ?&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> grade<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentResultExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在方法中，参数的位置索引被显式指定。此外，我们还使用了_query(ResultSetExtractor rse)_方法。</p><p>让我们看看这个是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithParamsIndex_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` students <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeStateAndGenderWithParamIndex</span><span class="token punctuation">(</span>\n      <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-支持名称-值对的命名参数" tabindex="-1"><a class="header-anchor" href="#_4-3-支持名称-值对的命名参数"><span>4.3. 支持名称-值对的命名参数</span></a></h3><p><em>JdbcClient_还支持使用占位符</em>:_ _×_绑定命名SQL语句参数，这是_NamedParameterJdbcTemplate_的一个特性。</p><p><strong>_param()_方法也可以接受作为键值对的参数</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">getCountOfStudentsOfGradeStateAndGenderWithNamedParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot; where grade = :grade and state = :state and gender = :gender&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">RowCountCallbackHandler</span> countCallbackHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowCountCallbackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;grade&quot;</span><span class="token punctuation">,</span> grade<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>countCallbackHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> countCallbackHandler<span class="token punctuation">.</span><span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们使用了命名参数。此外，我们还使用了_query(RowCallbackHandler rch)_。让我们看看它是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithNamedParam_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> count <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getCountOfStudentsOfGradeStateAndGenderWithNamedParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-支持使用-map-的命名参数" tabindex="-1"><a class="header-anchor" href="#_4-4-支持使用-map-的命名参数"><span>4.4. 支持使用_Map_的命名参数</span></a></h3><p>有趣的是，**我们也可以在_params(Map<code>&lt;String,?&gt;</code> 继续翻译</p><p>paramMap)_方法中以映射的形式传递参数名-值对：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">getStudentsOfGradeStateAndGenderWithParamMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` paramMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, grade, gender, state from student&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot; where grade = :grade and state = :state and gender = :gender&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续看它是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenQueryWithParamMap_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` paramMap <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;grade&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;state&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` students <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeStateAndGenderWithParamMap</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-jdbcclient-执行数据库操作" tabindex="-1"><a class="header-anchor" href="#_5-使用-jdbcclient-执行数据库操作"><span>5. 使用_JdbcClient_执行数据库操作</span></a></h2><p>就像查询一样，_JdbcClient_也支持创建、更新和删除记录等数据库操作。与前面的部分类似，我们也可以通过_param()_和_params()_方法的各种重载版本来绑定参数。因此，我们不会重复它们。</p><p>然而，<strong>在执行SQL语句而不是调用_query()_方法时，我们将调用_update()_方法</strong>。</p><p>这里有一个将记录插入到_student_表中的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> <span class="token function">insertWithSetParamWithNamedParamAndSqlType</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO student (student_name, age, grade, gender, state)&quot;</span>\n      <span class="token operator">+</span> <span class="token string">&quot;VALUES (:name, :age, :grade, :gender, :state)&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">Integer</span> noOfrowsAffected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcClient<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;grade&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> noOfrowsAffected<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法使用_param(String name, Object value, int sqlType)_来绑定参数。它还有一个额外的_sqlType_参数来指定参数的数据类型。此外，_update()_方法返回受影响的行数。</p><p>让我们看看这个方法是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJdbcClient_whenInsertWithNamedParamAndSqlType_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token function">getSampleStudent</span><span class="token punctuation">(</span><span class="token string">&quot;Johny Dep&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> studentDao<span class="token punctuation">.</span><span class="token function">insertWithSetParamWithNamedParamAndSqlType</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，_getSampleStudent()_返回一个_student_对象。然后，<em>student_对象被传递给方法_insertWithSetParamWithNamedParamAndSqlType()</em>，在_student_表中创建一个新的记录。</p><p><strong>与_JdbcTemplate_类似，_JdbcClient_也有_update(KeyHolder generatedKeyHolder)_方法来检索在执行_insert_语句时创建的自动生成的键</strong>。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们学习了在Spring Framework 6.1中引入的新接口_JdbcClient_。我们看到了这个接口如何执行以前由_JdbcTemplate_和_NamedParameterJdbcTemplate_执行的所有操作。此外，由于流畅的API风格，代码也变得更容易阅读和理解。</p><p>如常，本文中使用的代码可以在GitHub上找到。</p><p>[文章结束]</p><p>OK</p>',69),c=[p];function o(l,i){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","2024-06-28-A Guide to Spring 6 JdbcClient API.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20Spring%206%20JdbcClient%20API.html","title":"Spring 6中的JdbcClient API指南","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","category":["Spring Framework","JDBC"],"tag":["Spring 6","JdbcClient API"],"head":[["meta",{"name":"keywords","content":"Spring 6, JdbcClient, JDBC API, Spring Framework"}],["meta",{"name":"description","content":"介绍Spring Framework 6.1中新引入的JdbcClient接口及其用法。"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20Spring%206%20JdbcClient%20API.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring 6中的JdbcClient API指南"}],["meta",{"property":"og:description","content":"Spring 6中的JdbcClient API指南 1. 概述 在本教程中，我们将学习Spring Framework 6.1中最新添加的_JdbcClient_接口。它提供了一个流畅的接口，为_JdbcTemplate_和_NamedParameterJdbcTemplate_提供了统一的门面，这意味着现在它支持链式操作。我们现在可以用流畅的API..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-28T10:53:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring 6"}],["meta",{"property":"article:tag","content":"JdbcClient API"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-28T10:53:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 6中的JdbcClient API指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-28T10:53:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring 6中的JdbcClient API指南 1. 概述 在本教程中，我们将学习Spring Framework 6.1中最新添加的_JdbcClient_接口。它提供了一个流畅的接口，为_JdbcTemplate_和_NamedParameterJdbcTemplate_提供了统一的门面，这意味着现在它支持链式操作。我们现在可以用流畅的API..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 先决条件数据库设置","slug":"_2-先决条件数据库设置","link":"#_2-先决条件数据库设置","children":[]},{"level":2,"title":"3. 创建_JdbcClient_","slug":"_3-创建-jdbcclient","link":"#_3-创建-jdbcclient","children":[]},{"level":2,"title":"4. 使用_JdbcClient_执行数据库查询","slug":"_4-使用-jdbcclient-执行数据库查询","link":"#_4-使用-jdbcclient-执行数据库查询","children":[{"level":3,"title":"4.1. 隐式支持位置参数","slug":"_4-1-隐式支持位置参数","link":"#_4-1-隐式支持位置参数","children":[]},{"level":3,"title":"4.2. 显式支持索引位置参数","slug":"_4-2-显式支持索引位置参数","link":"#_4-2-显式支持索引位置参数","children":[]},{"level":3,"title":"4.3. 支持名称-值对的命名参数","slug":"_4-3-支持名称-值对的命名参数","link":"#_4-3-支持名称-值对的命名参数","children":[]},{"level":3,"title":"4.4. 支持使用_Map_的命名参数","slug":"_4-4-支持使用-map-的命名参数","link":"#_4-4-支持使用-map-的命名参数","children":[]}]},{"level":2,"title":"5. 使用_JdbcClient_执行数据库操作","slug":"_5-使用-jdbcclient-执行数据库操作","link":"#_5-使用-jdbcclient-执行数据库操作","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719572014000,"updatedTime":1719572014000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.3,"words":1890},"filePathRelative":"posts/baeldung/2024-06-28/2024-06-28-A Guide to Spring 6 JdbcClient API.md","localizedDate":"2024年6月28日","excerpt":"<hr>\\n<h1>Spring 6中的JdbcClient API指南</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将学习Spring Framework 6.1中最新添加的_JdbcClient_接口。它提供了一个流畅的接口，为_JdbcTemplate_和_NamedParameterJdbcTemplate_提供了统一的门面，这意味着现在它支持链式操作。<strong>我们现在可以用流畅的API风格定义查询，设置参数，并执行数据库操作</strong>。</p>\\n<p>这个特性简化了JDBC操作，使它们更易于阅读和理解。然而，我们必须回退到旧的_JdbcTemplate_和_NamedParameterJdbcTemplate_类来进行JDBC批量操作和存储过程调用。</p>","autoDesc":true}');export{r as comp,k as data};
