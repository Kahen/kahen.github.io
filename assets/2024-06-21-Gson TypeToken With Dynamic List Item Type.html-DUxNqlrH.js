import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const p={},e=t('<h1 id="gson-使用-typetoken-处理动态列表项类型" tabindex="-1"><a class="header-anchor" href="#gson-使用-typetoken-处理动态列表项类型"><span>Gson 使用 TypeToken 处理动态列表项类型</span></a></h1><p>在本教程中，我们将讨论如何将 JSON 数组转换为等价的 java.util.List 对象。Gson 是 Google 提供的一个 Java 库，它帮助将 JSON 字符串转换为 Java 对象，反之亦然。</p><p>这个库中的 Gson 类有一个 fromJson() 方法，它接受两个参数，第一个参数是 JSON 字符串，第二个参数是 java.lang.reflect.Type 类型。该方法将 JSON 字符串转换为由其第二个参数表示类型的等价 Java 对象。</p><p>我们将创建一个通用方法，比如 convertJsonArrayToListOfAnyType(String jsonArray, T elementType)，它可以将 JSON 数组转换为 List<code>&lt;T&gt;</code>，其中 T 是 List 中元素的类型。</p><p>让我们更深入地了解这一点。</p><p>假设我们有两个 JSON 数组，一个用于 Student，一个用于 School：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>final String jsonArrayOfStudents =\n    <span class="token string">&quot;[&quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;John\\&quot;, \\&quot;grade\\&quot;:\\&quot;1\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Tom\\&quot;, \\&quot;grade\\&quot;:\\&quot;2\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Ram\\&quot;, \\&quot;grade\\&quot;:\\&quot;3\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Sara\\&quot;, \\&quot;grade\\&quot;:\\&quot;1\\&quot;}&quot;</span>\n  + <span class="token string">&quot;]&quot;</span>;\nfinal String jsonArrayOfSchools =\n    <span class="token string">&quot;[&quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;St. John\\&quot;, \\&quot;city\\&quot;:\\&quot;Chicago City\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;St. Tom\\&quot;, \\&quot;city\\&quot;:\\&quot;New York City\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;St. Ram\\&quot;, \\&quot;city\\&quot;:\\&quot;Mumbai\\&quot;}, &quot;</span>\n    + <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;St. Sara\\&quot;, \\&quot;city\\&quot;:\\&quot;Budapest\\&quot;}&quot;</span>\n  + <span class="token string">&quot;]&quot;</span>;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，我们可以使用 Gson 类将数组转换为 List 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingTypeToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TypeToken</span>``<span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>`````````````<span class="token operator">&gt;</span> typeTokenForListOfStudents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span>``<span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>`````````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">TypeToken</span>``<span class="token operator">&lt;</span><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> typeTokenForListOfSchools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span>``<span class="token operator">&lt;</span><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> typeTokenForListOfStudents<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>````````` schoolLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfSchools<span class="token punctuation">,</span> typeTokenForListOfSchools<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertAll</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> schoolLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为 List<code>&lt;Student&gt;</code> 和 List<code>&lt;School&gt;</code> 创建了 TypeToken 对象。最后，使用 TypeToken 对象，我们得到了 Type 对象，然后将 JSON 数组转换为 List<code>&lt;Student&gt;</code> 和 List<code>&lt;School&gt;</code>。</p><p>为了促进重用，让我们尝试创建一个通用类，其中包含一个方法，该方法可以接收 List 中的元素类型，并返回 Type 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ListWithDynamicTypeElement</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` <span class="token punctuation">{</span>\n    <span class="token class-name">Type</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````````<span class="token operator">&gt;</span> typeToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> typeToken<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为给定的元素类型 T 实例化了一个泛型 TypeToken&lt;List<code>&lt;T&gt;</code>&gt;。然后我们返回相应的 Type 对象。列表元素类型只在运行时可用。</p><p>让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingTypeTokenFails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ListWithDynamicTypeElement</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span>studentsLst<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ClassCastException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然该方法可以编译，但在运行时失败，并在尝试迭代 studentLst 时引发 ClassCastException。此外，我们看到列表中的元素不是 Student 类型。</p><p>在 Gson 2.10 版本中，TypeToken 类引入了 getParamterized() 方法。这使得开发人员能够处理列表元素的类型信息在编译期间不可用的情况。</p><p>让我们看看这个新方法如何帮助返回参数化类的 Type 信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Type</span> <span class="token function">getGenericTypeForListFromTypeTokenUsingGetParameterized</span><span class="token punctuation">(</span><span class="token class-name">Class</span> elementClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">TypeToken</span><span class="token punctuation">.</span><span class="token function">getParameterized</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> elementClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在运行时调用 getParamterized() 方法时，它将返回实际的 List 对象类型及其元素类型。这将进一步帮助 Gson 类将 JSON 数组转换为具有正确元素类型信息的确切 List 对象。</p><p>让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingGetParameterized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> <span class="token function">getGenericTypeForListFromTypeTokenUsingGetParameterized</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>````````` schoolLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfSchools<span class="token punctuation">,</span> <span class="token function">getGenericTypeForListFromTypeTokenUsingGetParameterized</span><span class="token punctuation">(</span><span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertAll</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> schoolLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用了 getGenericTypeForListFromTypeTokenUsingGetParameterized() 方法来获取 List<code>&lt;Student&gt;</code> 和 List<code>&lt;School&gt;</code> 的 Type 信息。最后，使用 fromJson() 方法成功地将 JSON 数组转换为它们各自的 Java List 对象。</p><p>Gson 库有一个 JsonArray 类来表示 JSON 数组。我们将使用它将 JSON 数组转换为 List 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">createListFromJsonArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonArray<span class="token punctuation">,</span> <span class="token class-name">Type</span> elementType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JsonArray</span> array <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token class-name">JsonArray</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">JsonElement</span> element <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">T</span> item <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> elementType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们使用 Gson 类中的常规 fromJson() 方法将 JSON 数组字符串转换为 JsonArray 对象。然后，我们将 JsonArray 对象中的每个 JsonElement 元素转换为目标 Type，该 Type 由 createListFromJsonArray() 方法的第二个参数 elementType 定义。</p><p>这些转换后的元素被放入 List 中，然后在最后返回。</p><p>现在，让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> <span class="token function">createListFromJsonArray</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>````````` schoolLst <span class="token operator">=</span> <span class="token function">createListFromJsonArray</span><span class="token punctuation">(</span>jsonArrayOfSchools<span class="token punctuation">,</span> <span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertAll</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> schoolLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 createListFromJsonArray() 方法成功地将学生和学校的 JSON 数组转换为 List<code>&lt;Student&gt;</code> 和 List<code>&lt;School&gt;</code>。</p><p>与 Gson 库中的 TypeToken 类类似，Guava 中的 TypeToken 类也使开发人员能够在运行时捕获泛型类型。否则，由于 Java 中的类型擦除，这是不可能的。</p><p>让我们看看使用 Guava TypeToken 类的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` <span class="token class-name">Type</span> <span class="token function">getTypeForListUsingTypeTokenFromGuava</span><span class="token punctuation">(</span><span class="token class-name">Class</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>````````` type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>TypeToken</span><span class="token operator">&lt;</span><span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeParameter</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where() 方法通过将类型参数替换为变量 type 中的类来返回 TypeToken 对象。</p><p>最后，我们可以看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingTypeTokenFromGuava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> <span class="token function">getTypeForListUsingTypeTokenFromGuava</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>````````` schoolLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfSchools<span class="token punctuation">,</span> <span class="token function">getTypeForListUsingTypeTokenFromGuava</span><span class="token punctuation">(</span><span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertAll</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> schoolLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再次使用 fromJson() 方法将 JSON 数组转换为各自的 List 对象。然而，我们是通过 getTypeForListUsingTypeTokenFromGuava() 方法中的 Guava 库来获取 Type 对象的。</p><p><em>ParameterizedType</em> 是 Java 反射 API 的一部分，它是一个接口，帮助表示参数化类型，如 Collection<code>&lt;String&gt;</code>。</p><p>让我们实现 ParameterizedType 来表示任何具有参数化类型的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterizedTypeImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ParameterizedType</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>``` rawType<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">ParameterizedTypeImpl</span><span class="token punctuation">(</span><span class="token class-name">Class</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>``` rawType<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>rawType <span class="token operator">=</span> rawType<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>actualTypeArguments <span class="token operator">=</span> actualTypeArguments<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ParameterizedType</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">Class</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>``` rawType<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeImpl</span><span class="token punctuation">(</span>rawType<span class="token punctuation">,</span> actualTypeArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> actualTypeArguments<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n   <span class="token class-name">Type</span> <span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> rawType<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Type</span> <span class="token function">getOwnerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>actualTypeArguments 变量将存储泛型类中类型参数的类信息，而 rawType 表示泛型类本身。make() 方法返回参数化类的 Type 对象。</p><p>最后，让我们看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonArray_whenListElementTypeDynamic_thenConvertToJavaListUsingParameterizedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>``````````` studentsLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfStudents<span class="token punctuation">,</span> <span class="token class-name">ParameterizedTypeImpl</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">School</span><span class="token punctuation">&gt;</span></span>````````` schoolLst <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonArrayOfSchools<span class="token punctuation">,</span> <span class="token class-name">ParameterizedTypeImpl</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertAll</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> studentsLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> schoolLst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 make() 方法获取了参数化 List 类的 Type 信息，并成功地将 JSON 数组转换为它们各自的 List 对象形式。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们讨论了在运行时获取 List<code>&lt;T&gt;</code> 对象的 Type 信息的四种不同方法。最后，我们使用 Gson 库中的 fromJson() 方法使用 Type 对象将 JSON 数组转换为 List 对象。</p><p>由于最终调用的都是 fromJson() 方法，所有这些方法的性能非常接近。然而，TypeToken.getParamterized() 方法是最简洁的，因此我们推荐使用它。</p><p>如常，使用的代码可以在 GitHub 上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\nOK</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',49),o=[e];function c(l,u){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-21-Gson TypeToken With Dynamic List Item Type.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-21/2024-06-21-Gson%20TypeToken%20With%20Dynamic%20List%20Item%20Type.html","title":"Gson 使用 TypeToken 处理动态列表项类型","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Java","Gson"],"tag":["JSON","Java List","TypeToken"],"head":[["meta",{"name":"keywords","content":"Java, Gson, JSON, TypeToken, 动态类型转换"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-21/2024-06-21-Gson%20TypeToken%20With%20Dynamic%20List%20Item%20Type.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Gson 使用 TypeToken 处理动态列表项类型"}],["meta",{"property":"og:description","content":"Gson 使用 TypeToken 处理动态列表项类型 在本教程中，我们将讨论如何将 JSON 数组转换为等价的 java.util.List 对象。Gson 是 Google 提供的一个 Java 库，它帮助将 JSON 字符串转换为 Java 对象，反之亦然。 这个库中的 Gson 类有一个 fromJson() 方法，它接受两个参数，第一个参数是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T17:50:10.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"Java List"}],["meta",{"property":"article:tag","content":"TypeToken"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T17:50:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gson 使用 TypeToken 处理动态列表项类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T17:50:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Gson 使用 TypeToken 处理动态列表项类型 在本教程中，我们将讨论如何将 JSON 数组转换为等价的 java.util.List 对象。Gson 是 Google 提供的一个 Java 库，它帮助将 JSON 字符串转换为 Java 对象，反之亦然。 这个库中的 Gson 类有一个 fromJson() 方法，它接受两个参数，第一个参数是..."},"headers":[{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718992210000,"updatedTime":1718992210000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.31,"words":1593},"filePathRelative":"posts/baeldung/2024-06-21/2024-06-21-Gson TypeToken With Dynamic List Item Type.md","localizedDate":"2024年6月22日","excerpt":"\\n<p>在本教程中，我们将讨论如何将 JSON 数组转换为等价的 java.util.List 对象。Gson 是 Google 提供的一个 Java 库，它帮助将 JSON 字符串转换为 Java 对象，反之亦然。</p>\\n<p>这个库中的 Gson 类有一个 fromJson() 方法，它接受两个参数，第一个参数是 JSON 字符串，第二个参数是 java.lang.reflect.Type 类型。该方法将 JSON 字符串转换为由其第二个参数表示类型的等价 Java 对象。</p>\\n<p>我们将创建一个通用方法，比如 convertJsonArrayToListOfAnyType(String jsonArray, T elementType)，它可以将 JSON 数组转换为 List<code>&lt;T&gt;</code>，其中 T 是 List 中元素的类型。</p>","autoDesc":true}');export{r as comp,d as data};
