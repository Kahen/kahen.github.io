import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BTwZI-W8.js";const e={},p=t('<h1 id="使用spring-5-webclient限制每秒请求数量" tabindex="-1"><a class="header-anchor" href="#使用spring-5-webclient限制每秒请求数量"><span>使用Spring 5 WebClient限制每秒请求数量</span></a></h1><p>在本教程中，我们将看到使用Spring 5 WebClient限制每秒请求数量的不同方法。</p><p>尽管我们通常希望利用其非阻塞特性，但某些场景可能迫使我们添加延迟。我们将学习在使用一些Project Reactor特性来控制对服务器的请求流时遇到的一些这些场景。</p><h3 id="_2-1-编写一个简单的web服务" tabindex="-1"><a class="header-anchor" href="#_2-1-编写一个简单的web服务"><span>2.1. 编写一个简单的Web服务</span></a></h3><p>要探索这个场景，我们将从一个简单的@RestController开始，它提供来自固定范围的随机数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/random&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@GetMapping</span>\n    <span class="token class-name">Integer</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将模拟一个昂贵的操作并限制并发请求的数量。</p><h3 id="_2-2-对我们的服务器进行速率限制" tabindex="-1"><a class="header-anchor" href="#_2-2-对我们的服务器进行速率限制"><span>2.2. 对我们的服务器进行速率限制</span></a></h3><p>在查看解决方案之前，让我们将服务更改为模拟一个更现实的场景。</p><p>首先，我们将限制服务器可以接收的并发请求数量，并在达到限制时抛出异常。</p><p>其次，我们将添加一个延迟来处理我们的响应，模拟一个昂贵的操作。虽然有更强大的解决方案可用，但我们将仅出于说明目的这样做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Concurrency</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_CONCURRENT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">CONCURRENT_REQUESTS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">protect</span><span class="token punctuation">(</span><span class="token class-name">IntSupplier</span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CONCURRENT_REQUESTS</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token constant">MAX_CONCURRENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;max concurrent requests reached&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token constant">CONCURRENT_REQUESTS</span><span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们更改我们的端点以使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span>\n<span class="token class-name">Integer</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Concurrency</span><span class="token punctuation">.</span><span class="token function">protect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们的端点在超过_MAX_CONCURRENT_请求时拒绝处理请求，并向客户端返回错误。</p><h3 id="_2-3-编写一个简单的客户端" tabindex="-1"><a class="header-anchor" href="#_2-3-编写一个简单的客户端"><span>2.3. 编写一个简单的客户端</span></a></h3><p>所有示例都将遵循这种模式来生成_n_个请求的_Flux_，并对我们的服务进行_GET_请求：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// GET request</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了减少样板代码，让我们在所有示例中都可以重用的方法中实现请求部分。我们将接收一个_WebClient_，调用_get()_，并使用_generics_和_ParameterizedTypeReference_检索响应体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RandomConsumer</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">static</span> ```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``` <span class="token class-name">Mono</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">WebClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们准备好看一些方法了。</p><h2 id="_3-使用-zipwith-flux-interval-进行延迟" tabindex="-1"><a class="header-anchor" href="#_3-使用-zipwith-flux-interval-进行延迟"><span>3. 使用_zipWith(Flux.interval())_进行延迟</span></a></h2><p>我们的第一个示例使用_zipWith()_将我们的请求与固定延迟结合起来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipWithInterval</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flux</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">fetch</span><span class="token punctuation">(</span>\n      <span class="token class-name">WebClient</span> client<span class="token punctuation">,</span> <span class="token keyword">int</span> requests<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> requests<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">RandomConsumer</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，这将每个请求延迟_delay_毫秒。我们应该注意，这个延迟是在发送请求之前应用的。</p><h2 id="_4-使用-flux-delayelements-进行延迟" tabindex="-1"><a class="header-anchor" href="#_4-使用-flux-delayelements-进行延迟"><span>4. 使用_Flux.delayElements()_进行延迟</span></a></h2><p>_Flux_有一个更直接的方式来延迟其元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayElements</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flux</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">fetch</span><span class="token punctuation">(</span>\n      <span class="token class-name">WebClient</span> client<span class="token punctuation">,</span> <span class="token keyword">int</span> requests<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> requests<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">RandomConsumer</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用_delayElements()_，延迟直接应用于_Subscriber.onNext()_信号。换句话说，它延迟了来自_Flux.range()_的每个元素。因此，传递给_flatMap()<em>的函数将受到影响，开始时间会更长。例如，如果_delay_值是_1000</em>，我们的请求将在开始前延迟一秒钟。</p><h3 id="_4-1-调整我们的解决方案" tabindex="-1"><a class="header-anchor" href="#_4-1-调整我们的解决方案"><span>4.1. 调整我们的解决方案</span></a></h3><p>因此，如果我们没有提供足够长的延迟，我们将得到一个错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenSmallDelay_whenDelayElements_thenExceptionThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> delay <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> requests <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">InternalServerError</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token class-name">DelayElements</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> requests<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">blockLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那是因为我们每个请求等待100毫秒，但每个请求在服务器端需要两秒钟才能完成。所以很快我们的并发请求限制就达到了，我们得到了一个_500_错误。</p><p>如果我们添加足够的延迟，我们可以避免请求限制。但然后，我们将面临另一个问题——我们将等待比必要的时间更长。</p><p>根据我们的用例，等待太久可能会显著影响性能。接下来，让我们检查一种更合适的方法来处理这个问题，因为我们已经知道服务器的限制。</p><h2 id="_5-使用-flatmap-进行并发控制" tabindex="-1"><a class="header-anchor" href="#_5-使用-flatmap-进行并发控制"><span>5. 使用_flatMap()_进行并发控制</span></a></h2><p>鉴于我们服务的限制，我们最好的选择是并行发送最多_Concurrency.MAX_CONCURRENT_个请求。为此，我们可以为_flatMap()_添加一个额外的参数，用于最大并行处理数量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LimitConcurrency</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flux</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">fetch</span><span class="token punctuation">(</span>\n      <span class="token class-name">WebClient</span> client<span class="token punctuation">,</span> <span class="token keyword">int</span> requests<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrency<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> requests<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">RandomConsumer</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">,</span> concurrency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此参数确保最大并发请求数量不会超过_concurrency_，并且我们的处理不会不必要地延迟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenLimitInsideServerRange_whenLimitedConcurrency_thenNoExceptionThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token class-name">Concurrency</span><span class="token punctuation">.</span><span class="token constant">MAX_CONCURRENT</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> requests <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token class-name">LimitConcurrency</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token constant">TOTAL_REQUESTS</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">blockLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仍然有一些其他选项值得讨论，这取决于我们的场景和偏好。让我们一一了解。</p><h2 id="_6-使用resilience4j-ratelimiter" tabindex="-1"><a class="header-anchor" href="#_6-使用resilience4j-ratelimiter"><span>6. 使用Resilience4j <em>RateLimiter</em></span></a></h2><p>Resilience4j是一个多功能库，旨在处理应用程序中的容错。我们将使用它在间隔内限制并发请求的数量，并包括一个超时。</p><p>让我们首先添加resilience4j-reactor和resilience4j-ratelimiter依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```io.github.resilience4j```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```resilience4j-reactor```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.7.1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```io.github.resilience4j```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```resilience4j-ratelimiter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.7.1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们使用_RateLimiter.of()_构建我们的速率限制器，提供名称、发送新请求的间隔、并发限制和超时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resilience4jRateLimit</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flux</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">fetch</span><span class="token punctuation">(</span>\n      <span class="token class-name">WebClient</span> client<span class="token punctuation">,</span> <span class="token keyword">int</span> requests<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrency<span class="token punctuation">,</span> <span class="token keyword">int</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;my-rate-limiter&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">limitRefreshPeriod</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">limitForPeriod</span><span class="token punctuation">(</span>concurrency<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>interval <span class="token operator">*</span> concurrency<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们使用_transformDeferred()_将其包含在我们的_Flux_中，以便它控制我们的_GET_请求速率：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> requests<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">RandomConsumer</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">transformDeferred</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterOperator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>limiter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到，如果我们将间隔定义得太低，我们仍然会遇到问题。但是，如果我们需要与其他操作共享速率限制器规范，这种方法是有帮助的。</p><h2 id="_7-使用guava进行精确节流" tabindex="-1"><a class="header-anchor" href="#_7-使用guava进行精确节流"><span>7. 使用Guava进行精确节流</span></a></h2><p>Guava有一个通用的速率限制器，适用于我们的场景。此外，由于它使用令牌桶算法，它只会在必要时阻塞，而不是每次都像_Flux.delayElements()_那样。</p><p>首先，我们需要将guava添加到我们的pom.xml中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.google.guava```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```guava```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```33.2.1-jre```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用它，我们调用_RateLimiter.create()_并传递我们想要发送的每秒最大请求数量。然后，在发送请求之前，我们在_limiter_上调用_acquire()_以在必要时节流执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaRateLimit</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flux</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">fetch</span><span class="token punctuation">(</span>\n      <span class="token class-name">WebClient</span> client<span class="token punctuation">,</span> <span class="token keyword">int</span> requests<span class="token punctuation">,</span> <span class="token keyword">int</span> requestsPerSecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>requestsPerSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> requests<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token class-name">RandomConsumer</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于其简单性，这个解决方案工作得非常好——它不会使我们的代码比必要时间更长地阻塞。例如，如果由于某种原因，一个请求比预期的时间长，下一个不会等待执行。但是，只有在我们设置的_requestsPerSecond_范围内才会这样。</p><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们看到了几种可用的方法来限制我们的_WebClient_的速率。之后，我们模拟了一个受控的Web服务，以了解它如何影响我们的代码和测试。此外，我们使用了Project Reactor和一些库以不同的方式帮助我们实现相同的目标。</p><p>如常，源代码可在GitHub上获取。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/11c3bee512ea79aa4341510e5bb5f001?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/74d85e58eea7ae3bd05956bff5cb1b49?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2019/10/JUnit5-Cover-Mockup.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2018/07/JUnit5-Icon-1.png" alt="img" loading="lazy"></p><p>OK</p>',62),c=[p];function o(l,i){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","2024-07-13-Limiting the Requests per Second With WebClient.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-13/2024-07-13-Limiting%20the%20Requests%20per%20Second%20With%20WebClient.html","title":"使用Spring 5 WebClient限制每秒请求数量","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring","WebClient"],"tag":["Rate Limiting","Concurrency"],"head":[["meta",{"name":"keywords","content":"Spring WebClient, Rate Limiting, Concurrency, Non-blocking"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-13/2024-07-13-Limiting%20the%20Requests%20per%20Second%20With%20WebClient.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring 5 WebClient限制每秒请求数量"}],["meta",{"property":"og:description","content":"使用Spring 5 WebClient限制每秒请求数量 在本教程中，我们将看到使用Spring 5 WebClient限制每秒请求数量的不同方法。 尽管我们通常希望利用其非阻塞特性，但某些场景可能迫使我们添加延迟。我们将学习在使用一些Project Reactor特性来控制对服务器的请求流时遇到的一些这些场景。 2.1. 编写一个简单的Web服务 要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-13T06:04:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Rate Limiting"}],["meta",{"property":"article:tag","content":"Concurrency"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-13T06:04:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring 5 WebClient限制每秒请求数量\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/11c3bee512ea79aa4341510e5bb5f001?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/74d85e58eea7ae3bd05956bff5cb1b49?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2019/10/JUnit5-Cover-Mockup.png\\",\\"https://www.baeldung.com/wp-content/uploads/2018/07/JUnit5-Icon-1.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-13T06:04:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring 5 WebClient限制每秒请求数量 在本教程中，我们将看到使用Spring 5 WebClient限制每秒请求数量的不同方法。 尽管我们通常希望利用其非阻塞特性，但某些场景可能迫使我们添加延迟。我们将学习在使用一些Project Reactor特性来控制对服务器的请求流时遇到的一些这些场景。 2.1. 编写一个简单的Web服务 要..."},"headers":[{"level":3,"title":"2.1. 编写一个简单的Web服务","slug":"_2-1-编写一个简单的web服务","link":"#_2-1-编写一个简单的web服务","children":[]},{"level":3,"title":"2.2. 对我们的服务器进行速率限制","slug":"_2-2-对我们的服务器进行速率限制","link":"#_2-2-对我们的服务器进行速率限制","children":[]},{"level":3,"title":"2.3. 编写一个简单的客户端","slug":"_2-3-编写一个简单的客户端","link":"#_2-3-编写一个简单的客户端","children":[]},{"level":2,"title":"3. 使用_zipWith(Flux.interval())_进行延迟","slug":"_3-使用-zipwith-flux-interval-进行延迟","link":"#_3-使用-zipwith-flux-interval-进行延迟","children":[]},{"level":2,"title":"4. 使用_Flux.delayElements()_进行延迟","slug":"_4-使用-flux-delayelements-进行延迟","link":"#_4-使用-flux-delayelements-进行延迟","children":[{"level":3,"title":"4.1. 调整我们的解决方案","slug":"_4-1-调整我们的解决方案","link":"#_4-1-调整我们的解决方案","children":[]}]},{"level":2,"title":"5. 使用_flatMap()_进行并发控制","slug":"_5-使用-flatmap-进行并发控制","link":"#_5-使用-flatmap-进行并发控制","children":[]},{"level":2,"title":"6. 使用Resilience4j RateLimiter","slug":"_6-使用resilience4j-ratelimiter","link":"#_6-使用resilience4j-ratelimiter","children":[]},{"level":2,"title":"7. 使用Guava进行精确节流","slug":"_7-使用guava进行精确节流","link":"#_7-使用guava进行精确节流","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1720850696000,"updatedTime":1720850696000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.17,"words":1852},"filePathRelative":"posts/baeldung/2024-07-13/2024-07-13-Limiting the Requests per Second With WebClient.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将看到使用Spring 5 WebClient限制每秒请求数量的不同方法。</p>\\n<p>尽管我们通常希望利用其非阻塞特性，但某些场景可能迫使我们添加延迟。我们将学习在使用一些Project Reactor特性来控制对服务器的请求流时遇到的一些这些场景。</p>\\n<h3>2.1. 编写一个简单的Web服务</h3>\\n<p>要探索这个场景，我们将从一个简单的@RestController开始，它提供来自固定范围的随机数：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@RestController</span>\\n<span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/random\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RandomController</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@GetMapping</span>\\n    <span class=\\"token class-name\\">Integer</span> <span class=\\"token function\\">getRandom</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nextInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
