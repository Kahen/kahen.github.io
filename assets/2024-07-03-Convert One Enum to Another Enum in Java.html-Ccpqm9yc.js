import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-813qSKfg.js";const p={},e=t('<h1 id="在java中将一个枚举转换为另一个枚举" tabindex="-1"><a class="header-anchor" href="#在java中将一个枚举转换为另一个枚举"><span>在Java中将一个枚举转换为另一个枚举</span></a></h1><p>枚举（Enumerations，或称enums）是Java编程语言中强大且广泛使用的特性。在某些情况下，我们可能需要将一个枚举类型转换为另一个枚举类型。这种需求可能源于集成不同的库或框架、使用来自不同平台的微服务，或处理难以更新的遗留代码。</p><p>在本文中，我们将探讨在Java中映射或转换一个枚举到另一个枚举的不同技术。我们将检查内置机制和可以提供帮助的外部库。</p><h3 id="_2-定义模型" tabindex="-1"><a class="header-anchor" href="#_2-定义模型"><span>2. 定义模型</span></a></h3><p>在转换枚举时，我们可能会遇到两种主要情况，可以使用不同的实现技术。第一种情况涉及具有不同值集的不关枚举。第二种情况涉及具有相同值但代表Java视角下不同类的枚举。我们不能简单地将这些类的实例进行强制转换，仍然需要执行映射。</p><p>为了说明这些技术，让我们定义两个数据模型。第一个模型代表枚举具有相同值的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span> <span class="token punctuation">{</span>\n    <span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token constant">APPROVED</span><span class="token punctuation">,</span> <span class="token constant">PACKED</span><span class="token punctuation">,</span> <span class="token constant">DELIVERED</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CmsOrderStatus</span> <span class="token punctuation">{</span>\n    <span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token constant">APPROVED</span><span class="token punctuation">,</span> <span class="token constant">PACKED</span><span class="token punctuation">,</span> <span class="token constant">DELIVERED</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个模型代表枚举具有不同值的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">UserStatus</span> <span class="token punctuation">{</span>\n    <span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token constant">ACTIVE</span><span class="token punctuation">,</span> <span class="token constant">BLOCKED</span><span class="token punctuation">,</span> <span class="token constant">INACTIVATED_BY_SYSTEM</span><span class="token punctuation">,</span> <span class="token constant">DELETED</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ExternalUserStatus</span> <span class="token punctuation">{</span>\n    <span class="token constant">ACTIVE</span><span class="token punctuation">,</span> <span class="token constant">INACTIVE</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用java核心功能" tabindex="-1"><a class="header-anchor" href="#_3-使用java核心功能"><span>3. 使用Java核心功能</span></a></h3><p>大多数枚举转换可以使用Java语言的核心能力来实现，无需外部库。</p><h4 id="_3-1-使用switch" tabindex="-1"><a class="header-anchor" href="#_3-1-使用switch"><span>3.1. 使用Switch</span></a></h4><p>最直接的选择之一是使用_switch_机制。通过为每个枚举常量创建适当的条件，我们可以确定相应的转换值。switch语句的语法随着不同Java版本的推出而发展。根据项目的Java版本，switch可以以不同的方式实现。</p><p><strong>从Java 12开始，引入了新的switch特性，包括switch表达式和多案例值。</strong> 这允许我们直接返回switch的结果，并将多个值合并到一个案例中。Java 12有一个此特性的预览版本（我们可以使用它，但需要额外的配置），而从Java 14开始提供了永久版本。</p><p>让我们看一个实现示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExternalUserStatus</span> <span class="token function">toExternalUserStatusViaSwitchStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token constant">BLOCKED</span><span class="token punctuation">,</span> <span class="token constant">INACTIVATED_BY_SYSTEM</span><span class="token punctuation">,</span> <span class="token constant">DELETED</span> <span class="token operator">-&gt;</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token constant">ACTIVE</span> <span class="token operator">-&gt;</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，仍然可以使用旧版本的Java使用普通的switch语句：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExternalUserStatus</span> <span class="token function">toExternalUserStatusViaRegularSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token constant">BLOCKED</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token constant">INACTIVATED_BY_SYSTEM</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token constant">DELETED</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token constant">ACTIVE</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的测试片段演示了这是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenUsingSwitchStatement_thenEnumConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UserStatus</span> userStatusDeleted <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">DELETED</span><span class="token punctuation">;</span>\n    <span class="token class-name">UserStatus</span> userStatusPending <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>\n    <span class="token class-name">UserStatus</span> userStatusActive <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">,</span> userStatusDeleted<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaSwitchStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">,</span> userStatusPending<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaSwitchStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">,</span> userStatusActive<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaSwitchStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenUsingSwitch_thenEnumConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UserStatus</span> userStatusDeleted <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">DELETED</span><span class="token punctuation">;</span>\n    <span class="token class-name">UserStatus</span> userStatusPending <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>\n    <span class="token class-name">UserStatus</span> userStatusActive <span class="token operator">=</span> <span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">,</span> userStatusDeleted<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaRegularSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">,</span> userStatusPending<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaRegularSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">,</span> userStatusActive<span class="token punctuation">.</span><span class="token function">toExternalUserStatusViaRegularSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，这种转换逻辑并不一定需要位于枚举类本身中，但如果可能的话，最好封装逻辑。</p><h4 id="_3-2-使用成员变量" tabindex="-1"><a class="header-anchor" href="#_3-2-使用成员变量"><span>3.2. 使用成员变量</span></a></h4><p>另一种转换枚举的方法是利用在枚举中定义字段的可能性。通过在_UserStatus_中指定一个_externalUserStatus_字段，并在常量声明中提供所需的值，我们可以为每个枚举值定义一个显式的映射。在这种方法中，转换方法返回_externalUserStatus_值。</p><p>_UserStatus_的定义看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">UserStatusWithFieldVariable</span> <span class="token punctuation">{</span>\n    <span class="token function">PENDING</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">ACTIVE</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">BLOCKED</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">INACTIVATED_BY_SYSTEM</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">DELETED</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExternalUserStatus</span> externalUserStatus<span class="token punctuation">;</span>\n\n    <span class="token class-name">UserStatusWithFieldVariable</span><span class="token punctuation">(</span><span class="token class-name">ExternalUserStatus</span> externalUserStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>externalUserStatus <span class="token operator">=</span> externalUserStatus<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换方法将返回_externalUserStatus_值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExternalUserStatus</span> <span class="token function">toExternalUserStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> externalUserStatus<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-使用-enummap" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-enummap"><span>3.3. 使用_EnumMap_</span></a></h4><p>上述方法适用于所有可以修改的枚举类型。然而，在无法更新源代码或希望将转换逻辑保留在枚举本身之外的情况下，《EnumMap_类可能很有用。</p><p>_EnumMap_将帮助我们进行独立的映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserStatusMapper</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserStatus</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">&gt;</span></span>` statusesMap<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        statusesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        statusesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        statusesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        statusesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">DELETED</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        statusesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVATED_BY_SYSTEM</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">INACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        statusesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">,</span> <span class="token class-name">ExternalUserStatus</span><span class="token punctuation">.</span><span class="token constant">ACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>EnumMap特别优化了使用枚举作为映射键，最好避免使用其他类型的映射。</strong></p><h4 id="_3-4-使用枚举名称" tabindex="-1"><a class="header-anchor" href="#_3-4-使用枚举名称"><span>3.4. 使用枚举名称</span></a></h4><p>当在具有相同值的枚举之间进行转换时，我们可以依赖Java提供的_valueOf()<em>方法。该方法根据提供的枚举名称返回枚举值。<strong>然而，重要的是要注意，提供的名称必须完全匹配用于声明枚举常量的标识符。</strong> 如果在声明的常量中找不到提供的名称，将抛出_IllegalArgumentException</em>。</p><p>特别是当使用枚举名称方法时要小心，尤其是在处理我们无法控制的外部库或服务中的枚举时。两个枚举之间的不匹配可能导致运行时错误，并可能破坏服务。</p><p>为了展示解释的方法，我们将使用_OrderStatus_和_CmsOrderStatus_实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CmsOrderStatus</span> <span class="token function">toCmsOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">CmsOrderStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5-使用序数方法" tabindex="-1"><a class="header-anchor" href="#_3-5-使用序数方法"><span>3.5. 使用序数方法</span></a></h4><p>序数方法是一种有趣但棘手的技术，它依赖于枚举的内部实现。在内部，枚举被表示为常量的数组，允许我们通过索引迭代这些值并访问它们。</p><p>让我们看看如何使用_ordinal()<em>功能将_OrderStatus_转换为_CmsOrderStatus</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CmsOrderStatus</span> <span class="token function">toCmsOrderStatusOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">CmsOrderStatus</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试显示了用法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenUsingOrdinalApproach_thenEnumConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">OrderStatus</span> orderStatusApproved <span class="token operator">=</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">APPROVED</span><span class="token punctuation">;</span>\n    <span class="token class-name">OrderStatus</span> orderStatusDelivered <span class="token operator">=</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">DELIVERED</span><span class="token punctuation">;</span>\n    <span class="token class-name">OrderStatus</span> orderStatusPending <span class="token operator">=</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">CmsOrderStatus</span><span class="token punctuation">.</span><span class="token constant">APPROVED</span><span class="token punctuation">,</span> orderStatusApproved<span class="token punctuation">.</span><span class="token function">toCmsOrderStatusOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">CmsOrderStatus</span><span class="token punctuation">.</span><span class="token constant">DELIVERED</span><span class="token punctuation">,</span> orderStatusDelivered<span class="token punctuation">.</span><span class="token function">toCmsOrderStatusOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">CmsOrderStatus</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">,</span> orderStatusPending<span class="token punctuation">.</span><span class="token function">toCmsOrderStatusOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是要注意，序数方法有其局限性。它可能在编译期间没有显示任何问题，但当枚举在大小方面变得不兼容时，它容易运行失败。即使枚举的大小保持兼容，它们的值或索引的更改也可能导致错误和不一致的行为。</p><p><strong>尽管序数方法适用于某些场景，但通常建议使用更稳定的方法。</strong> 正如Java文档中所述：</p><blockquote><p>序数方法主要设计用于在复杂的基于枚举的数据结构中使用，例如java.util.EnumSet和java.util.EnumMap。</p></blockquote><h3 id="_4-使用mapstruct" tabindex="-1"><a class="header-anchor" href="#_4-使用mapstruct"><span>4. 使用MapStruct</span></a></h3><p>MapStruct是一个流行的库，用于在实体之间进行映射，它也可以用于枚举转换。</p><h4 id="_4-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-maven依赖"><span>4.1. Maven依赖</span></a></h4><p>让我们将MapStruct依赖项添加到我们的_pom.xml_。我们需要将_MapStruct库_作为依赖项，并将_MapStruct Processor_作为注释处理器：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mapstruct```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mapstruct```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.5.5.Final```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.maven.plugins```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```maven-compiler-plugin```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.5.1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>`17`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>`17`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>`\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mapstruct```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mapstruct-processor```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.5.5.Final```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在Maven中央仓库中找到MapStruct及其处理器的最新版本。</p><h4 id="_4-2-使用方法" tabindex="-1"><a class="header-anchor" href="#_4-2-使用方法"><span>4.2. 使用方法</span></a></h4><p>MapStruct基于在接口中定义的注释生成实现。我们可以在枚举值完全不同的情况以及值相同的情况都使用这个库。如果没有指定特定的映射，MapStruct会根据常数名称之间的匹配自动尝试映射。同时，我们可以在枚举中配置显式的值映射。在较新的MapStruct版本中，我们应该使用_@ValueMapping_代替_@Mapping_。</p><p>考虑到我们的模型，_OrderStatus_和_CmsOrderStatus_的映射可以不需要任何手动映射来定义。_UserStatus_和_ExternalUserStatus_之间的映射需要额外的配置，其中枚举名称不匹配：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EnumMapper</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">CmsOrderStatus</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> orderStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;PENDING&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;INACTIVE&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;BLOCKED&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;INACTIVE&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;INACTIVATED_BY_SYSTEM&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;INACTIVE&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;DELETED&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;INACTIVE&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">ExternalUserStatus</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span> userStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，_UserStatus.ACTIVE_和_ExternalUserStatus.ACTIVE_之间的映射将自动生成。</p><p>除此之外，我们可以使用_MappingConstants.ANY_REMAINING_特性，它将为尚未映射的枚举常数在映射结束时放置默认值（在我们的例子中是_ExternalUserStatus_. <em>INACTIVE</em>）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token class-name">MappingConstants</span><span class="token punctuation">.</span><span class="token constant">ANY_REMAINING</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;INACTIVE&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">ExternalUserStatus</span> <span class="token function">mapDefault</span><span class="token punctuation">(</span><span class="token class-name">UserStatus</span> userStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-最佳实践和用例" tabindex="-1"><a class="header-anchor" href="#_5-最佳实践和用例"><span>5. 最佳实践和用例</span></a></h3><p>选择适当的转换策略取决于项目的具体要求。应考虑的因素包括枚举常数之间的相似性、对源代码的访问权限以及枚举可能更改的频率。</p><p><strong>当我们可以访问枚举的源代码时，推荐使用switch和成员变量方法。</strong> 这些方法允许我们将转换逻辑封装在单一位置，提供更好的代码组织。此外，switch方法可以扩展以使用一些外部属性并执行更复杂的映射逻辑。然而，需要注意的是，在具有大量条件和大型枚举的场景中，使用switch方法可能导致代码冗长且难以管理。</p><p><strong>当我们无法访问源代码或希望在没有冗长的switch语句的情况下清晰地可视化映射时，《EnumMap_方法是一个好选择。</strong> _EnumMap_允许我们在不需要广泛的switch语句的情况下定义枚举之间的显式映射。当转换逻辑简单明了时，它特别有用。</p><p><strong>只有当源和目标枚举名称相同时，才应使用枚举名称方法。</strong> 在可能出现名称不匹配的情况下，最好通过增加额外的逻辑并定义默认行为来扩展映射方法。这确保了转换可以优雅地处理不匹配和意外情况。</p><p>序数方法虽然在基于索引的映射逻辑场景中很有用，但由于其固有的风险，通常应避免使用。枚举名称和序数方法都需要一个弹性的实现来适应枚举大小或值的更改。</p><p>另外，为了避免维护复杂的switch语句或映射，可以使用MapStruct来自动化这个过程。它可以处理名称相同的枚举和完全不同名称的枚举，允许我们定义额外的映射逻辑和默认行为。</p><p>无论选择哪种方法，都至关重要在枚举更改后立即更新映射。如果更新映射不可行，请确保代码设计得当，能够适当地处理枚举更改，要么退回到默认映射值，要么在出现新的枚举值时优雅地处理。这种方法确保了枚举转换的持久性和稳定性。</p><h3 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h3><p>在本文中，我们探讨了Java中映射枚举的各种技术。我们讨论了内置机制和使用MapStruct。根据特定的用例和要求，不同的技术可能比其他技术更适合。建议在选择转换策略时考虑多个因素，例如枚举常数之间的相似性、对源代码的访问以及枚举可能的更改。</p><p>完整的示例可以在GitHub上找到。</p><p>OK</p>',74),c=[e];function o(l,u){return a(),s("div",null,c)}const k=n(p,[["render",o],["__file","2024-07-03-Convert One Enum to Another Enum in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-03/2024-07-03-Convert%20One%20Enum%20to%20Another%20Enum%20in%20Java.html","title":"在Java中将一个枚举转换为另一个枚举","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Enums"],"tag":["Java","Enum转换"],"head":[["meta",{"name":"keywords","content":"Java, Enum转换, 枚举类型转换"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-03/2024-07-03-Convert%20One%20Enum%20to%20Another%20Enum%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中将一个枚举转换为另一个枚举"}],["meta",{"property":"og:description","content":"在Java中将一个枚举转换为另一个枚举 枚举（Enumerations，或称enums）是Java编程语言中强大且广泛使用的特性。在某些情况下，我们可能需要将一个枚举类型转换为另一个枚举类型。这种需求可能源于集成不同的库或框架、使用来自不同平台的微服务，或处理难以更新的遗留代码。 在本文中，我们将探讨在Java中映射或转换一个枚举到另一个枚举的不同技术..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T02:57:33.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Enum转换"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-03T02:57:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中将一个枚举转换为另一个枚举\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-03T02:57:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中将一个枚举转换为另一个枚举 枚举（Enumerations，或称enums）是Java编程语言中强大且广泛使用的特性。在某些情况下，我们可能需要将一个枚举类型转换为另一个枚举类型。这种需求可能源于集成不同的库或框架、使用来自不同平台的微服务，或处理难以更新的遗留代码。 在本文中，我们将探讨在Java中映射或转换一个枚举到另一个枚举的不同技术..."},"headers":[{"level":3,"title":"2. 定义模型","slug":"_2-定义模型","link":"#_2-定义模型","children":[]},{"level":3,"title":"3. 使用Java核心功能","slug":"_3-使用java核心功能","link":"#_3-使用java核心功能","children":[]},{"level":3,"title":"4. 使用MapStruct","slug":"_4-使用mapstruct","link":"#_4-使用mapstruct","children":[]},{"level":3,"title":"5. 最佳实践和用例","slug":"_5-最佳实践和用例","link":"#_5-最佳实践和用例","children":[]},{"level":3,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719975453000,"updatedTime":1719975453000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.8,"words":2639},"filePathRelative":"posts/baeldung/2024-07-03/2024-07-03-Convert One Enum to Another Enum in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>枚举（Enumerations，或称enums）是Java编程语言中强大且广泛使用的特性。在某些情况下，我们可能需要将一个枚举类型转换为另一个枚举类型。这种需求可能源于集成不同的库或框架、使用来自不同平台的微服务，或处理难以更新的遗留代码。</p>\\n<p>在本文中，我们将探讨在Java中映射或转换一个枚举到另一个枚举的不同技术。我们将检查内置机制和可以提供帮助的外部库。</p>\\n<h3>2. 定义模型</h3>\\n<p>在转换枚举时，我们可能会遇到两种主要情况，可以使用不同的实现技术。第一种情况涉及具有不同值集的不关枚举。第二种情况涉及具有相同值但代表Java视角下不同类的枚举。我们不能简单地将这些类的实例进行强制转换，仍然需要执行映射。</p>","autoDesc":true}');export{k as comp,d as data};
