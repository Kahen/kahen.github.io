import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a as n}from"./app-DWhzy7sT.js";const s={},p=n(`<h1 id="在java中启用无限强度的密码学" tabindex="-1"><a class="header-anchor" href="#在java中启用无限强度的密码学"><span>在Java中启用无限强度的密码学</span></a></h1><p>在本教程中，我们将学习为什么Java密码学扩展（JCE）的无限强度策略文件默认情况下并不总是启用的。此外，我们将解释如何检查密码学强度。之后，我们将展示如何在不同版本的Java中启用无限密码学。</p><h2 id="jce无限强度策略文件" tabindex="-1"><a class="header-anchor" href="#jce无限强度策略文件"><span>JCE无限强度策略文件</span></a></h2><p>让我们理解一下密码学强度的含义。它由发现密钥的难度来定义，这取决于所使用的密码算法和密钥的长度。通常，更长的密钥提供更强的加密。有限的密码学强度使用最大128位的密钥。另一方面，无限的强度使用最大长度为2147483647位的密钥。</p><p>正如我们所知，JRE本身包含加密功能。<strong>JCE使用管辖策略文件来控制密码学强度</strong>。<strong>策略文件由两个jar文件组成：<em>local_policy.jar</em> 和 <em>US_export_policy.jar</em></strong>。这使得Java平台内置了对密码学强度的控制。</p><h3 id="为什么jce无限强度策略文件默认不包括" tabindex="-1"><a class="header-anchor" href="#为什么jce无限强度策略文件默认不包括"><span>为什么JCE无限强度策略文件默认不包括</span></a></h3><p>首先，只有旧版本的JRE不包括无限强度策略文件。8u151及更早版本的JRE只捆绑了有限策略文件。相比之下，从Java版本8u151开始，JRE提供了无限和有限策略文件。<strong>原因是直接的，一些国家要求限制密码学强度</strong>。如果一个国家的法律允许无限的密码学强度，可以根据Java版本捆绑或启用它。</p><h3 id="如何检查密码学强度" tabindex="-1"><a class="header-anchor" href="#如何检查密码学强度"><span>如何检查密码学强度</span></a></h3><p>让我们看看如何检查密码学强度。我们可以通过检查允许的最大密钥长度来做到这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> maxKeySize <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">getMaxAllowedKeyLength</span><span class="token punctuation">(</span><span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果使用的是有限策略文件，它将返回128。另一方面，如果返回2147483647，则JCE使用的是无限策略文件。</p><h3 id="策略文件的位置" tabindex="-1"><a class="header-anchor" href="#策略文件的位置"><span>策略文件的位置</span></a></h3><p><strong>Java版本8u151及更早版本在_JAVA_HOME/jre/lib/security目录中包含策略文件。</strong></p><p><strong>从8u151版本开始，JRE提供了不同版本的策略文件。</strong> 结果是，在JRE目录 <em>JAVA_HOME/jre/lib/security/policy</em> 中有两个子目录：<em>limited</em> 和 <em>unlimited</em>。第一个包含有限强度策略文件。第二个包含无限强度的文件。</p><h3 id="如何启用无限强度密码学" tabindex="-1"><a class="header-anchor" href="#如何启用无限强度密码学"><span>如何启用无限强度密码学</span></a></h3><p>现在让我们看看如何启用最大密码学强度。根据我们使用的Java版本，有几种方法可以做到这一点。</p><h4 id="_6-1-java版本8u151之前的处理" tabindex="-1"><a class="header-anchor" href="#_6-1-java版本8u151之前的处理"><span>6.1 Java版本8u151之前的处理</span></a></h4><p><strong>在8u151版本之前，JRE只包含有限强度策略文件</strong>。我们必须用Oracle网站上的无限版本替换它。</p><p>首先，我们下载Java 8的文件，这些文件可以在此处获得。接下来，我们解包下载的包，其中包含 <em>local_policy.jar</em> 和 <em>US_export_policy.jar</em>。</p><p>最后，我们将这些文件复制到 <em>JAVA_HOME/jre/lib/security</em>。</p><h4 id="_6-2-java版本8u151及更高版本的处理" tabindex="-1"><a class="header-anchor" href="#_6-2-java版本8u151及更高版本的处理"><span>6.2 Java版本8u151及更高版本的处理</span></a></h4><p>在Java版本8u151及更高版本中，JCE框架默认使用无限强度策略文件。此外，如果我们想定义使用哪个版本，有一个安全属性 <em>crypto.policy</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;crypto.policy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unlimited&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>我们必须在JCE框架初始化之前设置此属性。</strong> 它定义了在 <em>JAVA_HOME/jre/lib/security/policy</em> 下的策略文件目录。</p><p>首先，当安全属性未设置时，框架检查旧位置 <em>JAVA_HOME/jre/lib/security</em> 中的策略文件。尽管在新版本的Java中，默认情况下旧位置没有策略文件。JCE首先检查它，以与旧版本兼容。</p><p>其次，如果jar文件在旧位置不存在且属性未定义，那么JRE默认使用无限策略文件。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在这篇短文中，我们了解了JCE无限强度策略文件。首先，我们看了为什么在旧版本的Java中不默认启用无限的密码学强度。接下来，我们学习了如何通过检查最大密钥长度来确定密码学强度。最后，我们看到了如何在不同版本的Java中启用它。</p><p>如常，示例的源代码可在GitHub上找到。</p>`,29),r=[p];function o(i,l){return t(),e("div",null,r)}const h=a(s,[["render",o],["__file","2024-07-26-Enabling Unlimited Strength Cryptography in Java.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Enabling%20Unlimited%20Strength%20Cryptography%20in%20Java.html","title":"在Java中启用无限强度的密码学","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Security"],"tag":["JCE","Cryptography"],"head":[["meta",{"name":"keywords","content":"Java, JCE, Cryptography, Unlimited Strength"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Enabling%20Unlimited%20Strength%20Cryptography%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中启用无限强度的密码学"}],["meta",{"property":"og:description","content":"在Java中启用无限强度的密码学 在本教程中，我们将学习为什么Java密码学扩展（JCE）的无限强度策略文件默认情况下并不总是启用的。此外，我们将解释如何检查密码学强度。之后，我们将展示如何在不同版本的Java中启用无限密码学。 JCE无限强度策略文件 让我们理解一下密码学强度的含义。它由发现密钥的难度来定义，这取决于所使用的密码算法和密钥的长度。通常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:56:28.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JCE"}],["meta",{"property":"article:tag","content":"Cryptography"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:56:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中启用无限强度的密码学\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:56:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中启用无限强度的密码学 在本教程中，我们将学习为什么Java密码学扩展（JCE）的无限强度策略文件默认情况下并不总是启用的。此外，我们将解释如何检查密码学强度。之后，我们将展示如何在不同版本的Java中启用无限密码学。 JCE无限强度策略文件 让我们理解一下密码学强度的含义。它由发现密钥的难度来定义，这取决于所使用的密码算法和密钥的长度。通常..."},"headers":[{"level":2,"title":"JCE无限强度策略文件","slug":"jce无限强度策略文件","link":"#jce无限强度策略文件","children":[{"level":3,"title":"为什么JCE无限强度策略文件默认不包括","slug":"为什么jce无限强度策略文件默认不包括","link":"#为什么jce无限强度策略文件默认不包括","children":[]},{"level":3,"title":"如何检查密码学强度","slug":"如何检查密码学强度","link":"#如何检查密码学强度","children":[]},{"level":3,"title":"策略文件的位置","slug":"策略文件的位置","link":"#策略文件的位置","children":[]},{"level":3,"title":"如何启用无限强度密码学","slug":"如何启用无限强度密码学","link":"#如何启用无限强度密码学","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]}],"git":{"createdTime":1721987788000,"updatedTime":1721987788000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1047},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Enabling Unlimited Strength Cryptography in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将学习为什么Java密码学扩展（JCE）的无限强度策略文件默认情况下并不总是启用的。此外，我们将解释如何检查密码学强度。之后，我们将展示如何在不同版本的Java中启用无限密码学。</p>\\n<h2>JCE无限强度策略文件</h2>\\n<p>让我们理解一下密码学强度的含义。它由发现密钥的难度来定义，这取决于所使用的密码算法和密钥的长度。通常，更长的密钥提供更强的加密。有限的密码学强度使用最大128位的密钥。另一方面，无限的强度使用最大长度为2147483647位的密钥。</p>\\n<p>正如我们所知，JRE本身包含加密功能。<strong>JCE使用管辖策略文件来控制密码学强度</strong>。<strong>策略文件由两个jar文件组成：<em>local_policy.jar</em> 和 <em>US_export_policy.jar</em></strong>。这使得Java平台内置了对密码学强度的控制。</p>","autoDesc":true}');export{h as comp,u as data};
