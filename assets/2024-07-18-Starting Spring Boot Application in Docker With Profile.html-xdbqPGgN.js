import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a as r}from"./app-DpDzgwdT.js";const o={},a=r(`<h1 id="在docker中使用profile启动spring-boot应用程序" tabindex="-1"><a class="header-anchor" href="#在docker中使用profile启动spring-boot应用程序"><span>在Docker中使用Profile启动Spring Boot应用程序</span></a></h1><p>我们众所周知Docker的流行程度，以及Java开发者将其Spring Boot应用程序容器化的趋势。然而，一些开发者可能会对如何在Docker化的Spring Boot应用程序中设置Profile有疑问。</p><p>在本教程中，我们将解释如何在Docker容器中启动带有Profile的Spring Boot应用程序。</p><h2 id="_2-基础dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-基础dockerfile"><span>2. 基础Dockerfile</span></a></h2><p>通常，要容器化Spring Boot应用程序，我们只需提供一个Dockerfile。</p><p>让我们看看我们Spring Boot应用程序的最小Dockerfile：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM openjdk:17-jdk-alpine
COPY target/*.jar app.jar
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们可以通过docker build构建我们的Docker镜像：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker build --tag=docker-with-spring-profile:latest .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，我们可以从镜像docker-with-spring-profile运行我们的应用程序：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run docker-with-spring-profile:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如我们所注意到的，我们的Spring Boot应用程序以“default”Profile启动：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>2024-02-29 22:34:25.268 INFO 1 --- [main] c.b.docker.spring.DemoApplication: Starting DemoApplication using Java 17-ea with PID 1 (/app.jar started by root in /)
2024-02-29 22:34:25.270 INFO 1 --- [main] c.b.docker.spring.DemoApplication: No active profile set, falling back to 1 default profile: &quot;default&quot;
//...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-在dockerfile中设置profile" tabindex="-1"><a class="header-anchor" href="#_3-在dockerfile中设置profile"><span>3. 在Dockerfile中设置Profile</span></a></h2><p>为我们的docker化应用程序设置Profile的一种方法是使用Spring Boot的命令行参数“-Dspring.profiles.active”。</p><p>所以，要将Profile设置为“test”，我们在Dockerfile的ENTRYPOINT行中添加一个新参数“-Dspring.profiles.active=test”：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//...
ENTRYPOINT [&quot;java&quot;, &quot;-Dspring.profiles.active=test&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们再次使用相同的命令运行我们的容器，看看Profile是否改变：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run docker-with-spring-profile:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相应地，我们可以看到Profile“test”成功地被我们的应用程序获取：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>2024-02-29 22:39:33.210 INFO 1 --- [main] c.b.docker.spring.DemoApplication: Starting DemoApplication using Java 17-ea with PID 1 (/app.jar started by root in /)
2024-02-29 22:39:33.212 INFO 1 --- [main] c.b.docker.spring.DemoApplication: The following 1 profile is active: &quot;test&quot;
//...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用环境变量设置profile" tabindex="-1"><a class="header-anchor" href="#_4-使用环境变量设置profile"><span>4. 使用环境变量设置Profile</span></a></h2><p>有时，在我们的Dockerfile中使用硬编码的Profile可能不太方便。如果我们需要多个Profile，当我们运行容器时选择其中一个可能会很麻烦。</p><p>然而，有一个更好的替代方案。<strong>在启动时，Spring Boot会查找一个特殊的环境变量_SPRING_PROFILES_ACTIVE_。</strong></p><p>所以，我们实际上可以使用docker run命令在启动时设置Spring Profile：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -e &quot;SPRING_PROFILES_ACTIVE=test&quot; docker-with-spring-profile:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，根据我们的用例，我们可以通过逗号分隔的字符串一次设置多个Profile：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -e &quot;SPRING_PROFILES_ACTIVE=test1,test2,test3&quot; docker-with-spring-profile:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，我们应该注意到Spring Boot在属性之间有一个特定的顺序。<strong>命令行参数优先于环境变量。</strong> 因此，为了使_SPRING_PROFILES_ACTIVE_工作，我们需要修改我们的Dockerfile。</p><p>因此，我们从Dockerfile的ENTRYPOINT行中移除“-Dspring.profiles.active=test”参数：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//...
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以看到我们通过SPRING_PROFILES_ACTIVE设置的Profile被考虑在内：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>2024-02-29 22:50:28.924 INFO 1 --- [main] c.b.docker.spring.DemoApplication: Starting DemoApplication using Java 17-ea with PID 1 (/app.jar started by root in /)
2024-02-29T22:50:28.926562249Z 2022-04-22 22:50:28.926 INFO 1 --- [main] c.b.docker.spring.DemoApplication: The following 3 profiles are active: &quot;test1&quot;, &quot;test2&quot;, &quot;test3&quot;
//..
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-在docker-compose文件中设置profile" tabindex="-1"><a class="header-anchor" href="#_5-在docker-compose文件中设置profile"><span>5. 在Docker Compose文件中设置Profile</span></a></h2><p>作为一种替代方法，<strong>环境变量也可以在docker-compose文件中提供。</strong></p><p>此外，为了更好地利用我们的docker run操作，我们可以为每个Profile创建一个docker-compose文件。</p><p>让我们为“test”Profile创建一个docker-compose-test.yml文件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>version: &quot;3.5&quot;
services:
  docker-with-spring-profile:
    image: docker-with-spring-profile:latest
    environment:
      - &quot;SPRING_PROFILES_ACTIVE=test&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，我们为“prod”Profile创建另一个文件docker-compose-prod.yml，第二个文件中唯一的区别是环境变量中的Profile“prod”：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//...
environment:
  - &quot;SPRING_PROFILES_ACTIVE=prod&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们可以通过两个不同的docker-compose文件运行我们的容器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 对于&#39;test&#39;Profile
docker-compose -f docker-compose-test.yml up

# 对于&#39;prod&#39;Profile
docker-compose -f docker-compose-prod.yml up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本教程中，我们描述了在Docker化的Spring Boot应用程序中设置Profile的不同方法，并展示了一些示例，包括使用Docker和Docker Compose。</p><p>像往常一样，本教程中展示的所有代码示例都可以在GitHub上找到。</p>`,45),n=[a];function l(d,s){return i(),t("div",null,n)}const u=e(o,[["render",l],["__file","2024-07-18-Starting Spring Boot Application in Docker With Profile.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-18/2024-07-18-Starting%20Spring%20Boot%20Application%20in%20Docker%20With%20Profile.html","title":"在Docker中使用Profile启动Spring Boot应用程序","lang":"zh-CN","frontmatter":{"date":"2024-02-29T00:00:00.000Z","category":["Spring Boot","Docker"],"tag":["Spring Boot","Docker","Profile"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Docker, Profile, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-18/2024-07-18-Starting%20Spring%20Boot%20Application%20in%20Docker%20With%20Profile.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Docker中使用Profile启动Spring Boot应用程序"}],["meta",{"property":"og:description","content":"在Docker中使用Profile启动Spring Boot应用程序 我们众所周知Docker的流行程度，以及Java开发者将其Spring Boot应用程序容器化的趋势。然而，一些开发者可能会对如何在Docker化的Spring Boot应用程序中设置Profile有疑问。 在本教程中，我们将解释如何在Docker容器中启动带有Profile的Spr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T22:09:30.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"Profile"}],["meta",{"property":"article:published_time","content":"2024-02-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T22:09:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Docker中使用Profile启动Spring Boot应用程序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-18T22:09:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Docker中使用Profile启动Spring Boot应用程序 我们众所周知Docker的流行程度，以及Java开发者将其Spring Boot应用程序容器化的趋势。然而，一些开发者可能会对如何在Docker化的Spring Boot应用程序中设置Profile有疑问。 在本教程中，我们将解释如何在Docker容器中启动带有Profile的Spr..."},"headers":[{"level":2,"title":"2. 基础Dockerfile","slug":"_2-基础dockerfile","link":"#_2-基础dockerfile","children":[]},{"level":2,"title":"3. 在Dockerfile中设置Profile","slug":"_3-在dockerfile中设置profile","link":"#_3-在dockerfile中设置profile","children":[]},{"level":2,"title":"4. 使用环境变量设置Profile","slug":"_4-使用环境变量设置profile","link":"#_4-使用环境变量设置profile","children":[]},{"level":2,"title":"5. 在Docker Compose文件中设置Profile","slug":"_5-在docker-compose文件中设置profile","link":"#_5-在docker-compose文件中设置profile","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721340570000,"updatedTime":1721340570000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.5,"words":1050},"filePathRelative":"posts/baeldung/2024-07-18/2024-07-18-Starting Spring Boot Application in Docker With Profile.md","localizedDate":"2024年2月29日","excerpt":"\\n<p>我们众所周知Docker的流行程度，以及Java开发者将其Spring Boot应用程序容器化的趋势。然而，一些开发者可能会对如何在Docker化的Spring Boot应用程序中设置Profile有疑问。</p>\\n<p>在本教程中，我们将解释如何在Docker容器中启动带有Profile的Spring Boot应用程序。</p>\\n<h2>2. 基础Dockerfile</h2>\\n<p>通常，要容器化Spring Boot应用程序，我们只需提供一个Dockerfile。</p>\\n<p>让我们看看我们Spring Boot应用程序的最小Dockerfile：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>FROM openjdk:17-jdk-alpine\\nCOPY target/*.jar app.jar\\nENTRYPOINT [\\"java\\", \\"-jar\\", \\"/app.jar\\"]\\n</code></pre></div>","autoDesc":true}');export{u as comp,g as data};
