import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CbPcg273.js";const e={},p=t('<hr><h1 id="使用java去除html标签" tabindex="-1"><a class="header-anchor" href="#使用java去除html标签"><span>使用Java去除HTML标签</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>有时，我们可能希望从HTML文档字符串中移除所有HTML标签并提取文本。</p><p>这个问题看起来相当简单。然而，根据需求的不同，它可能有不同的变体。</p><p>在本教程中，我们将讨论如何使用Java来实现这一点。</p><h2 id="_2-使用正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-使用正则表达式"><span>2. 使用正则表达式</span></a></h2><p>既然我们已经将HTML作为_String_变量，我们需要进行一些文本操作。</p><p>面对文本操作问题时，正则表达式（Regex）可能是首先想到的方法。</p><p>从字符串中移除HTML标签对Regex来说并不是一个挑战，因为不管HTML元素的开始或结束，它们都遵循“\\u003c … \\u003e”的模式。</p><p>如果我们将其转换为Regex，它将是“\\u003c\\[^\\u003e\\]\\<em>\\u003e”或“\\u003c.\\</em>?\\u003e”。</p><p>我们应该注意到<strong>Regex默认进行贪婪匹配</strong>。也就是说，Regex“\\u003c.\\*?\\u003e”不会为我们的问题工作，因为我们想匹配从‘\\u003c’到下一个‘\\u003e’而不是一行中最后一个‘\\u003e’。</p><p>现在，让我们测试一下它是否可以从HTML源代码中移除标签。</p><h3 id="_2-1-从-example1-html-移除标签" tabindex="-1"><a class="header-anchor" href="#_2-1-从-example1-html-移除标签"><span>2.1. 从_example1.html_移除标签</span></a></h3><p>在我们测试移除HTML标签之前，首先让我们创建一个HTML示例，比如说_example1.html_：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>``<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>\n        <span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>``This is the page title``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>``\n        If the application X doesn&#39;t start, the possible causes could be:`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        1. `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maven.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Maven``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>`` is not installed.`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        2. Not enough disk space.`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        3. Not enough memory.\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们编写一个测试并使用_String.replaceAll()_来移除HTML标签：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 加载example1.html</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;`&lt;[^&gt;`]*&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行测试方法，我们会看到结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    This is the page title\n\n        If the application X doesn&#39;t start, the possible causes could be:\n        1. Maven is not installed.\n        2. Not enough disk space.\n        3. Not enough memory.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出看起来相当不错。这是因为所有HTML标签都被移除了。</p><p>它保留了从剥离的HTML中删除的空白。但我们在处理提取的文本时，可以很容易地移除或跳过这些空行或空白。到目前为止，一切都很好。</p><h3 id="_2-2-从-example2-html-移除标签" tabindex="-1"><a class="header-anchor" href="#_2-2-从-example2-html-移除标签"><span>2.2. 从_example2.html_移除标签</span></a></h3><p>正如我们刚刚看到的，使用Regex移除HTML标签相当简单。然而，<strong>这种方法可能会有问题，因为我们无法预测我们将获得什么样的HTML源代码</strong>。</p><p>例如，一个HTML文档可能包含_\\u003cscript\\u003e_或_\\u003cstyle\\u003e_标签，我们可能不希望在结果中包含它们的内容。</p><p>此外，<em>\\u003cscript\\u003e</em>、<em>\\u003cstyle\\u003e_甚至</em>\\u003cbody\\u003e_标签中的文本可能包含“<em>\\u003c</em>”或“<em>\\u003e</em>”字符。如果是这种情况，我们的Regex方法可能会失败。</p><p>现在，让我们看看另一个HTML示例，比如说_example2.html_：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>``<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>\n        <span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>``This is the page title``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    // some interesting script functions\n</span><span class="token template-punctuation string">`</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>``\n        If the application X doesn&#39;t start, the possible causes could be:`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        1. `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>\n            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span>\n            <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n            Maven\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>`` is not installed.`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        2. Not enough (&lt;1G) disk space.`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n        3. Not enough (&lt;64MB) memory.`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，我们有一个_\\u003cscript\\u003e_标签和_\\u003cbody\\u003e_标签中的“<em>\\u003c</em>”字符。</p><p>如果我们在_example2.html_上使用相同的方法，我们会得到（空行已被删除）：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>   This is the page title\n    // some interesting script functions\n        If the application X doesn&#39;t start, the possible causes could be:\n        1.\n            Maven\n             is not installed.\n        2. Not enough (\n        3. Not enough (\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，由于“\\u003c”字符，我们丢失了一些文本。</p><p>因此，<strong>使用Regex处理XML或HTML是脆弱的</strong>。相反，我们可以选择一个HTML解析器来完成这项工作。</p><p>接下来，我们将介绍一些易于使用的HTML库来提取文本。</p><h2 id="_3-使用jsoup" tabindex="-1"><a class="header-anchor" href="#_3-使用jsoup"><span>3. 使用Jsoup</span></a></h2><p>Jsoup是一个流行的HTML解析器。要从HTML文档中提取文本，我们可以简单地调用_Jsoup.parse(htmlString).text()_。</p><p>首先，我们需要将Jsoup库添加到类路径中。例如，假设我们使用Maven来管理项目依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.jsoup```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```jsoup```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.17.2```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们用我们的_example2.html_测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 加载example2.html</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行这个方法，它会打印：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>This is the page title If the application X doesn&#39;t start, the possible causes could be: 1. Maven is not installed. 2. Not enough (&lt;1G) disk space. 3. Not enough (&lt;64MB) memory.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如输出所示，Jsoup成功地从HTML文档中提取了文本。此外，_\\u003cscript\\u003e_元素中的文本已被忽略。</p><p>此外，<strong>默认情况下，Jsoup会移除所有文本格式和空白，例如换行符</strong>。</p><p>然而，如果需要，我们也可以要求Jsoup保留换行符。</p><h2 id="_4-使用htmlcleaner" tabindex="-1"><a class="header-anchor" href="#_4-使用htmlcleaner"><span>4. 使用HTMLCleaner</span></a></h2><p>HTMLCleaner是另一个HTML解析器。其目标是使来自Web的“格式不正确和脏乱”的HTML适合进一步处理。</p><p>首先，让我们在_pom.xml_中添加HTMLCleaner依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```net.sourceforge.htmlcleaner```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```htmlcleaner```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.25```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以设置各种选项来控制HTMLCleaner的解析行为。</p><p>这里，作为一个例子，让我们告诉HTMLCleaner在解析_example2.html_时跳过_\\u003cscript\\u003e_元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 加载example2.html</span>\n<span class="token class-name">CleanerProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CleanerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprops<span class="token punctuation">.</span><span class="token function">setPruneTags</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlCleaner</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行测试，HTMLCleaner将产生以下输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    This is the page title\n\n        If the application X doesn&#39;t start, the possible causes could be:\n        1.\n            Maven\n             is not installed.\n        2. Not enough (&lt;1G) disk space.\n        3. Not enough (&lt;64MB) memory.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，_\\u003cscript\\u003e_元素的内容已被忽略。</p><p>此外，<strong>它将_\\u003cbr/\\u003e_标签转换为提取文本中的换行符</strong>。如果格式很重要，这可能会很有帮助。</p><p>另一方面，<strong>HTMLCleaner保留了从剥离的HTML源代码中的空白</strong>。因此，例如，文本“<em>1. Maven is not installed</em>”被分成了三行。</p><h2 id="_5-使用jericho" tabindex="-1"><a class="header-anchor" href="#_5-使用jericho"><span>5. 使用Jericho</span></a></h2><p>最后，我们将看到另一个HTML解析器——Jericho。它有一个不错的功能：以简单的文本格式呈现HTML标记。稍后我们将看到它在行动中的表现。</p><p>像往常一样，让我们首先在_pom.xml_中添加Jericho依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```net.htmlparser.jericho```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```jericho-html```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.4```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的_example2.html_中，我们有一个超链接“<em>Maven (http://maven.apache.org/)</em>”。现在，假设我们希望在结果中同时拥有链接URL和链接文本。</p><p>为此，我们可以创建一个_Renderer_对象，并使用_includeHyperlinkURLs_选项：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 加载example2.html继续翻译：</span>\n\n```java\n<span class="token class-name">Source</span> htmlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Segment</span> segment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">(</span>htmlSource<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> htmlSource<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Renderer</span> htmlRender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Renderer</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIncludeHyperlinkURLs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>htmlRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们执行测试并检查输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>If the application X doesn&#39;t start, the possible causes could be:\n1. Maven `&lt;http://maven.apache.org/&gt;` is not installed.\n2. Not enough (&lt;1G) disk space.\n3. Not enough (&lt;64MB) memory.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在上面的结果中看到的，文本已经被美化格式化。此外，<strong>_\\u003ctitle\\u003e_元素中的文本默认被忽略</strong>。</p><p>链接URL也被包括在内。除了呈现链接（<em>\\u003ca\\u003e</em>），<strong>Jericho还支持呈现其他HTML标签，例如_\\u003chr/\\u003e, \\u003cbr/\\u003e,_ 列表（<em>\\u003cul\\u003e</em> 和 <em>\\u003cli\\u003e</em>）等</strong>。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们讨论了不同的移除HTML标签和提取HTML文本的方法。</p><p>我们应该注意到<strong>使用Regex处理XML/HTML不是一种好的做法</strong>。</p><p>正如往常一样，本文的完整源代码可以在GitHub上找到。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p><p>OK</p>',74),l=[p];function c(o,i){return s(),a("div",null,l)}const d=n(e,[["render",c],["__file","2024-07-24-Remove HTML Tags Using Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-Remove%20HTML%20Tags%20Using%20Java.html","title":"使用Java去除HTML标签","lang":"zh-CN","frontmatter":{"date":"2024-04-01T00:00:00.000Z","category":["Java","HTML"],"tag":["HTML","Java","Regex","Jsoup","HTMLCleaner","Jericho"],"head":[["meta",{"name":"keywords","content":"Java, HTML, Regex, Jsoup, HTMLCleaner, Jericho"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-Remove%20HTML%20Tags%20Using%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Java去除HTML标签"}],["meta",{"property":"og:description","content":"使用Java去除HTML标签 1. 概述 有时，我们可能希望从HTML文档字符串中移除所有HTML标签并提取文本。 这个问题看起来相当简单。然而，根据需求的不同，它可能有不同的变体。 在本教程中，我们将讨论如何使用Java来实现这一点。 2. 使用正则表达式 既然我们已经将HTML作为_String_变量，我们需要进行一些文本操作。 面对文本操作问题时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T12:51:43.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"HTML"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Regex"}],["meta",{"property":"article:tag","content":"Jsoup"}],["meta",{"property":"article:tag","content":"HTMLCleaner"}],["meta",{"property":"article:tag","content":"Jericho"}],["meta",{"property":"article:published_time","content":"2024-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T12:51:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Java去除HTML标签\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T12:51:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Java去除HTML标签 1. 概述 有时，我们可能希望从HTML文档字符串中移除所有HTML标签并提取文本。 这个问题看起来相当简单。然而，根据需求的不同，它可能有不同的变体。 在本教程中，我们将讨论如何使用Java来实现这一点。 2. 使用正则表达式 既然我们已经将HTML作为_String_变量，我们需要进行一些文本操作。 面对文本操作问题时..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用正则表达式","slug":"_2-使用正则表达式","link":"#_2-使用正则表达式","children":[{"level":3,"title":"2.1. 从_example1.html_移除标签","slug":"_2-1-从-example1-html-移除标签","link":"#_2-1-从-example1-html-移除标签","children":[]},{"level":3,"title":"2.2. 从_example2.html_移除标签","slug":"_2-2-从-example2-html-移除标签","link":"#_2-2-从-example2-html-移除标签","children":[]}]},{"level":2,"title":"3. 使用Jsoup","slug":"_3-使用jsoup","link":"#_3-使用jsoup","children":[]},{"level":2,"title":"4. 使用HTMLCleaner","slug":"_4-使用htmlcleaner","link":"#_4-使用htmlcleaner","children":[]},{"level":2,"title":"5. 使用Jericho","slug":"_5-使用jericho","link":"#_5-使用jericho","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721825503000,"updatedTime":1721825503000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.23,"words":1870},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-Remove HTML Tags Using Java.md","localizedDate":"2024年4月1日","excerpt":"<hr>\\n<h1>使用Java去除HTML标签</h1>\\n<h2>1. 概述</h2>\\n<p>有时，我们可能希望从HTML文档字符串中移除所有HTML标签并提取文本。</p>\\n<p>这个问题看起来相当简单。然而，根据需求的不同，它可能有不同的变体。</p>\\n<p>在本教程中，我们将讨论如何使用Java来实现这一点。</p>\\n<h2>2. 使用正则表达式</h2>\\n<p>既然我们已经将HTML作为_String_变量，我们需要进行一些文本操作。</p>\\n<p>面对文本操作问题时，正则表达式（Regex）可能是首先想到的方法。</p>\\n<p>从字符串中移除HTML标签对Regex来说并不是一个挑战，因为不管HTML元素的开始或结束，它们都遵循“\\\\u003c … \\\\u003e”的模式。</p>","autoDesc":true}');export{d as comp,k as data};
