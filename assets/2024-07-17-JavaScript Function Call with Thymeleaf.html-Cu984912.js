import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-BTwZI-W8.js";const e={},p=t('<hr><h1 id="javascript-函数调用与-thymeleaf-baeldung" tabindex="-1"><a class="header-anchor" href="#javascript-函数调用与-thymeleaf-baeldung"><span>JavaScript 函数调用与 Thymeleaf | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将在 Thymeleaf 模板中调用 JavaScript 函数。</p><p>我们将从设置依赖开始。然后，我们将添加我们的 Spring 控制器和 Thymeleaf 模板。最后，我们将展示基于其输入调用 JavaScript 函数的方法。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>为了在我们的应用程序中使用 Thymeleaf，让我们将 Thymeleaf Spring 5 依赖项添加到我们的 Maven 配置中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.thymeleaf`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`thymeleaf-spring5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.2.RELEASE`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们基于我们的 <em>Student</em> 模型添加到我们的 Spring 控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionCallController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/function-call&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExampleHTML</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;totalStudents&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StudentUtils</span><span class="token punctuation">.</span><span class="token function">buildStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StudentUtils</span><span class="token punctuation">.</span><span class="token function">buildStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;functionCall.html&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将这两个 JavaScript 函数添加到我们的 <em>functionCall.html</em> 模板下 <em>src/main/webapp/WEB-INF/views</em>：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    function greetWorld() {\n        alert(&quot;hello world&quot;)\n    }\n\n    function salute(name) {\n        alert(&quot;hello: &quot; + name)\n    }\n</span><span class="token template-punctuation string">`</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用这两个函数来说明我们在下一节中的示例。</p><p>如果有任何问题，我们可以随时检查如何将 JavaScript 添加到 Thymeleaf。</p><h2 id="_3-在-thymeleaf-内调用-javascript-函数" tabindex="-1"><a class="header-anchor" href="#_3-在-thymeleaf-内调用-javascript-函数"><span>3. 在 Thymeleaf 内调用 JavaScript 函数</span></a></h2><h3 id="_3-1-使用无输入的函数" tabindex="-1"><a class="header-anchor" href="#_3-1-使用无输入的函数"><span>3.1. 使用无输入的函数</span></a></h3><p>这是我们如何调用上面的 <em>greetWorld</em> 函数的方式：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greetWorld()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用无变量``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它适用于任何自定义或内置的 JavaScript 函数。</p><h3 id="_3-2-使用静态输入的函数" tabindex="-1"><a class="header-anchor" href="#_3-2-使用静态输入的函数"><span>3.2. 使用静态输入的函数</span></a></h3><p>如果我们不需要 JavaScript 函数中的任何动态变量，这是如何调用它的：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>alert(\\&#39;static variable used here.\\&#39;);&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用静态变量``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这需要转义单引号，不需要 SpringEL。</p><h3 id="_3-3-使用动态输入的函数" tabindex="-1"><a class="header-anchor" href="#_3-3-使用动态输入的函数"><span>3.3. 使用动态输入的函数</span></a></h3><p>有四种方式调用带有变量的 JavaScript 函数。</p><p>插入变量的第一种方式是使用内联变量：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>alert(\\&#39;There are exactly &#39;  + ${totalStudents} +  &#39; students\\&#39;);&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用内联动态变量``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一种选择是通过调用 <em>javascript:function</em>：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>javascript:alert(\\&#39;There are exactly &#39; + ${totalStudents} + &#39; students\\&#39;);&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用 javascript:function``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三种方式是使用数据属性：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${student.name}<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>salute(this.getAttribute(&#39;data-name&#39;))<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用数据属性``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这种方法在调用 JavaScript 事件，如 <em>onClick</em> 和 <em>onLoad</em> 时非常有用。</strong></p><p>最后，我们可以使用双方括号语法调用我们的 <em>salute</em> 函数：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>salute([[${student.name}]])<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`使用双括号``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>双方括号之间的表达式在 Thymeleaf 中被视为内联表达式</strong>。这就是为什么我们可以使用任何在 <em>th:text</em> 属性中也有效的表达式。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本教程中，我们学习了如何在 Thymeleaf 模板中调用 JavaScript 函数。我们从设置依赖开始。然后，我们构建了我们的控制器和模板。最后，我们探索了在 Thymeleaf 内调用任何 JavaScript 函数的方法。</p><p>一如既往，代码可以在 GitHub 上找到。</p>',38),l=[p];function c(o,i){return s(),n("div",null,l)}const d=a(e,[["render",c],["__file","2024-07-17-JavaScript Function Call with Thymeleaf.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-JavaScript%20Function%20Call%20with%20Thymeleaf.html","title":"JavaScript 函数调用与 Thymeleaf | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Thymeleaf","JavaScript"],"tag":["Thymeleaf","JavaScript","Spring"],"head":[["meta",{"name":"keywords","content":"Thymeleaf, JavaScript, Spring"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-JavaScript%20Function%20Call%20with%20Thymeleaf.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"JavaScript 函数调用与 Thymeleaf | Baeldung"}],["meta",{"property":"og:description","content":"JavaScript 函数调用与 Thymeleaf | Baeldung 1. 概述 在本教程中，我们将在 Thymeleaf 模板中调用 JavaScript 函数。 我们将从设置依赖开始。然后，我们将添加我们的 Spring 控制器和 Thymeleaf 模板。最后，我们将展示基于其输入调用 JavaScript 函数的方法。 2. 设置 为了在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T16:08:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Thymeleaf"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T16:08:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 函数调用与 Thymeleaf | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T16:08:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"JavaScript 函数调用与 Thymeleaf | Baeldung 1. 概述 在本教程中，我们将在 Thymeleaf 模板中调用 JavaScript 函数。 我们将从设置依赖开始。然后，我们将添加我们的 Spring 控制器和 Thymeleaf 模板。最后，我们将展示基于其输入调用 JavaScript 函数的方法。 2. 设置 为了在..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[]},{"level":2,"title":"3. 在 Thymeleaf 内调用 JavaScript 函数","slug":"_3-在-thymeleaf-内调用-javascript-函数","link":"#_3-在-thymeleaf-内调用-javascript-函数","children":[{"level":3,"title":"3.1. 使用无输入的函数","slug":"_3-1-使用无输入的函数","link":"#_3-1-使用无输入的函数","children":[]},{"level":3,"title":"3.2. 使用静态输入的函数","slug":"_3-2-使用静态输入的函数","link":"#_3-2-使用静态输入的函数","children":[]},{"level":3,"title":"3.3. 使用动态输入的函数","slug":"_3-3-使用动态输入的函数","link":"#_3-3-使用动态输入的函数","children":[]}]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1721232531000,"updatedTime":1721232531000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.37,"words":712},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-JavaScript Function Call with Thymeleaf.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>JavaScript 函数调用与 Thymeleaf | Baeldung</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将在 Thymeleaf 模板中调用 JavaScript 函数。</p>\\n<p>我们将从设置依赖开始。然后，我们将添加我们的 Spring 控制器和 Thymeleaf 模板。最后，我们将展示基于其输入调用 JavaScript 函数的方法。</p>\\n<h2>2. 设置</h2>\\n<p>为了在我们的应用程序中使用 Thymeleaf，让我们将 Thymeleaf Spring 5 依赖项添加到我们的 Maven 配置中：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`org.thymeleaf`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`thymeleaf-spring5`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`3.1.2.RELEASE`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
