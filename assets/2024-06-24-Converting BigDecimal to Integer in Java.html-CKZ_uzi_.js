import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Dq-rnJ4C.js";const p={},e=t(`<h1 id="java中将bigdecimal转换为integer" tabindex="-1"><a class="header-anchor" href="#java中将bigdecimal转换为integer"><span>Java中将BigDecimal转换为Integer</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p><em>BigDecimal</em> 旨在处理浮点数。它提供了一种便捷的方式来管理精度，并且最重要的是，它处理了舍入误差。</p><p>然而，在某些情况下，我们需要将其作为简单的整数来处理，并且将其转换为_Integer_或_int_。在本教程中，我们将学习如何正确进行转换，并理解转换背后的一些问题。</p><h2 id="_2-缩小转换" tabindex="-1"><a class="header-anchor" href="#_2-缩小转换"><span>2. 缩小转换</span></a></h2><p><em>BigDecimal</em> 可以存储比_Integer_或_int_更广泛的数字范围。这通常可能导致在转换过程中丢失精度。</p><h3 id="_2-1-截断" tabindex="-1"><a class="header-anchor" href="#_2-1-截断"><span>2.1. 截断</span></a></h3><p><em>BigDecimal</em> 提供了_intValue()<em>方法，可以将BigDecimal转换为_int</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">SmallBigDecimalConversionArgumentsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenSmallBigDecimalWhenConvertToIntegerThenWontLosePrecision</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> given<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> actual <span class="token operator">=</span> given<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>BigDecimal</em> 可以包含浮点值，但_int_不能。<strong>这就是为什么_intValue()_方法会截断小数点后的所有数字：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>doubles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToIntegerThenLosePrecision</span><span class="token punctuation">(</span><span class="token keyword">double</span> given<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> integerValue <span class="token operator">=</span> decimal<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> actual <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>integerValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> given<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种行为类似于将_double_转换为_int_或_long_。<strong>因此，数字的精度可能会丢失。</strong> 同时，对于应用程序来说，丢失精度可能是可以接受的。但是，我们应该始终考虑这一点。</p><h3 id="_2-2-溢出" tabindex="-1"><a class="header-anchor" href="#_2-2-溢出"><span>2.2. 溢出</span></a></h3><p>另一个问题是在使用_intValue()_时的溢出。<strong>这与前一个问题类似，但给出了一个完全不同的错误结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>longs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToIntegerThenLosePrecision</span><span class="token punctuation">(</span><span class="token keyword">long</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> actual <span class="token operator">=</span> decimal<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expected <span class="token operator">-</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，考虑到二进制数字表示，这是合理的行为。<strong>我们不能存储比_int_能容纳的更多信息。</strong> 在某些场景中，我们同时面临这两个问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>doubles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">2.5</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">5.5</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToIntegerThenLosePrecisionFromBothSides</span><span class="token punctuation">(</span><span class="token keyword">double</span> given<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> integerValue <span class="token operator">=</span> decimal<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> actual <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>integerValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>尽管_intValue()_在某些情况下可能有效，但我们必须有更好的解决方案来避免意外的错误。</strong></p><h2 id="_3-精度损失" tabindex="-1"><a class="header-anchor" href="#_3-精度损失"><span>3. 精度损失</span></a></h2><p>我们有几种方法可以解决我们讨论的问题。<strong>尽管我们无法避免精度损失，但我们可以使过程更加明确。</strong></p><h3 id="_3-1-检查小数位" tabindex="-1"><a class="header-anchor" href="#_3-1-检查小数位"><span>3.1. 检查小数位</span></a></h3><p>最直接的方法之一是检查_BigDecimal_的小数位。<strong>我们可以确定给定的数字是否包含小数点，并假设它之后有一些值。</strong> 这种技术在大多数情况下都是有效的。然而，它只是确定小数点的存在，而不是数字是否包含非零值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>doubles <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.00</span><span class="token punctuation">,</span> <span class="token number">2.000</span><span class="token punctuation">,</span> <span class="token number">3.0000</span><span class="token punctuation">,</span>
  <span class="token number">4.00000</span><span class="token punctuation">,</span> <span class="token number">5.000000</span><span class="token punctuation">,</span> <span class="token number">6.00000000</span><span class="token punctuation">,</span>
  <span class="token number">7.000000000</span><span class="token punctuation">,</span> <span class="token number">8.0000000000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenCheckScaleThenItGreaterThanZero</span><span class="token punctuation">(</span><span class="token keyword">double</span> given<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>decimal<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>decimal<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> given<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这个例子中，数字0.0的小数位等于一。</strong> 如果我们基于小数位值来转换行为，我们可能会遇到一些边缘情况。</p><h3 id="_3-2-定义舍入" tabindex="-1"><a class="header-anchor" href="#_3-2-定义舍入"><span>3.2. 定义舍入</span></a></h3><p>如果丢失精度是可以接受的，我们可以将小数位设置为零，并确定舍入策略。<strong>这比简单的_intValue()_调用有优势。</strong> 我们将明确定义舍入行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>doubles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToIntegerWithRoundingUpThenLosePrecision</span><span class="token punctuation">(</span><span class="token keyword">double</span> given<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> integerValue <span class="token operator">=</span> decimal<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">CEILING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> actual <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>integerValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以使用_RoundingMode_枚举来定义规则。</strong> 它为我们提供了几种预定义的策略，以获得对转换过程的更多控制。</p><h2 id="_4-防止溢出" tabindex="-1"><a class="header-anchor" href="#_4-防止溢出"><span>4. 防止溢出</span></a></h2><p>溢出问题则不同。虽然对于应用程序来说，丢失精度可能是可以接受的，但得到一个完全错误的数字是永远不可接受的。</p><h3 id="_4-1-范围检查" tabindex="-1"><a class="header-anchor" href="#_4-1-范围检查"><span>4.1. 范围检查</span></a></h3><p>我们可以检查是否可以将_BigDecimal_值适应到_int_中。如果我们能做到，我们就使用_intValue()<em>转换。否则，我们可以使用一个默认值，例如最小的或最大的_int</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>longs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToIntegerThenSetTheMaxOrMinValue</span><span class="token punctuation">(</span><span class="token keyword">long</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> tooBig <span class="token operator">=</span> <span class="token function">isTooBig</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> tooSmall <span class="token operator">=</span> <span class="token function">isTooSmall</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> actual<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tooBig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tooSmall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> decimal<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>tooBig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>actual <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>tooSmall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>actual <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token operator">!</span>tooBig <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tooSmall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>actual <span class="token operator">==</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果无法确定一个合理的默认值，我们可以抛出一个异常。<em>BigDecimal</em> API已经为我们提供了一个类似的方法。</p><h3 id="_4-2-精确值" tabindex="-1"><a class="header-anchor" href="#_4-2-精确值"><span>4.2. 精确值</span></a></h3><p><strong>BigDecimal有一个更安全的_intValue()_版本——<em>intValueExact().</em></strong> 这个方法在任何十进制部分溢出时都会抛出_ArithmeticException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>longs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLargeBigDecimalWhenConvertToExactIntegerThenThrowException</span><span class="token punctuation">(</span><span class="token keyword">long</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> decimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span>decimal<span class="token operator">::</span><span class="token function">intValueExact</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们可以确保我们的应用程序将处理溢出，并且不允许不正确的状态。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>数值转换可能听起来很简单，但即使是简单的转换也可能在应用程序中引入难以调试的问题。因此，我们应该小心处理缩小转换，并始终考虑精度损失和溢出。</p><p><em>BigDecimal</em> 提供了各种方便的方法来简化转换，并让我们对过程有更多的控制。</p><p>像往常一样，本教程的所有代码都可以在GitHub上找到。</p>`,42),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-24-Converting BigDecimal to Integer in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-24/2024-06-24-Converting%20BigDecimal%20to%20Integer%20in%20Java.html","title":"Java中将BigDecimal转换为Integer","lang":"zh-CN","frontmatter":{"date":"2024-06-24T00:00:00.000Z","category":["Java","BigDecimal"],"tag":["BigDecimal","Integer","Conversion"],"head":[["meta",{"name":"keywords","content":"Java, BigDecimal, Integer, Conversion"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-24/2024-06-24-Converting%20BigDecimal%20to%20Integer%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将BigDecimal转换为Integer"}],["meta",{"property":"og:description","content":"Java中将BigDecimal转换为Integer 1. 概述 BigDecimal 旨在处理浮点数。它提供了一种便捷的方式来管理精度，并且最重要的是，它处理了舍入误差。 然而，在某些情况下，我们需要将其作为简单的整数来处理，并且将其转换为_Integer_或_int_。在本教程中，我们将学习如何正确进行转换，并理解转换背后的一些问题。 2. 缩小转..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T14:51:11.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"BigDecimal"}],["meta",{"property":"article:tag","content":"Integer"}],["meta",{"property":"article:tag","content":"Conversion"}],["meta",{"property":"article:published_time","content":"2024-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T14:51:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将BigDecimal转换为Integer\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T14:51:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将BigDecimal转换为Integer 1. 概述 BigDecimal 旨在处理浮点数。它提供了一种便捷的方式来管理精度，并且最重要的是，它处理了舍入误差。 然而，在某些情况下，我们需要将其作为简单的整数来处理，并且将其转换为_Integer_或_int_。在本教程中，我们将学习如何正确进行转换，并理解转换背后的一些问题。 2. 缩小转..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 缩小转换","slug":"_2-缩小转换","link":"#_2-缩小转换","children":[{"level":3,"title":"2.1. 截断","slug":"_2-1-截断","link":"#_2-1-截断","children":[]},{"level":3,"title":"2.2. 溢出","slug":"_2-2-溢出","link":"#_2-2-溢出","children":[]}]},{"level":2,"title":"3. 精度损失","slug":"_3-精度损失","link":"#_3-精度损失","children":[{"level":3,"title":"3.1. 检查小数位","slug":"_3-1-检查小数位","link":"#_3-1-检查小数位","children":[]},{"level":3,"title":"3.2. 定义舍入","slug":"_3-2-定义舍入","link":"#_3-2-定义舍入","children":[]}]},{"level":2,"title":"4. 防止溢出","slug":"_4-防止溢出","link":"#_4-防止溢出","children":[{"level":3,"title":"4.1. 范围检查","slug":"_4-1-范围检查","link":"#_4-1-范围检查","children":[]},{"level":3,"title":"4.2. 精确值","slug":"_4-2-精确值","link":"#_4-2-精确值","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719240671000,"updatedTime":1719240671000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.49,"words":1347},"filePathRelative":"posts/baeldung/2024-06-24/2024-06-24-Converting BigDecimal to Integer in Java.md","localizedDate":"2024年6月24日","excerpt":"\\n<h2>1. 概述</h2>\\n<p><em>BigDecimal</em> 旨在处理浮点数。它提供了一种便捷的方式来管理精度，并且最重要的是，它处理了舍入误差。</p>\\n<p>然而，在某些情况下，我们需要将其作为简单的整数来处理，并且将其转换为_Integer_或_int_。在本教程中，我们将学习如何正确进行转换，并理解转换背后的一些问题。</p>\\n<h2>2. 缩小转换</h2>\\n<p><em>BigDecimal</em> 可以存储比_Integer_或_int_更广泛的数字范围。这通常可能导致在转换过程中丢失精度。</p>\\n<h3>2.1. 截断</h3>\\n<p><em>BigDecimal</em> 提供了_intValue()<em>方法，可以将BigDecimal转换为_int</em>：</p>","autoDesc":true}');export{r as comp,d as data};
