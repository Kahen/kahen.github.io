import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DNwYcgl6.js";const p={},e=t('<h1 id="在project-reactor中处理异常" tabindex="-1"><a class="header-anchor" href="#在project-reactor中处理异常"><span>在Project Reactor中处理异常</span></a></h1><p>在本教程中，我们将探讨在Project Reactor中处理异常的几种方式。代码示例中引入的操作符在_Mono_和_Flux_类中都有定义。然而，<strong>我们将只关注_Flux_类中的方法</strong>。</p><h2 id="_2-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-maven依赖"><span>2. Maven依赖</span></a></h2><p>让我们从添加Reactor核心依赖开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`io.projectreactor`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`reactor-core`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.6.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-在流水线操作符中直接抛出异常" tabindex="-1"><a class="header-anchor" href="#_3-在流水线操作符中直接抛出异常"><span>3. 在流水线操作符中直接抛出异常</span></a></h2><p>处理_Exception_的最简单的方式是通过抛出它。如果在处理流元素期间发生了异常情况，我们可以像执行普通方法一样使用_throw_关键字抛出一个_Exception_。</p><p>假设我们需要将流中的_String_转换为_Integer_。如果某个元素不是数字_String_，我们需要抛出一个_Exception_。</p><p>通常我们会使用_map_操作符来进行这样的转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Function</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` mapper <span class="token operator">=</span> input <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` inFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` outFlux <span class="token operator">=</span> inFlux<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，如果输入元素无效，操作符就会抛出一个_Exception_。当我们这样抛出_Exception_时，<strong>Reactor会捕获它并向下游发出错误信号</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>outFlux<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectError</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个解决方案是可行的，但并不优雅。正如Reactive Streams规范2.13规则所指定的，操作符必须正常返回。Reactor通过将_Exception_转换为错误信号来帮助我们。然而，我们可以做得更好。</p><p>本质上，<strong>响应式流依赖于_onError_方法来指示失败条件</strong>。在大多数情况下，这种情况<strong>必须由对_Publisher_的_error_方法的调用触发</strong>。对于这个用例使用_Exception_将我们带回了传统的编程方式。</p><h2 id="_4-在-handle-操作符中处理异常" tabindex="-1"><a class="header-anchor" href="#_4-在-handle-操作符中处理异常"><span>4. 在_handle_操作符中处理异常</span></a></h2><p>与_map_操作符类似，我们可以使用_handle_操作符逐个处理流中的项目。不同之处在于，<strong>Reactor为_handle_操作符提供了一个输出接收器</strong>，允许我们应用更复杂的转换。</p><p>让我们更新前一节的示例，使用_handle_操作符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SynchronousSink</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">,</span> sink<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sink<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        sink<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` inFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` outFlux <span class="token operator">=</span> inFlux<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与_map_操作符不同，<strong>_handle_操作符接收一个函数式消费者，每个元素调用一次</strong>。这个消费者有两个参数：来自上游的元素和一个_SynchronousSink_，用于构建要发送到下游的输出。</p><p>如果输入元素是数字_String_，我们在接收器上调用_next_方法，并提供从输入转换而来的_Integer_。如果它不是数字_String_，我们将通过在接收器上调用_error_方法并传递一个_Exception_对象来指示情况。</p><p>请注意，<strong>调用_error_方法将取消对上游的订阅，并在下游调用_onError_方法</strong>。_error_和_onError_的这种协作是响应式流中处理_Exception_的标准方式。</p><p>让我们验证输出流：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>outFlux<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectError</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-在-flatmap-操作符中处理异常" tabindex="-1"><a class="header-anchor" href="#_5-在-flatmap-操作符中处理异常"><span>5. 在_flatMap_操作符中处理异常</span></a></h2><p><strong>另一个常用且支持错误处理的操作符是_flatMap_</strong>。这个操作符将输入元素转换为_Publisher_s，然后将_Publisher_s展平为一个新的流。我们可以利用这些_Publisher_s来表示错误状态。</p><p>让我们尝试使用_flatMap_进行相同的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Publisher</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> mapper <span class="token operator">=</span> input <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` inFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` outFlux <span class="token operator">=</span> inFlux<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>outFlux<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectError</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不出所料，结果与之前相同。</p><p>注意**_handle_和_flatMap_在错误处理方面的唯一区别在于_handle_操作符在接收器上调用_error_方法，而_flatMap_在_Publisher_上调用它**。</p><p><strong>如果我们处理的流由_Flux_对象表示，我们还可以使用_concatMap_来处理错误</strong>。这个方法的行为与_flatMap_非常相似，但它不支持异步处理。</p><h2 id="_6-避免-nullpointerexception" tabindex="-1"><a class="header-anchor" href="#_6-避免-nullpointerexception"><span>6. 避免_NullPointerException_</span></a></h2><p>本节涵盖了处理_null_引用的处理，这经常导致_NullPointerException_s，这是Java中常见的_Exception_。为了避免这种异常，我们通常会将变量与_null_进行比较，如果该变量实际上是_null_，则将执行引导到不同的方式。在响应式流中做同样的事情可能很诱人：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Function</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` mapper <span class="token operator">=</span> input <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可能认为，因为我们已经处理了输入值为_null_的情况，所以_NullPointerException_不会发生。然而，实际情况告诉我们一个不同的故事：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` inFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Flux</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` outFlux <span class="token operator">=</span> inFlux<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>outFlux<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">expectError</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，<strong>一个_NullPointerException_触发了下游的错误，这意味着我们的_null_检查没有起作用</strong>。</p><p>要理解为什么会发生这种情况，我们需要回顾Reactive Streams规范。规范的2.13规则规定，“调用_onSubscribe_、<em>onNext</em>、<em>onError_或_onComplete_时，除非提供的参数是_null</em>，否则必须正常返回，如果参数是_null_，则必须向调用者抛出_java.lang.NullPointerException_”。</p><p><strong>根据规范的要求，当一个_null_值到达_map_函数时，Reactor会抛出一个_NullPointerException_</strong>。</p><p>因此，当一个_null_值到达某个流时，我们无法处理它或在将其传递给下游之前将其转换为非_null_值。因此，<strong>避免_NullPointerException_的唯一方法是确保_null_值不会进入管道</strong>。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们走过了Project Reactor中的_Exception_处理。我们讨论了一些示例并澄清了过程。我们还涵盖了在处理响应式流时可能发生的一个特殊情况的异常 — <em>NullPointerException</em>。</p><p>像往常一样，我们应用程序的源代码可以在GitHub上找到。</p>',42),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-26-Handling Exceptions in Project Reactor.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Handling%20Exceptions%20in%20Project%20Reactor.html","title":"在Project Reactor中处理异常","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Reactive Programming"],"tag":["Project Reactor","Exception Handling"],"head":[["meta",{"name":"keywords","content":"Reactive Streams, Exception Handling, Java, Project Reactor"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Handling%20Exceptions%20in%20Project%20Reactor.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Project Reactor中处理异常"}],["meta",{"property":"og:description","content":"在Project Reactor中处理异常 在本教程中，我们将探讨在Project Reactor中处理异常的几种方式。代码示例中引入的操作符在_Mono_和_Flux_类中都有定义。然而，我们将只关注_Flux_类中的方法。 2. Maven依赖 让我们从添加Reactor核心依赖开始： 3. 在流水线操作符中直接抛出异常 处理_Exception_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T14:57:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Project Reactor"}],["meta",{"property":"article:tag","content":"Exception Handling"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T14:57:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Project Reactor中处理异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T14:57:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Project Reactor中处理异常 在本教程中，我们将探讨在Project Reactor中处理异常的几种方式。代码示例中引入的操作符在_Mono_和_Flux_类中都有定义。然而，我们将只关注_Flux_类中的方法。 2. Maven依赖 让我们从添加Reactor核心依赖开始： 3. 在流水线操作符中直接抛出异常 处理_Exception_..."},"headers":[{"level":2,"title":"2. Maven依赖","slug":"_2-maven依赖","link":"#_2-maven依赖","children":[]},{"level":2,"title":"3. 在流水线操作符中直接抛出异常","slug":"_3-在流水线操作符中直接抛出异常","link":"#_3-在流水线操作符中直接抛出异常","children":[]},{"level":2,"title":"4. 在_handle_操作符中处理异常","slug":"_4-在-handle-操作符中处理异常","link":"#_4-在-handle-操作符中处理异常","children":[]},{"level":2,"title":"5. 在_flatMap_操作符中处理异常","slug":"_5-在-flatmap-操作符中处理异常","link":"#_5-在-flatmap-操作符中处理异常","children":[]},{"level":2,"title":"6. 避免_NullPointerException_","slug":"_6-避免-nullpointerexception","link":"#_6-避免-nullpointerexception","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722005871000,"updatedTime":1722005871000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.82,"words":1445},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Handling Exceptions in Project Reactor.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探讨在Project Reactor中处理异常的几种方式。代码示例中引入的操作符在_Mono_和_Flux_类中都有定义。然而，<strong>我们将只关注_Flux_类中的方法</strong>。</p>\\n<h2>2. Maven依赖</h2>\\n<p>让我们从添加Reactor核心依赖开始：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`io.projectreactor`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`reactor-core`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`3.6.0`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
