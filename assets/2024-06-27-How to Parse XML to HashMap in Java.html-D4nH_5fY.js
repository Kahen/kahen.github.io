import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CseMoHkL.js";const e={},p=t('<hr><h1 id="如何在java中将xml解析到hashmap" tabindex="-1"><a class="header-anchor" href="#如何在java中将xml解析到hashmap"><span>如何在Java中将XML解析到HashMap</span></a></h1><p>XML是互联网上流行的数据交换格式之一。在处理XML数据时，通常需要将其转换为更易于进一步处理的格式。</p><p>在本教程中，我们将探讨将XML解析到_HashMap_的不同方法，这是一种允许有效数据检索和操作的数据结构。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>我们将使用不同的库将以下XML解析到_HashMap_：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;employees&gt;`\n    ``&lt;employee&gt;``\n        ``&lt;id&gt;``654``&lt;/id&gt;``\n        ``&lt;firstName&gt;``John``&lt;/firstName&gt;``\n        ``&lt;lastName&gt;``Doe``&lt;/lastName&gt;``\n    ``&lt;/employee&gt;``\n    ``&lt;employee&gt;``\n        ``&lt;id&gt;``776``&lt;/id&gt;``\n        ``&lt;firstName&gt;``Steve``&lt;/firstName&gt;``\n        ``&lt;lastName&gt;``Smith``&lt;/lastName&gt;``\n    ``&lt;/employee&gt;``\n`&lt;/employees&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们使用下面的POJO来存储XML数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n\n    <span class="token comment">// 标准getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将设置我们的通用测试方法来验证所有案例的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>`` employeeMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Employee</span> employee1 <span class="token operator">=</span> employeeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;654&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Employee</span> employee2 <span class="token operator">=</span> employeeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;776&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> employee1<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> employee1<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Steve&quot;</span><span class="token punctuation">,</span> employee2<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span> employee2<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用xstream解析xml" tabindex="-1"><a class="header-anchor" href="#_3-使用xstream解析xml"><span>3. 使用XStream解析XML</span></a></h2><p>XStream是一个第三方库，用于将对象序列化和反序列化到XML。<strong>通过最少的配置，XStream提供了解析XML数据的能力</strong>。</p><p>我们将使用以下Maven依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`````&lt;dependency&gt;`````\n    `````&lt;groupId&gt;`````com.thoughtworks.xstream`````&lt;/groupId&gt;`````\n    `````&lt;artifactId&gt;`````xstream`````&lt;/artifactId&gt;`````\n    ```&lt;version&gt;```1.4.18```&lt;/version&gt;```\n`````&lt;/dependency&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将<strong>创建一个新的_XStream_实例</strong>并设置一些别名：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XStream</span> xStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxStream<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;employees&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxStream<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为XML中的_employees_元素设置别名，以便被解释为_List_。我们还为_employee_元素设置别名，以便被解释为_Employee_对象。</p><p>我们将<strong>添加权限以允许任何类型被反序列化</strong>，这是XStream将XML反序列化为对象列表所必需的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>xStream<span class="token punctuation">.</span><span class="token function">addPermission</span><span class="token punctuation">(</span><span class="token class-name">AnyTypePermission</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们<strong>使用XStream的_fromXML()_方法将XML字符串解析为_Employee_对象列表</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>```` employees <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">)</span> xStream<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们<strong>使用流将员工列表转换为_Map_</strong>，使用_id_作为键，员工对象本身作为值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-使用underscore-java解析xml" tabindex="-1"><a class="header-anchor" href="#_4-使用underscore-java解析xml"><span>4. 使用Underscore-java解析XML</span></a></h2><p>Underscore-java是一个实用程序库，提供了一系列函数编程和数据操作功能。它需要Java 11或更高版本。</p><p>我们将使用以下Maven依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`````&lt;dependency&gt;`````\n    `````&lt;groupId&gt;`````com.github.javadev`````&lt;/groupId&gt;`````\n    `````&lt;artifactId&gt;`````underscore`````&lt;/artifactId&gt;`````\n    ```&lt;version&gt;```1.89```&lt;/version&gt;```\n`````&lt;/dependency&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们使用<strong>Underscore-java的_fromXmlMap()_函数解析XML字符串并将其转换为嵌套的映射结构</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` employeeList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>```<span class="token punctuation">)</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">fromXmlMap</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;employees&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span><span class="token punctuation">)</span> employeeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">parseXmlToMap</span><span class="token punctuation">(</span>employeeMap<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从结果映射中提取_employees_元素。然后我们将结果的_LinkedHashMap_转换为_HashMap_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">parseXmlToMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>`` employeeMap<span class="token punctuation">,</span> <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>empMap <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` key <span class="token operator">:</span> empMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;id&quot;</span><span class="token operator">:</span>\n                    employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;firstName&quot;</span><span class="token operator">:</span>\n                    employee<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;lastName&quot;</span><span class="token operator">:</span>\n                    employee<span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">default</span><span class="token operator">:</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        employeeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们有了嵌套的映射结构，我们就迭代列表中的每个_LinkedHashMap_，表示单个员工的数据。然后我们创建一个新的_Employee_对象，并根据映射中的数据填充其字段。</p><h2 id="_5-使用jackson解析xml" tabindex="-1"><a class="header-anchor" href="#_5-使用jackson解析xml"><span>5. 使用Jackson解析XML</span></a></h2><p>Jackson是一个Java库，它使用注释或可定制的配置将XML元素和属性映射到Java对象。</p><p>我们将使用以下Maven依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`````&lt;dependency&gt;`````\n    `````&lt;groupId&gt;`````com.fasterxml.jackson.core`````&lt;/groupId&gt;`````\n    `````&lt;artifactId&gt;`````jackson-databind`````&lt;/artifactId&gt;`````\n`````&lt;/dependency&gt;`````\n`````&lt;dependency&gt;`````\n    `````&lt;groupId&gt;`````com.fasterxml.jackson.dataformat`````&lt;/groupId&gt;`````\n    `````&lt;artifactId&gt;`````jackson-dataformat-xml`````&lt;/artifactId&gt;`````\n`````&lt;/dependency&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_XmlMapper_是一个专门用于XML数据的映射器，它允许我们读写XML：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XmlMapper</span> xmlMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` map <span class="token operator">=</span> xmlMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>xml<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们读取XML数据并将其转换为键值对的映射。**Jackson动态解析XML并构建相应的映射结构。**我们从映射中提取员工元素列表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们可以使用之前定义的相同的_parseXmlToMap()_方法提取员工的映射。</p><h2 id="_6-使用jaxb解析xml" tabindex="-1"><a class="header-anchor" href="#_6-使用jaxb解析xml"><span>6. 使用JAXB解析XML</span></a></h2><p>JAXB是Java XML绑定架构，它支持一个绑定框架，使用注释将XML元素和属性映射到Java。</p><p>我们将使用以下Maven依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`````&lt;dependency&gt;`````\n    `````&lt;groupId&gt;`````com.sun.xml.bind`````&lt;/groupId&gt;`````\n    `````&lt;artifactId&gt;`````jaxb-impl`````&lt;/artifactId&gt;`````\n    ```&lt;version&gt;```2.3.3```&lt;/version&gt;```\n`````&lt;/dependency&gt;`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们设置_Employees_类，并使用以下注释帮助将其绑定到Java对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@XmlRootElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employees&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employees</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>```` employeeList<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">getEmployeeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> employeeList<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 标准setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建一个**<em>JAXBContext</em>，用于管理XML数据和Java对象之间的绑定**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JAXBContext</span> context <span class="token operator">=</span> <span class="token class-name">JAXBContext</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Employees</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Unmarshaller</span> unmarshaller <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Employees</span> employees <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employees</span><span class="token punctuation">)</span> unmarshaller<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>_Unmarshaller_负责根据JAXB注释在类中定义的映射将XML数据转换为对象。</strong></p><p>我们使用Java流将员工列表转换为_Map_，使用_id_作为键，员工对象本身作为值，如前一节所示。</p><h2 id="_7-使用dom解析器和xpath解析xml" tabindex="-1"><a class="header-anchor" href="#_7-使用dom解析器和xpath解析xml"><span>7. 使用DOM解析器和XPath解析XML</span></a></h2><p><strong>DOM解析器是一种无需第三方库即可解析XML的方法</strong>。DOM解析器支持XPath，用于浏览XML并提取数据。</p><p>让我们创建一个用于生产DOM解析器的工厂，这将用于解析XML文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DocumentBuilderFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">DocumentBuilder</span> builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Document</span> doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用负责构建XML的DOM表示的构建器将XML数据解析为_Document_对象。</p><p>然后我们将设置一个_XPath_实例来查询DOM：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XPathFactory</span> xPathfactory <span class="token operator">=</span> <span class="token class-name">XPathFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">XPath</span> xpath <span class="token operator">=</span> xPathfactory<span class="token punctuation">.</span><span class="token function">newXPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">XPathExpression</span> xPathExpr <span class="token operator">=</span> xpath<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;/employees/employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们配置一个_XPath_实例，编译一个_XPath_表达式，选择XML文档中_employees_元素内的所有_employee_元素。</p><p>让我们在_doc_上评估_XPath_表达式以检索包含所有匹配员工元素的_NodeList_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">NodeList</span> nodes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NodeList</span><span class="token punctuation">)</span> xPathExpr<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token class-name">XPathConstants</span><span class="token punctuation">.</span><span class="token constant">NODESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们迭代_NodeList_并将员工元素提取到_HashMap_中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Element</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> nodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;lastName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们探讨了将XML解析到_HashMap_的多种方法，这是一种存储键值对的基本数据结构。</p><p>XStream和Underscore以其最少的配置，是简单XML解析的理想选择。</p><p>Jackson将XML元素映射到Java对象</p>',68),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","2024-06-27-How to Parse XML to HashMap in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Parse%20XML%20to%20HashMap%20in%20Java.html","title":"如何在Java中将XML解析到HashMap","lang":"zh-CN","frontmatter":{"date":"2024-06-27T00:00:00.000Z","category":["Java","XML"],"tag":["XML解析","HashMap"],"head":[["meta",{"name":"keywords","content":"Java, XML, HashMap, 解析"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Parse%20XML%20to%20HashMap%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在Java中将XML解析到HashMap"}],["meta",{"property":"og:description","content":"如何在Java中将XML解析到HashMap XML是互联网上流行的数据交换格式之一。在处理XML数据时，通常需要将其转换为更易于进一步处理的格式。 在本教程中，我们将探讨将XML解析到_HashMap_的不同方法，这是一种允许有效数据检索和操作的数据结构。 2. 设置 我们将使用不同的库将以下XML解析到_HashMap_： 让我们使用下面的POJO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T04:52:43.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"XML解析"}],["meta",{"property":"article:tag","content":"HashMap"}],["meta",{"property":"article:published_time","content":"2024-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T04:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在Java中将XML解析到HashMap\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T04:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在Java中将XML解析到HashMap XML是互联网上流行的数据交换格式之一。在处理XML数据时，通常需要将其转换为更易于进一步处理的格式。 在本教程中，我们将探讨将XML解析到_HashMap_的不同方法，这是一种允许有效数据检索和操作的数据结构。 2. 设置 我们将使用不同的库将以下XML解析到_HashMap_： 让我们使用下面的POJO..."},"headers":[{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[]},{"level":2,"title":"3. 使用XStream解析XML","slug":"_3-使用xstream解析xml","link":"#_3-使用xstream解析xml","children":[]},{"level":2,"title":"4. 使用Underscore-java解析XML","slug":"_4-使用underscore-java解析xml","link":"#_4-使用underscore-java解析xml","children":[]},{"level":2,"title":"5. 使用Jackson解析XML","slug":"_5-使用jackson解析xml","link":"#_5-使用jackson解析xml","children":[]},{"level":2,"title":"6. 使用JAXB解析XML","slug":"_6-使用jaxb解析xml","link":"#_6-使用jaxb解析xml","children":[]},{"level":2,"title":"7. 使用DOM解析器和XPath解析XML","slug":"_7-使用dom解析器和xpath解析xml","link":"#_7-使用dom解析器和xpath解析xml","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1719463963000,"updatedTime":1719463963000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.97,"words":1490},"filePathRelative":"posts/baeldung/2024-06-27/2024-06-27-How to Parse XML to HashMap in Java.md","localizedDate":"2024年6月27日","excerpt":"<hr>\\n<h1>如何在Java中将XML解析到HashMap</h1>\\n<p>XML是互联网上流行的数据交换格式之一。在处理XML数据时，通常需要将其转换为更易于进一步处理的格式。</p>\\n<p>在本教程中，我们将探讨将XML解析到_HashMap_的不同方法，这是一种允许有效数据检索和操作的数据结构。</p>\\n<h2>2. 设置</h2>\\n<p>我们将使用不同的库将以下XML解析到_HashMap_：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>`&lt;employees&gt;`\\n    ``&lt;employee&gt;``\\n        ``&lt;id&gt;``654``&lt;/id&gt;``\\n        ``&lt;firstName&gt;``John``&lt;/firstName&gt;``\\n        ``&lt;lastName&gt;``Doe``&lt;/lastName&gt;``\\n    ``&lt;/employee&gt;``\\n    ``&lt;employee&gt;``\\n        ``&lt;id&gt;``776``&lt;/id&gt;``\\n        ``&lt;firstName&gt;``Steve``&lt;/firstName&gt;``\\n        ``&lt;lastName&gt;``Smith``&lt;/lastName&gt;``\\n    ``&lt;/employee&gt;``\\n`&lt;/employees&gt;`\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
