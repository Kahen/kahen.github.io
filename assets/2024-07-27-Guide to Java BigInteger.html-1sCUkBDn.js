import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-0nXvcScy.js";const e={},p=t(`<hr><h1 id="java-biginteger-指南" tabindex="-1"><a class="header-anchor" href="#java-biginteger-指南"><span>Java BigInteger 指南</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>Java 提供了一些基本类型，如 <code>int</code> 或 <code>long</code>，用于执行整数运算。但有时，我们需要存储的数字会超出这些数据类型的可用限制。</p><p>在本教程中，我们将更深入地了解 <code>BigInteger</code> 类。我们将通过查看源代码来检查其结构，并回答这个问题——<strong>如何可能存储超出可用基本数据类型限制的大数字？</strong></p><h2 id="_2-biginteger-类" tabindex="-1"><a class="header-anchor" href="#_2-biginteger-类"><span>2. <code>BigInteger</code> 类</span></a></h2><p>众所周知，<code>BigInteger</code> 类用于涉及比基本 <code>long</code> 类型更大的非常大的整数计算的数学运算。它<strong>表示不可变的任意精度整数</strong>。</p><p>在进一步讨论之前，让我们记住，在 Java 中所有字节都使用<strong>二进制补码系统</strong>并以<strong>大端序表示</strong>。它将一个字的最重要字节存储在最小的内存地址（最低索引）。此外，字节的最高位也是符号位。让我们检查一些示例字节值：</p><ul><li><code>1000 0000</code> 表示 <code>-128</code></li><li><code>0111 1111</code> 表示 127</li><li><code>1111 1111</code> 表示 <code>-1</code></li></ul><p>现在，让我们检查源代码并解释它如何存储超出基本数据类型限制的给定数字。</p><h3 id="_2-1-int-signum" tabindex="-1"><a class="header-anchor" href="#_2-1-int-signum"><span>2.1. <code>int signum</code></span></a></h3><p><code>signum</code> 属性<strong>确定 <code>BigInteger</code> 的符号</strong>。三个整数值表示值的符号：<code>-1</code> 表示负数，<code>0</code> 表示零，<code>1</code> 表示正数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们注意，<code>BigInteger.ZERO</code> <strong>必须有 <code>signum</code> 的 <code>0</code></strong> 由于大小数组。这个值确保每个 <code>BigInteger</code> 值<strong>恰好有一种表示</strong>。</p><h3 id="_2-2-int-mag" tabindex="-1"><a class="header-anchor" href="#_2-2-int-mag"><span>2.2. <code>int[] mag</code></span></a></h3><p><code>BigInteger</code> 类的所有魔力始于 <code>mag</code> 属性。它<strong>使用二进制表示将给定值存储在数组中</strong>，这允许省略基本数据类型限制。</p><p>此外，<code>BigInteger</code> <strong>将它们分组为 32 位部分</strong>——一组四个字节。因此，类定义中的大小内部声明为 <code>int</code> 数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mag<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个数组<strong>以大端序表示</strong>持有给定值的大小。这个数组的零元素是大小的最重要 <code>int</code>。让我们使用 <code>BigInteger(byte[] bytes)</code> 来检查它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0b1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0b10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0b100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造函数将包含二进制补码二进制表示的给定字节数组转换为值。</p><p>由于有符号-大小变量（<code>signum</code>），我们<strong>不使用第一个位作为值的符号位</strong>。让我们快速检查它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 1000 0000</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;128&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;-128&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>BigInteger(int signum, byte[] magnitude)</code> 构造函数创建了两个不同的值。它将符号-大小表示转换为 <code>BigInteger</code>。我们重用了相同的字节数组，只改变了符号值。</p><p>我们还可以使用方法 <code>toString(int radix)</code> 打印大小：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;10000000&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;-10000000&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，对于负值，添加了负号。</p><p>最后，<strong>大小的最显著 <code>int</code> 必须非零</strong>。这意味着 <code>BigInteger.ZERO</code> 有一个零长度的 mag 数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将跳过检查其他属性。它们被标记为已弃用，因为冗余，仅用作内部缓存。</p><p>让我们现在直接进行更复杂的例子，并检查 <code>BigInteger</code> 如何存储超过基本数据类型的数字。</p><h2 id="_3-大于-long-max-value-的-biginteger" tabindex="-1"><a class="header-anchor" href="#_3-大于-long-max-value-的-biginteger"><span>3. 大于 <code>Long.MAX_VALUE</code> 的 <code>BigInteger</code></span></a></h2><p>正如我们已经知道的，<strong><code>long</code> 数据类型是一个 64 位二进制补码整数</strong>。有符号的长整数的最小值是 -263 <code>(1000 0000 … 0000)</code>，最大值是 263-1 <code>(0111 1111 … 1111)</code>。要创建超出这些限制的数字，我们需要使用 <code>BigInteger</code> 类。</p><p>现在让我们创建一个比 <code>Long.MAX_VALUE</code> 大一个的值，等于 263。根据前一章的信息，它需要：</p><ul><li><code>signum</code> 属性设置为 1，</li><li><code>mag</code> 数组，总共 64 位，其中只有最高位设置 <code>(1000 0000 … 0000)</code>。</li></ul><p>首先，让我们使用 <code>setBit(int n)</code> 函数创建一个 <code>BigInteger</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span> bi1 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> bi1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> bi1<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bi1<span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;9223372036854775808&quot;</span><span class="token punctuation">,</span> bi1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">,</span> bi1<span class="token punctuation">.</span><span class="token function">substract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^10{63}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000 0000 ... 0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住，在二进制表示系统中，位从右到左按顺序排列，从 0 开始。虽然 <code>BigInteger.ZERO</code> 有一个空的大小数组，但设置第 63 位使其同时成为最重要的——64 长度数组的零元素。<code>_signum_</code> 自动设置为一。</p><p>另一方面，相同的位序列由 <code>Long.MIN_VALUE</code> 表示。让我们将这个常量转换为 <code>byte[]</code> 数组并构造 <code>BigInteger</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">BYTES</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInteger</span> bi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>bi1<span class="token punctuation">,</span> bi2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，这两个值是相等的，因此相同的断言集适用。</p><p>最后，我们可以检查内部的 <code>int[]</code> <em>mag</em> 变量。目前，Java 不提供 API 来获取这个值，但我们可以通过调试器中的评估工具来做：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/07/bael_4920_1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们使用两个整数，两个 32 位的包将我们的值存储在数组中。零元素等于 <code>Integer.MIN_VALUE</code>，另一个是零。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在这个简短的教程中，我们专注于 <code>BigInteger</code> 类的实现细节。我们首先回顾了一些关于数字、基本类型和二进制表示规则的信息。</p><p>然后我们检查了 <code>BigInteger</code> 的源代码。我们检查了 <code>signum</code> 和 <code>mag</code> 属性。我们还学习了 <code>BigInteger</code> 如何存储给定的值，允许我们提供比基本数据类型更大的数字。</p><p>像往常一样，我们可以在 GitHub 上找到所有的代码片段和测试。</p>`,48),o=[p];function c(i,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-27-Guide to Java BigInteger.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-27/2024-07-27-Guide%20to%20Java%20BigInteger.html","title":"Java BigInteger 指南","lang":"zh-CN","frontmatter":{"date":"2021-07-01T00:00:00.000Z","category":["Java","BigInteger"],"tag":["Java","BigInteger"],"head":[["meta",{"name":"keywords","content":"Java, BigInteger, 数学运算, 大整数, 任意精度整数"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-27/2024-07-27-Guide%20to%20Java%20BigInteger.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java BigInteger 指南"}],["meta",{"property":"og:description","content":"Java BigInteger 指南 1. 引言 Java 提供了一些基本类型，如 int 或 long，用于执行整数运算。但有时，我们需要存储的数字会超出这些数据类型的可用限制。 在本教程中，我们将更深入地了解 BigInteger 类。我们将通过查看源代码来检查其结构，并回答这个问题——如何可能存储超出可用基本数据类型限制的大数字？ 2. BigI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/07/bael_4920_1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T21:58:31.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"BigInteger"}],["meta",{"property":"article:published_time","content":"2021-07-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T21:58:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java BigInteger 指南\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/07/bael_4920_1.png\\"],\\"datePublished\\":\\"2021-07-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T21:58:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java BigInteger 指南 1. 引言 Java 提供了一些基本类型，如 int 或 long，用于执行整数运算。但有时，我们需要存储的数字会超出这些数据类型的可用限制。 在本教程中，我们将更深入地了解 BigInteger 类。我们将通过查看源代码来检查其结构，并回答这个问题——如何可能存储超出可用基本数据类型限制的大数字？ 2. BigI..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. BigInteger 类","slug":"_2-biginteger-类","link":"#_2-biginteger-类","children":[{"level":3,"title":"2.1. int signum","slug":"_2-1-int-signum","link":"#_2-1-int-signum","children":[]},{"level":3,"title":"2.2. int[] mag","slug":"_2-2-int-mag","link":"#_2-2-int-mag","children":[]}]},{"level":2,"title":"3. 大于 Long.MAX_VALUE 的 BigInteger","slug":"_3-大于-long-max-value-的-biginteger","link":"#_3-大于-long-max-value-的-biginteger","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1722117511000,"updatedTime":1722117511000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.68,"words":1403},"filePathRelative":"posts/baeldung/2024-07-27/2024-07-27-Guide to Java BigInteger.md","localizedDate":"2021年7月1日","excerpt":"<hr>\\n<h1>Java BigInteger 指南</h1>\\n<h2>1. 引言</h2>\\n<p>Java 提供了一些基本类型，如 <code>int</code> 或 <code>long</code>，用于执行整数运算。但有时，我们需要存储的数字会超出这些数据类型的可用限制。</p>\\n<p>在本教程中，我们将更深入地了解 <code>BigInteger</code> 类。我们将通过查看源代码来检查其结构，并回答这个问题——<strong>如何可能存储超出可用基本数据类型限制的大数字？</strong></p>\\n<h2>2. <code>BigInteger</code> 类</h2>","autoDesc":true}');export{k as comp,d as data};
