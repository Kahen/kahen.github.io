import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as p}from"./app-BTwZI-W8.js";const t={},o=p(`<h1 id="java程序计算二次方程的根" tabindex="-1"><a class="header-anchor" href="#java程序计算二次方程的根"><span>Java程序计算二次方程的根</span></a></h1><p>在这篇文章中，我们将看到如何在Java中计算二次方程的解。我们将首先定义什么是二次方程，然后无论是在实数还是复数系统中，我们都会计算它的解。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><h2 id="_2-二次方程的解" tabindex="-1"><a class="header-anchor" href="#_2-二次方程的解"><span>2. 二次方程的解</span></a></h2><p>给定实数a ≠ 0, b和c，让我们考虑以下的二次方程：[ ax^2 + bx + c = 0 ]。</p><h3 id="_2-1-多项式的根" tabindex="-1"><a class="header-anchor" href="#_2-1-多项式的根"><span>2.1. 多项式的根</span></a></h3><p>这个方程的解也被称为多项式[ ax^2 + bx + c ]的根。因此，让我们定义一个_Polynom_类。如果系数_a_等于0，我们将抛出一个_IllegalArgumentException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Polynom</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> a<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> c<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Polynom</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;a不能等于0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters 和 setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在实数系统中解决这个方程：为此，我们将寻找一些_Double_解。</p><h3 id="_2-2-复数系统" tabindex="-1"><a class="header-anchor" href="#_2-2-复数系统"><span>2.2. 复数系统</span></a></h3><p>我们还将展示如何在复数系统中解决这个方程。<strong>Java中没有复数的默认表示</strong>，因此我们将创建我们自己的。让我们给它一个_static_方法_ofReal_，以便于转换实数。这将在接下来的步骤中有所帮助：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> realPart<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> imaginaryPart<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> realPart<span class="token punctuation">,</span> <span class="token keyword">double</span> imaginaryPart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realPart <span class="token operator">=</span> realPart<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imaginaryPart <span class="token operator">=</span> imaginaryPart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Complex</span> <span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> realPart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>realPart<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters 和 setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-计算判别式" tabindex="-1"><a class="header-anchor" href="#_3-计算判别式"><span>3. 计算判别式</span></a></h2><p><strong>Δ = b² – 4ac的数量被称为二次方程的判别式。</strong> 在java中计算b平方有两个解决方案：</p><ul><li>将b乘以自身</li><li>使用_Math.pow_将其提升到2的幂</li></ul><p>让我们坚持第一种方法，并在_Polynom_类中添加一个_getDiscriminant_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-获取解" tabindex="-1"><a class="header-anchor" href="#_4-获取解"><span>4. 获取解</span></a></h2><p>根据判别式的值，我们可以知道存在多少解并计算它们。</p><h3 id="_4-1-严格正的判别式" tabindex="-1"><a class="header-anchor" href="#_4-1-严格正的判别式"><span>4.1. 严格正的判别式</span></a></h3><p><strong>如果判别式严格为正，方程有两个实数解，(-b – √Δ) / 2a 和 (-b + √Δ) / 2a：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Double</span> solution1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Double</span> solution2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在复数系统中工作，那么我们只需要进行转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Complex</span> solution1 <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Complex</span> solution2 <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-判别式等于零" tabindex="-1"><a class="header-anchor" href="#_4-2-判别式等于零"><span>4.2. 判别式等于零</span></a></h3><p><strong>如果判别式等于零，方程有一个唯一的实数解 -b / 2a：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Double</span> solution <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，如果我们在复数系统中工作，我们将以以下方式转换解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Complex</span> solution <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-严格负的判别式" tabindex="-1"><a class="header-anchor" href="#_4-3-严格负的判别式"><span>4.3. 严格负的判别式</span></a></h3><p><strong>如果判别式严格为负，方程在实数系统中没有解。然而，它可以在复数系统中解决：解是(-b – i√-Δ) / 2a 及其共轭(-b + i√-Δ) / 2a：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Complex</span> solution1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Complex</span> solution2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-汇总结果" tabindex="-1"><a class="header-anchor" href="#_4-4-汇总结果"><span>4.4. 汇总结果</span></a></h3><p><strong>总之，让我们构建一个方法，当解存在时，将方程的解填充到一个_List_中。</strong> 在实数系统中，这个方法看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getPolynomRoots</span><span class="token punctuation">(</span><span class="token class-name">Polynom</span> polynom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\` roots <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> discriminant <span class="token operator">=</span> polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>discriminant <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>discriminant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>discriminant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>discriminant <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> roots<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在复数系统中工作，我们将这样写：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Complex</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getPolynomRoots</span><span class="token punctuation">(</span><span class="token class-name">Polynom</span> polynom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Complex</span><span class="token punctuation">&gt;</span></span>\`\` roots <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> discriminant <span class="token operator">=</span> polynom<span class="token punctuation">.</span><span class="token function">getDiscriminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>discriminant <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>discriminant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>discriminant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>discriminant <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">.</span><span class="token function">ofReal</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>discriminant<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        roots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token operator">-</span>polynom<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>discriminant<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> polynom<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> roots<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本教程中，我们看到了如何在Java中解决二次方程，无论是使用实数还是复数。如往常一样，代码可以在GitHub上找到。</p>`,39),e=[o];function c(l,u){return a(),s("div",null,e)}const r=n(t,[["render",c],["__file","2024-07-14-Java Program to Find the Roots of a Quadratic Equation.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-14/2024-07-14-Java%20Program%20to%20Find%20the%20Roots%20of%20a%20Quadratic%20Equation.html","title":"Java程序计算二次方程的根","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","算法"],"tag":["二次方程根","算法实现"],"head":[["meta",{"name":"keywords","content":"Java, 算法, 二次方程, 根, 实现"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-14/2024-07-14-Java%20Program%20to%20Find%20the%20Roots%20of%20a%20Quadratic%20Equation.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java程序计算二次方程的根"}],["meta",{"property":"og:description","content":"Java程序计算二次方程的根 在这篇文章中，我们将看到如何在Java中计算二次方程的解。我们将首先定义什么是二次方程，然后无论是在实数还是复数系统中，我们都会计算它的解。 1. 概述 2. 二次方程的解 给定实数a ≠ 0, b和c，让我们考虑以下的二次方程：[ ax^2 + bx + c = 0 ]。 2.1. 多项式的根 这个方程的解也被称为多项式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-14T23:06:10.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"二次方程根"}],["meta",{"property":"article:tag","content":"算法实现"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-14T23:06:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java程序计算二次方程的根\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-14T23:06:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java程序计算二次方程的根 在这篇文章中，我们将看到如何在Java中计算二次方程的解。我们将首先定义什么是二次方程，然后无论是在实数还是复数系统中，我们都会计算它的解。 1. 概述 2. 二次方程的解 给定实数a ≠ 0, b和c，让我们考虑以下的二次方程：[ ax^2 + bx + c = 0 ]。 2.1. 多项式的根 这个方程的解也被称为多项式..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 二次方程的解","slug":"_2-二次方程的解","link":"#_2-二次方程的解","children":[{"level":3,"title":"2.1. 多项式的根","slug":"_2-1-多项式的根","link":"#_2-1-多项式的根","children":[]},{"level":3,"title":"2.2. 复数系统","slug":"_2-2-复数系统","link":"#_2-2-复数系统","children":[]}]},{"level":2,"title":"3. 计算判别式","slug":"_3-计算判别式","link":"#_3-计算判别式","children":[]},{"level":2,"title":"4. 获取解","slug":"_4-获取解","link":"#_4-获取解","children":[{"level":3,"title":"4.1. 严格正的判别式","slug":"_4-1-严格正的判别式","link":"#_4-1-严格正的判别式","children":[]},{"level":3,"title":"4.2. 判别式等于零","slug":"_4-2-判别式等于零","link":"#_4-2-判别式等于零","children":[]},{"level":3,"title":"4.3. 严格负的判别式","slug":"_4-3-严格负的判别式","link":"#_4-3-严格负的判别式","children":[]},{"level":3,"title":"4.4. 汇总结果","slug":"_4-4-汇总结果","link":"#_4-4-汇总结果","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720998370000,"updatedTime":1720998370000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.22,"words":966},"filePathRelative":"posts/baeldung/2024-07-14/2024-07-14-Java Program to Find the Roots of a Quadratic Equation.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这篇文章中，我们将看到如何在Java中计算二次方程的解。我们将首先定义什么是二次方程，然后无论是在实数还是复数系统中，我们都会计算它的解。</p>\\n<h2>1. 概述</h2>\\n<h2>2. 二次方程的解</h2>\\n<p>给定实数a ≠ 0, b和c，让我们考虑以下的二次方程：[ ax^2 + bx + c = 0 ]。</p>\\n<h3>2.1. 多项式的根</h3>\\n<p>这个方程的解也被称为多项式[ ax^2 + bx + c ]的根。因此，让我们定义一个_Polynom_类。如果系数_a_等于0，我们将抛出一个_IllegalArgumentException_：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Polynom</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">double</span> a<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">double</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">double</span> c<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Polynom</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> c<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"a不能等于0\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>b <span class=\\"token operator\\">=</span> b<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>c <span class=\\"token operator\\">=</span> c<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// getters 和 setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
