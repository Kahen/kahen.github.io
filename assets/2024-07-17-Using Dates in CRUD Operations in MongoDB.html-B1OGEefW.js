import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const e={},p=t(`<hr><h1 id="在mongodb中使用日期进行crud操作" tabindex="-1"><a class="header-anchor" href="#在mongodb中使用日期进行crud操作"><span>在MongoDB中使用日期进行CRUD操作</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将使用MongoDB Java驱动程序执行与日期相关的CRUD操作，例如创建和更新带有日期字段的文档，以及查询、更新和删除其日期字段在给定范围内的文档。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>在深入实现之前，让我们设置我们的工作环境。</p><h3 id="_2-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven依赖"><span>2.1. Maven依赖</span></a></h3><p>首先，<strong>你应该安装MongoDB</strong>。如果你没有安装，可以按照官方的MongoDB安装指南进行安装。</p><p>接下来，让我们将MongoDB Java驱动程序作为依赖项添加到我们的_pom.xml_文件中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`org.mongodb\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`mongodb-driver-sync\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`4.6.0\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-pojo数据模型" tabindex="-1"><a class="header-anchor" href="#_2-2-pojo数据模型"><span>2.2. POJO数据模型</span></a></h3><p>让我们定义一个POJO来表示我们数据库中包含的文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> dateTime<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> location<span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span> dateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dateTime <span class="token operator">=</span> dateTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 标准setter和getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们声明了两个构造函数。<strong>MongoDB默认使用无参数构造函数</strong>。另一个构造函数是供我们在本教程中自己使用的。</p><p>还需要注意的是，虽然_dateTime_可以是一个_String_变量，<strong>最佳实践是使用特定于日期/时间的JDK类来表示日期字段</strong>。使用_String_字段表示日期需要额外的努力来确保值的格式正确。</p><p>现在我们准备好连接到我们的数据库了。</p><h3 id="_2-3-mongodb客户端" tabindex="-1"><a class="header-anchor" href="#_2-3-mongodb客户端"><span>2.3. MongoDB客户端</span></a></h3><p>为了让MongoDB能够序列化/反序列化我们的_Event_ POJO，我们需要将_PojoCodecProvider_注册到MongoDB的_CodecRegistry_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CodecProvider</span> codecProvider <span class="token operator">=</span> <span class="token class-name">PojoCodecProvider</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">automatic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CodecRegistry</span> codecRegistry <span class="token operator">=</span> <span class="token function">fromRegistries</span><span class="token punctuation">(</span><span class="token function">getDefaultCodecRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fromProviders</span><span class="token punctuation">(</span>codecProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建一个数据库、集合和客户端，这些将使用我们注册的_PojoCodecProvider_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MongoClient</span> mongoClient <span class="token operator">=</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MongoDatabase</span> db <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;calendar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withCodecRegistry</span><span class="token punctuation">(</span>codecRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MongoCollection</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span>\` collection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">&quot;my_events&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Event</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在准备好创建文档并执行与日期相关的CRUD操作了。</p><h2 id="_3-创建带有日期字段的文档" tabindex="-1"><a class="header-anchor" href="#_3-创建带有日期字段的文档"><span>3. 创建带有日期字段的文档</span></a></h2><p>在我们的POJO中，我们使用了_LocalDateTime_而不是_String_，以便更容易地处理日期值。现在让我们利用这一点，使用_LocalDateTime_的便捷API构建_Event_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Event</span> pianoLessonsEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;Piano lessons&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo Blvd&quot;</span><span class="token punctuation">,</span>
    <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Event</span> soccerGameEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;Soccer game&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar Avenue&quot;</span><span class="token punctuation">,</span>
    <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以按照以下方式将新的_Event_插入我们的数据库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InsertOneResult</span> pianoLessonsInsertResult <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>pianoLessonsEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InsertOneResult</span> soccerGameInsertResult <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>soccerGameEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们通过检查插入文档的id来验证插入是否成功：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertNotNull</span><span class="token punctuation">(</span>pianoLessonsInsertResult<span class="token punctuation">.</span><span class="token function">getInsertedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertNotNull</span><span class="token punctuation">(</span>soccerGameInsertResult<span class="token punctuation">.</span><span class="token function">getInsertedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-根据日期条件查询文档" tabindex="-1"><a class="header-anchor" href="#_4-根据日期条件查询文档"><span>4. 根据日期条件查询文档</span></a></h2><p>现在我们的数据库中有_Event_，让我们根据它们的日期字段检索它们。</p><p><strong>我们可以使用等值过滤器 (<em>eq</em>) 来检索与特定日期和时间匹配的文档：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Event</span> event <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们检查结果_Event_的各个字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Soccer game&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Bar Avenue&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> event<span class="token punctuation">.</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们还可以使用MongoDB _BasicDBObject_类以及_gte_和_lte_操作符来构建</strong> <strong>更复杂的日期范围查询：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> from <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">06</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalDateTime</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">06</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BasicDBObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDBObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BasicDBObjectBuilder</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&quot;$gte&quot;</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;$lte&quot;</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于足球比赛是我们查询日期范围内唯一的_Event_，我们应该只在_list_中看到一个_Event_对象，排除了钢琴课：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> events<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Soccer game&quot;</span><span class="token punctuation">,</span> events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Bar Avenue&quot;</span><span class="token punctuation">,</span> events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-更新文档" tabindex="-1"><a class="header-anchor" href="#_5-更新文档"><span>5. 更新文档</span></a></h2><p>让我们探索两种基于日期字段更新文档的用例。首先，我们将更新单个文档的日期字段，然后我们将更新匹配日期范围的多个文档。</p><h3 id="_5-1-更新文档的日期字段" tabindex="-1"><a class="header-anchor" href="#_5-1-更新文档的日期字段"><span>5.1. 更新文档的日期字段</span></a></h3><p><strong>要更新MongoDB文档，我们可以使用_updateOne()_方法</strong>。让我们还使用_currentDate()_方法来设置我们的钢琴课事件的_dateTime_字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Piano lessons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bson</span> update <span class="token operator">=</span> <span class="token class-name">Updates</span><span class="token punctuation">.</span><span class="token function">currentDate</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UpdateOptions</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UpdateResult</span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> update<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意_updateOne()<em>的第一个参数是一个_Document_对象，MongoDB将使用它来匹配我们数据库中的单个条目。如果有多个文档匹配，MongoDB只会更新它遇到的第一份文档。让我们还注意到我们向_upsert()<em>方法传递了_false</em>。如果我们传递了_true</em>，MongoDB将会在没有现有文档匹配的情况下插入一个新文档。</p><p>我们可以通过检查修改的文档数量来确认操作是否成功：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getModifiedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-更新符合日期条件的文档" tabindex="-1"><a class="header-anchor" href="#_5-2-更新符合日期条件的文档"><span>5.2. 更新符合日期条件的文档</span></a></h3><p><strong>要更新多个文档，MongoDB提供了_updateMany_方法。</strong> 在这个例子中，我们将更新与我们查询的日期范围匹配的多个事件。</p><p>与_updateOne()_不同，_updateMany()_方法期望第二个_Bson_对象来封装将定义我们想要更新的文档的查询条件。在这种情况下，我们将指定一个涵盖2022年所有事件的日期范围，通过引入_lt_字段操作符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDate</span> updateManyFrom <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalDate</span> updateManyTo <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bson</span> query <span class="token operator">=</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token function">gte</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bson</span> updates <span class="token operator">=</span> <span class="token class-name">Updates</span><span class="token punctuation">.</span><span class="token function">currentDate</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UpdateResult</span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> updates<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像_updateOne()_一样，<strong>我们可以通过检查_result_对象的更新计数来确认此操作更新了多个事件：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getModifiedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-删除符合日期条件的文档" tabindex="-1"><a class="header-anchor" href="#_6-删除符合日期条件的文档"><span>6. 删除符合日期条件的文档</span></a></h2><p>与更新一样，我们可以一次从数据库中删除一个或多个文档。假设我们需要删除2022年的所有事件。让我们使用_Bson_日期范围查询和_deleteMany()_方法来做到这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDate</span> deleteFrom <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalDate</span> deleteTo <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bson</span> query <span class="token operator">=</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token function">gte</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> deleteFrom<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">&quot;dateTime&quot;</span><span class="token punctuation">,</span> deleteTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DeleteResult</span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们在本教程中创建的所有事件都有一个2022_dateTime_字段值，_deleteMany()_从我们的集合中删除了它们全部。我们可以通过检查删除计数来确认这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-使用时区" tabindex="-1"><a class="header-anchor" href="#_7-使用时区"><span>7. 使用时区</span></a></h2><p><strong>MongoDB以UTC存储日期，这不能更改。</strong> 因此，如果我们希望我们的日期字段特定于时区，我们可以在一个单独的字段中存储时区偏移量，并自己进行转换。让我们将该字段添加为_String_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> timeZoneOffset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们需要调整我们的构造函数，以便在创建事件时可以设置新字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> location<span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span> dateTime<span class="token punctuation">,</span> <span class="token class-name">String</span> timeZoneOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dateTime <span class="token operator">=</span> dateTime<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timeZoneOffset <span class="token operator">=</span> timeZoneOffset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以创建并将特定时区的事件插入我们的数据库。让我们使用ZoneOffset类来避免手动格式化时区偏移_String_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> utcDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Event</span> pianoLessonsTZ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;Piano lessons&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Baz Bvld&quot;</span><span class="token punctuation">,</span> utcDateTime<span class="token punctuation">,</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InsertOneResult</span> pianoLessonsTZInsertResult <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>pianoLessonsTZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertNotNull</span><span class="token punctuation">(</span>pianoLessonsTZInsertResult<span class="token punctuation">.</span><span class="token function">getInsertedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<strong>由于偏移量是相对于UTC的，_dateTime_成员变量必须表示UTC时间，这样我们才能正确地稍后转换它</strong>。一旦我们从集合中检索到文档，我们就可以使用偏移字段和_OffsetDateTime_类进行转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">OffsetDateTime</span> dateTimeWithOffset <span class="token operator">=</span> <span class="token class-name">OffsetDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pianoLessonsTZ<span class="token punctuation">.</span>dateTime<span class="token punctuation">,</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pianoLessonsTZ<span class="token punctuation">.</span>timeZoneOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们学习了如何使用Java和MongoDB数据库执行与日期相关的CRUD操作。</p><p>我们使用日期值来创建、检索、更新或从我们的数据库中删除文档。在我们的示例中，我们涵盖了各种辅助类，并介绍了在处理日期时有帮助的MongoDB操作符。最后，为了解决MongoDB仅以UTC存储日期的问题，我们学会了如何使用需要特定时区的日期/时间值。</p><p>一如既往，本教程中使用的示例代码可在GitHub上找到。 OK</p>`,71),o=[p];function c(l,u){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","2024-07-17-Using Dates in CRUD Operations in MongoDB.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Using%20Dates%20in%20CRUD%20Operations%20in%20MongoDB.html","title":"在MongoDB中使用日期进行CRUD操作","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["MongoDB","Java"],"tag":["CRUD","Date Operations"],"head":[["meta",{"name":"keywords","content":"MongoDB, Java, CRUD, Date Operations"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Using%20Dates%20in%20CRUD%20Operations%20in%20MongoDB.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在MongoDB中使用日期进行CRUD操作"}],["meta",{"property":"og:description","content":"在MongoDB中使用日期进行CRUD操作 1. 概述 在本教程中，我们将使用MongoDB Java驱动程序执行与日期相关的CRUD操作，例如创建和更新带有日期字段的文档，以及查询、更新和删除其日期字段在给定范围内的文档。 2. 设置 在深入实现之前，让我们设置我们的工作环境。 2.1. Maven依赖 首先，你应该安装MongoDB。如果你没有安装..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T09:09:09.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"CRUD"}],["meta",{"property":"article:tag","content":"Date Operations"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T09:09:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在MongoDB中使用日期进行CRUD操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T09:09:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在MongoDB中使用日期进行CRUD操作 1. 概述 在本教程中，我们将使用MongoDB Java驱动程序执行与日期相关的CRUD操作，例如创建和更新带有日期字段的文档，以及查询、更新和删除其日期字段在给定范围内的文档。 2. 设置 在深入实现之前，让我们设置我们的工作环境。 2.1. Maven依赖 首先，你应该安装MongoDB。如果你没有安装..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[{"level":3,"title":"2.1. Maven依赖","slug":"_2-1-maven依赖","link":"#_2-1-maven依赖","children":[]},{"level":3,"title":"2.2. POJO数据模型","slug":"_2-2-pojo数据模型","link":"#_2-2-pojo数据模型","children":[]},{"level":3,"title":"2.3. MongoDB客户端","slug":"_2-3-mongodb客户端","link":"#_2-3-mongodb客户端","children":[]}]},{"level":2,"title":"3. 创建带有日期字段的文档","slug":"_3-创建带有日期字段的文档","link":"#_3-创建带有日期字段的文档","children":[]},{"level":2,"title":"4. 根据日期条件查询文档","slug":"_4-根据日期条件查询文档","link":"#_4-根据日期条件查询文档","children":[]},{"level":2,"title":"5. 更新文档","slug":"_5-更新文档","link":"#_5-更新文档","children":[{"level":3,"title":"5.1. 更新文档的日期字段","slug":"_5-1-更新文档的日期字段","link":"#_5-1-更新文档的日期字段","children":[]},{"level":3,"title":"5.2. 更新符合日期条件的文档","slug":"_5-2-更新符合日期条件的文档","link":"#_5-2-更新符合日期条件的文档","children":[]}]},{"level":2,"title":"6. 删除符合日期条件的文档","slug":"_6-删除符合日期条件的文档","link":"#_6-删除符合日期条件的文档","children":[]},{"level":2,"title":"7. 使用时区","slug":"_7-使用时区","link":"#_7-使用时区","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1721207349000,"updatedTime":1721207349000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.55,"words":1965},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Using Dates in CRUD Operations in MongoDB.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>在MongoDB中使用日期进行CRUD操作</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将使用MongoDB Java驱动程序执行与日期相关的CRUD操作，例如创建和更新带有日期字段的文档，以及查询、更新和删除其日期字段在给定范围内的文档。</p>\\n<h2>2. 设置</h2>\\n<p>在深入实现之前，让我们设置我们的工作环境。</p>\\n<h3>2.1. Maven依赖</h3>\\n<p>首先，<strong>你应该安装MongoDB</strong>。如果你没有安装，可以按照官方的MongoDB安装指南进行安装。</p>\\n<p>接下来，让我们将MongoDB Java驱动程序作为依赖项添加到我们的_pom.xml_文件中：</p>","autoDesc":true}');export{r as comp,d as data};
