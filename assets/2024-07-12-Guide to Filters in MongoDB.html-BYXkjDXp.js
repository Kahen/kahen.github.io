import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CbPcg273.js";const p={},e=t('<hr><h1 id="mongodb中过滤器的使用指南" tabindex="-1"><a class="header-anchor" href="#mongodb中过滤器的使用指南"><span>MongoDB中过滤器的使用指南</span></a></h1><p>在本教程中，我们将学习如何使用过滤器构建器在MongoDB中指定查询的过滤器。</p><p>过滤器类是一种构建器，帮助我们构建查询过滤器。<strong>过滤器是MongoDB用来根据特定条件限制结果的操作</strong>。</p><h2 id="_2-构建器类型" tabindex="-1"><a class="header-anchor" href="#_2-构建器类型"><span>2. 构建器类型</span></a></h2><p>Java MongoDB驱动程序提供了各种类型的构建器，帮助我们构建BSON文档。<strong>构建器提供了一个方便的API，简化了执行各种CRUD和聚合操作的过程</strong>。</p><p>让我们回顾一下可用的不同类型构建器：</p><ul><li><strong>Filters</strong> 用于构建查询过滤器</li><li><strong>Projections</strong> 用于构建字段投影，指定要包含和排除的字段</li><li><strong>Sorts</strong> 用于构建排序标准</li><li><strong>Updates</strong> 用于构建更新操作</li><li><strong>Aggregates</strong> 用于构建聚合管道</li><li><strong>Indexes</strong> 用于构建索引键</li></ul><p>现在让我们深入探讨在MongoDB中使用<strong>Filters</strong>的不同方式。</p><h2 id="_3-数据库初始化" tabindex="-1"><a class="header-anchor" href="#_3-数据库初始化"><span>3. 数据库初始化</span></a></h2><p>首先，为了演示各种过滤器操作，让我们设置一个名为_baeldung_的数据库和一个示例集合，<em>user</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>use baeldung<span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步地，让我们向_user_集合中插入一些文档：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n<span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span><span class="token string">&quot;Admin&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;Lisa&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">27</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;Web&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;789&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;Tim&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span><span class="token string">&quot;Analyst&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功插入后，上述查询将返回一个确认结果的响应：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;acknowledged&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;insertedIds&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>\n        ObjectId(<span class="token string">&quot;6357c4736c9084bcac72eced&quot;</span>)<span class="token punctuation">,</span>\n        ObjectId(<span class="token string">&quot;6357c4736c9084bcac72ecee&quot;</span>)<span class="token punctuation">,</span>\n        ObjectId(<span class="token string">&quot;6357c4736c9084bcac72ecef&quot;</span>)\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用这个集合作为我们所有过滤器操作示例的样本。</p><h2 id="_4-使用filters类" tabindex="-1"><a class="header-anchor" href="#_4-使用filters类"><span>4. 使用<strong>Filters</strong>类</span></a></h2><p>正如已经提到的，<strong>Filters</strong>是MongoDB用来限制结果到我们想要看到的内容的操作。<strong>Filters</strong>类提供了各种静态工厂方法，用于不同类型的MongoDB操作。每种方法都返回一个BSON类型，然后可以传递给任何期望查询过滤器的方法。</p><p><strong>当前MongoDB Java驱动程序API中的</strong>Filters<strong>类取代了旧版API中的</strong>QueryBuilder**。**</p><p><strong>Filters</strong>根据操作类型进行分类：条件、逻辑、数组、元素、评估、位和地理空间。</p><p>接下来，让我们看看一些最常用的<strong>Filters</strong>方法。</p><h3 id="_4-1-eq-方法" tabindex="-1"><a class="header-anchor" href="#_4-1-eq-方法"><span>4.1. <strong>eq()</strong> 方法</span></a></h3><p><strong>Filters.eq()<strong>方法</strong>创建一个过滤器，匹配所有指定字段的值等于指定值的文档</strong>。</p><p>首先，让我们看看MongoDB Shell查询，过滤_user_集合中_userName_等于_“Jack”_的文档：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的查询将从_user_集合返回一个文档：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;6357c4736c9084bcac72eced&quot;</span>)<span class="token punctuation">,</span>\n    <span class="token property">&quot;userId&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;userName&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;age&quot;</span> <span class="token operator">:</span> <span class="token number">23.0</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;role&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Admin&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们看看相应的MongoDB Java驱动程序代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以注意到**Filters.eq()**方法返回了一个BSON类型，然后我们将其作为过滤器传递给_find()_方法。</p><p>另外，<strong>Filters.ne()_是</strong>Filters.eq()_方法的相反** — 它匹配所有指定字段的值不等于指定值的文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-gt-方法" tabindex="-1"><a class="header-anchor" href="#_4-2-gt-方法"><span>4.2. <strong>gt()</strong> 方法</span></a></h3><p><strong>Filters.gt()<strong>方法</strong>创建一个过滤器，匹配所有指定字段的值大于指定值的文档</strong>。</p><p>让我们看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段获取所有_user_集合中_age_大于_25_的文档。就像**Filters.gt()**方法一样，<strong>还有</strong>Filters.lt()<strong>方法，它匹配所有指定字段的值小于指定值的文档</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<strong>还有方法</strong>Filters.gte()<strong>和</strong>Filters.lte()<strong>，分别匹配值大于或等于和小于或等于指定值</strong>。</p><h3 id="_4-3-in-方法" tabindex="-1"><a class="header-anchor" href="#_4-3-in-方法"><span>4.3. <strong>in()</strong> 方法</span></a></h3><p><strong>Filters.in()<strong>方法</strong>创建一个过滤器，匹配所有指定字段的值等于指定值列表中的任何值的文档</strong>。</p><p>让我们看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码片段获取所有_user_集合中_userName_等于_“Jack”<em>或</em>“Lisa”_的文档。</p><p>就像**Filters.in()**方法一样，<strong>还有</strong>Filters.nin()<strong>方法，它匹配所有指定字段的值不等于指定值列表中的任何值的文档</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">nin</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-and-方法" tabindex="-1"><a class="header-anchor" href="#_4-4-and-方法"><span>4.4. <strong>and()</strong> 方法</span></a></h3><p><strong>Filters.and()<strong>方法</strong>创建一个过滤器，对提供的过滤器列表执行逻辑AND操作</strong>。</p><p>让我们找出所有_user_集合中_age_大于_25_且_role_等于_“Admin”_的文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-or-方法" tabindex="-1"><a class="header-anchor" href="#_4-5-or-方法"><span>4.5. <strong>or()</strong> 方法</span></a></h3><p>正如我们所预期的，<strong>Filters.or()<strong>方法</strong>创建一个过滤器，对提供的过滤器列表执行逻辑OR操作</strong>。</p><p>让我们编写一个代码片段，返回所有_user_集合中_age_大于_30_或_role_等于_“Admin”_的文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-exists-方法" tabindex="-1"><a class="header-anchor" href="#_4-6-exists-方法"><span>4.6. <strong>exists()</strong> 方法</span></a></h3><p>进一步地，<strong>Filters.exists()<strong>方法</strong>创建一个过滤器，匹配所有包含给定字段的文档</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码返回所有_user_集合中有_type_字段的文档。</p><h3 id="_4-7-regex-方法" tabindex="-1"><a class="header-anchor" href="#_4-7-regex-方法"><span>4.7. <strong>regex()</strong> 方法</span></a></h3><p>最后，<strong>Filters.regex()<strong>方法</strong>创建一个过滤器，匹配指定字段的值与给定正则表达式模式匹配的文档</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bson</span> filter <span class="token operator">=</span> <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FindIterable</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` documents <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MongoCursor</span>````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````````````````` cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们获取了所有_user_集合中_userName_匹配正则表达式_“a”_的文档。</p><p>到目前为止，我们已经讨论了一些最常用的过滤器操作符。我们可以将查询过滤器操作符的任何组合作为_find()_方法的过滤器。</p><p>此外，过滤器还可以在其他地方使用，例如聚合的match阶段、_deleteOne()_方法和_updateOne()_方法等。</p><h2 id="_5-结" tabindex="-1"><a class="header-anchor" href="#_5-结"><span>5. 结</span></a></h2>',66),o=[e];function c(l,u){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-12-Guide to Filters in MongoDB.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-12/2024-07-12-Guide%20to%20Filters%20in%20MongoDB.html","title":"MongoDB中过滤器的使用指南","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["MongoDB","Java"],"tag":["Java","MongoDB","Filters"],"head":[["meta",{"name":"keywords","content":"MongoDB, Java, Filters, 查询, 数据库"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-12/2024-07-12-Guide%20to%20Filters%20in%20MongoDB.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"MongoDB中过滤器的使用指南"}],["meta",{"property":"og:description","content":"MongoDB中过滤器的使用指南 在本教程中，我们将学习如何使用过滤器构建器在MongoDB中指定查询的过滤器。 过滤器类是一种构建器，帮助我们构建查询过滤器。过滤器是MongoDB用来根据特定条件限制结果的操作。 2. 构建器类型 Java MongoDB驱动程序提供了各种类型的构建器，帮助我们构建BSON文档。构建器提供了一个方便的API，简化了执..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-12T21:17:44.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:tag","content":"Filters"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-12T21:17:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MongoDB中过滤器的使用指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-12T21:17:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"MongoDB中过滤器的使用指南 在本教程中，我们将学习如何使用过滤器构建器在MongoDB中指定查询的过滤器。 过滤器类是一种构建器，帮助我们构建查询过滤器。过滤器是MongoDB用来根据特定条件限制结果的操作。 2. 构建器类型 Java MongoDB驱动程序提供了各种类型的构建器，帮助我们构建BSON文档。构建器提供了一个方便的API，简化了执..."},"headers":[{"level":2,"title":"2. 构建器类型","slug":"_2-构建器类型","link":"#_2-构建器类型","children":[]},{"level":2,"title":"3. 数据库初始化","slug":"_3-数据库初始化","link":"#_3-数据库初始化","children":[]},{"level":2,"title":"4. 使用Filters类","slug":"_4-使用filters类","link":"#_4-使用filters类","children":[{"level":3,"title":"4.1. eq() 方法","slug":"_4-1-eq-方法","link":"#_4-1-eq-方法","children":[]},{"level":3,"title":"4.2. gt() 方法","slug":"_4-2-gt-方法","link":"#_4-2-gt-方法","children":[]},{"level":3,"title":"4.3. in() 方法","slug":"_4-3-in-方法","link":"#_4-3-in-方法","children":[]},{"level":3,"title":"4.4. and() 方法","slug":"_4-4-and-方法","link":"#_4-4-and-方法","children":[]},{"level":3,"title":"4.5. or() 方法","slug":"_4-5-or-方法","link":"#_4-5-or-方法","children":[]},{"level":3,"title":"4.6. exists() 方法","slug":"_4-6-exists-方法","link":"#_4-6-exists-方法","children":[]},{"level":3,"title":"4.7. regex() 方法","slug":"_4-7-regex-方法","link":"#_4-7-regex-方法","children":[]}]},{"level":2,"title":"5. 结","slug":"_5-结","link":"#_5-结","children":[]}],"git":{"createdTime":1720819064000,"updatedTime":1720819064000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.05,"words":1514},"filePathRelative":"posts/baeldung/2024-07-12/2024-07-12-Guide to Filters in MongoDB.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>MongoDB中过滤器的使用指南</h1>\\n<p>在本教程中，我们将学习如何使用过滤器构建器在MongoDB中指定查询的过滤器。</p>\\n<p>过滤器类是一种构建器，帮助我们构建查询过滤器。<strong>过滤器是MongoDB用来根据特定条件限制结果的操作</strong>。</p>\\n<h2>2. 构建器类型</h2>\\n<p>Java MongoDB驱动程序提供了各种类型的构建器，帮助我们构建BSON文档。<strong>构建器提供了一个方便的API，简化了执行各种CRUD和聚合操作的过程</strong>。</p>\\n<p>让我们回顾一下可用的不同类型构建器：</p>\\n<ul>\\n<li><strong>Filters</strong> 用于构建查询过滤器</li>\\n<li><strong>Projections</strong> 用于构建字段投影，指定要包含和排除的字段</li>\\n<li><strong>Sorts</strong> 用于构建排序标准</li>\\n<li><strong>Updates</strong> 用于构建更新操作</li>\\n<li><strong>Aggregates</strong> 用于构建聚合管道</li>\\n<li><strong>Indexes</strong> 用于构建索引键</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
