import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DNwYcgl6.js";const e={},p=t(`<hr><h1 id="java接口中的私有方法" tabindex="-1"><a class="header-anchor" href="#java接口中的私有方法"><span>Java接口中的私有方法</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p><strong>从Java 9开始，可以在Java接口中添加私有方法</strong>。在这个简短的教程中，让我们讨论如何定义这些方法以及它们的好处。</p><h2 id="_2-在接口中定义私有方法" tabindex="-1"><a class="header-anchor" href="#_2-在接口中定义私有方法"><span>2. 在接口中定义私有方法</span></a></h2><p><strong>私有方法可以是静态的或非静态的</strong>。这意味着在接口中，我们可以创建私有方法来封装来自默认和静态公共方法签名的代码。</p><p>首先，让我们看看如何从默认接口方法中使用私有方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>bar()</em> 能够通过从其默认方法中调用它来使用私有方法 <em>baz()</em>。</p><p>接下来，让我们向我们的 <em>Foo</em> 接口添加一个静态定义的私有方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">staticBaz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticBaz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; static world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口内，其他静态定义的方法可以使用这些私有静态方法。</p><p>最后，让我们从具体类中调用定义的默认和静态方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFoo</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Foo</span> customFoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        customFoo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token function">buzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是从调用 <em>bar()</em> 方法得到的字符串“Hello world!”和从调用 <em>buzz()</em> 方法得到的“Hello static world!”。</p><h2 id="_3-接口中私有方法的好处" tabindex="-1"><a class="header-anchor" href="#_3-接口中私有方法的好处"><span>3. 接口中私有方法的好处</span></a></h2><p>现在我们已经定义了它们，让我们谈谈接口中私有方法的好处。</p><p>正如前一节中提到的，接口可以使用私有方法来隐藏实现细节，从而实现封装。</p><p>另一个好处是（就像一般的私有方法一样）减少重复并为具有相似功能的接口方法添加更多可重用的代码。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本教程中，我们介绍了如何在接口内定义私有方法以及如何从静态和非静态上下文中使用它们。我们在本文中使用的所有代码都可以在GitHub上找到。</p>`,21),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-29-Private Methods in Java Interfaces.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Private%20Methods%20in%20Java%20Interfaces.html","title":"Java接口中的私有方法","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Interfaces"],"tag":["Java 9","Private Methods"],"head":[["meta",{"name":"keywords","content":"Java 9, Interfaces, Private Methods"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Private%20Methods%20in%20Java%20Interfaces.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java接口中的私有方法"}],["meta",{"property":"og:description","content":"Java接口中的私有方法 1. 概述 从Java 9开始，可以在Java接口中添加私有方法。在这个简短的教程中，让我们讨论如何定义这些方法以及它们的好处。 2. 在接口中定义私有方法 私有方法可以是静态的或非静态的。这意味着在接口中，我们可以创建私有方法来封装来自默认和静态公共方法签名的代码。 首先，让我们看看如何从默认接口方法中使用私有方法： bar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T03:09:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 9"}],["meta",{"property":"article:tag","content":"Private Methods"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T03:09:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java接口中的私有方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T03:09:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java接口中的私有方法 1. 概述 从Java 9开始，可以在Java接口中添加私有方法。在这个简短的教程中，让我们讨论如何定义这些方法以及它们的好处。 2. 在接口中定义私有方法 私有方法可以是静态的或非静态的。这意味着在接口中，我们可以创建私有方法来封装来自默认和静态公共方法签名的代码。 首先，让我们看看如何从默认接口方法中使用私有方法： bar..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 在接口中定义私有方法","slug":"_2-在接口中定义私有方法","link":"#_2-在接口中定义私有方法","children":[]},{"level":2,"title":"3. 接口中私有方法的好处","slug":"_3-接口中私有方法的好处","link":"#_3-接口中私有方法的好处","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1722222591000,"updatedTime":1722222591000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.75,"words":525},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Private Methods in Java Interfaces.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java接口中的私有方法</h1>\\n<h2>1. 概述</h2>\\n<p><strong>从Java 9开始，可以在Java接口中添加私有方法</strong>。在这个简短的教程中，让我们讨论如何定义这些方法以及它们的好处。</p>\\n<h2>2. 在接口中定义私有方法</h2>\\n<p><strong>私有方法可以是静态的或非静态的</strong>。这意味着在接口中，我们可以创建私有方法来封装来自默认和静态公共方法签名的代码。</p>\\n<p>首先，让我们看看如何从默认接口方法中使用私有方法：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">bar</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">baz</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">baz</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\" world!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
