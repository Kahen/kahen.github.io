import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DNwYcgl6.js";const p={},e=t(`<h1 id="mockito-mockedconstruction-概览" tabindex="-1"><a class="header-anchor" href="#mockito-mockedconstruction-概览"><span>Mockito MockedConstruction 概览</span></a></h1><p>在编写单元测试时，有时会遇到一种情况，即在构造新对象时返回一个模拟对象可能会很有用。例如，当测试具有紧密耦合对象依赖性的遗留代码时。</p><p>在本教程中，我们将看看Mockito的一个相对较新的特性，它允许我们在构造函数调用时生成模拟对象。</p><p>要了解更多关于使用Mockito进行测试的信息，请查看我们全面的Mockito系列。</p><h2 id="_2-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-依赖项"><span><strong>2. 依赖项</strong></span></a></h2><p>首先，我们需要将_mockito_依赖项添加到我们的项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.mockito\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`mockito-core\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`5.11.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`test\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用的Mockito版本低于5.0版本，那么我们还需要显式添加Mockito的mock maker inline依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.mockito\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`mockito-inline\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`5.2.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`test\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-关于模拟构造函数调用的快速说明" tabindex="-1"><a class="header-anchor" href="#_3-关于模拟构造函数调用的快速说明"><span>3. 关于模拟构造函数调用的快速说明</span></a></h2><p>一般来说，有些人可能会说，当我们编写清晰的面向对象代码时，我们在创建对象时不应该需要返回一个模拟实例。这通常可能暗示我们的应用程序存在设计问题或代码异味。</p><p>为什么？首先，一个类依赖于几个具体实现可能是紧密耦合的，其次，这几乎总是导致难以测试的代码。理想情况下，一个类不应该负责获取它的依赖项，如果可能的话，它们应该被外部注入。</p><p>因此，我们总是值得调查我们是否可以重构我们的代码，使其更易于测试。<strong>当然，这并不总是可能的，有时我们需要在构造后暂时替换一个类的行为。</strong></p><p>这可能在几种情况下特别有用：</p><ul><li>测试难以到达的场景 - 特别是如果我们的被测试类具有复杂的对象层次结构</li><li>测试与外部库或框架的交互</li><li>使用遗留代码</li></ul><p>在接下来的部分中，<strong>我们将看到如何使用Mockito的_MockConstruction_来应对这些情况，以便控制对象的创建并指定它们在构造时的行为。</strong></p><h2 id="_4-模拟构造函数" tabindex="-1"><a class="header-anchor" href="#_4-模拟构造函数"><span>4. 模拟构造函数</span></a></h2><p>让我们首先创建一个简单的_Fruit_类，它将是我们第一个单元测试的重点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Red&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们继续编写我们的测试，其中我们模拟对_Fruit_类的构造函数调用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedContructor_whenFruitCreated_thenMockIsReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedConstruction</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span>\`\`\` mock <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Fruit</span> fruit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> fruit<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">,</span> fruit<span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span>\`\`\` constructed <span class="token operator">=</span> mock<span class="token punctuation">.</span><span class="token function">constructed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> constructed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的示例中，我们首先检查一个真实的_Fruit_对象是否返回了期望的值。</p><p>现在，为了使模拟对象构造成为可能，我们将使用_Mockito.mockConstruction()_方法。<strong>这个方法需要一个非抽象的Java类，用于我们即将模拟的构造。在这种情况下，是一个_Fruit_类。</strong></p><p>我们将其定义在一个try-with-resources块内。这意味着当我们的代码在try语句中调用_Fruit_对象的构造函数时，它将返回一个模拟对象。<strong>我们应该注意，Mockito不会在我们的作用域块之外模拟构造函数。</strong></p><p>这是一个特别好的特性，因为它确保我们的模拟是暂时的。正如我们知道的，如果我们在测试运行期间玩弄模拟构造函数调用，这可能会由于测试的并发和顺序性质，对我们的测试结果产生不利影响。</p><h2 id="_5-在另一个类中模拟构造函数" tabindex="-1"><a class="header-anchor" href="#_5-在另一个类中模拟构造函数"><span>5. 在另一个类中模拟构造函数</span></a></h2><p>一个更现实的场景是，我们有一个被测试的类，它在内部创建了一些我们想要模拟的对象。</p><p>通常，在我们的被测试类的构造函数内，我们可能会创建一些我们希望从我们的测试中模拟的新对象实例。在这个例子中，我们将看到如何做到这一点。</p><p>让我们首先定义一个简单的咖啡制作应用程序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeMachine</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Grinder</span> grinder<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">WaterTank</span> tank<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaterTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tank<span class="token punctuation">.</span><span class="token function">isEspresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;Espresso&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Americano&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Finished making a delicious %s made with %s beans&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grinder<span class="token punctuation">.</span><span class="token function">getBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们定义_Grinder_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Grinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> beans<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Grinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beans <span class="token operator">=</span> <span class="token string">&quot;Guatemalan&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> beans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeans</span><span class="token punctuation">(</span><span class="token class-name">String</span> beans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beans <span class="token operator">=</span> beans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们添加_WaterTank_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaterTank</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> mils<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WaterTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mils <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEspresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getMils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \`<span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//Getters and Setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简单的例子中，我们的_CoffeeMachine_在构造时创建了一个磨豆机和水箱。我们有一个方法_makeCoffee()_，它打印出有关酿造咖啡的信息。</p><p>现在，我们可以继续编写一些测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNoMockedContructor_whenCoffeeMade_thenRealDependencyReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CoffeeMachine</span> machine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Finished making a delicious Espresso made with Guatemalan beans&quot;</span><span class="token punctuation">,</span> machine<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个第一个测试中，我们检查当我们不使用_MockedConstruction_时，我们的咖啡机是否返回内部的真实依赖项。</p><p>现在让我们看看如何为这些依赖项返回模拟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedContructor_whenCoffeeMade_thenMockDependencyReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedConstruction</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterTank</span><span class="token punctuation">&gt;</span></span>\`\` mockTank <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">WaterTank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">MockedConstruction</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Grinder</span><span class="token punctuation">&gt;</span></span>\`\` mockGrinder <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">Grinder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">CoffeeMachine</span> machine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">WaterTank</span> tank <span class="token operator">=</span> mockTank<span class="token punctuation">.</span><span class="token function">constructed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Grinder</span> grinder <span class="token operator">=</span> mockGrinder<span class="token punctuation">.</span><span class="token function">constructed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">when</span><span class="token punctuation">(</span>tank<span class="token punctuation">.</span><span class="token function">isEspresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>grinder<span class="token punctuation">.</span><span class="token function">getBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;Peruvian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Finished making a delicious Americano made with Peruvian beans&quot;</span><span class="token punctuation">,</span> machine<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，我们使用_mockConstruction_在调用_Grinder_和_WaterTank_的构造函数时返回模拟实例。然后，我们使用标准的_when_符号指定这些模拟的期望。</p><p>这一次，当我们运行测试时，Mockito确保_Grinder_和_WaterTank_的构造函数返回具有指定行为的模拟实例，允许我们隔离测试_makeCoffee_方法。</p><h2 id="_6-处理带参数的构造函数" tabindex="-1"><a class="header-anchor" href="#_6-处理带参数的构造函数"><span>6. 处理带参数的构造函数</span></a></h2><p>另一个常见的用例是能够处理带参数的构造函数。</p><p>幸运的是，_mockedConstruction_提供了一种机制，允许我们访问传递给构造函数的参数：</p><p>让我们为我们的_WaterTank_添加一个新的构造函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WaterTank</span><span class="token punctuation">(</span><span class="token keyword">int</span> mils<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mils <span class="token operator">=</span> mils<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，让我们也为我们咖啡应用程序添加一个新的构造函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token keyword">int</span> mils<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaterTank</span><span class="token punctuation">(</span>mils<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以添加另一个测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedContructorWithArgument_whenCoffeeMade_thenMockDependencyReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedConstruction</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterTank</span><span class="token punctuation">&gt;</span></span>\` mockTank <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">WaterTank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>mock<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">int</span> mils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">getMils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>mils<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">MockedConstruction</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Grinder</span><span class="token punctuation">&gt;</span></span>\`\` mockGrinder <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">Grinder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">CoffeeMachine</span> machine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token class-name">Grinder</span> grinder <span class="token operator">=</span> mockGrinder<span class="token punctuation">.</span><span class="token function">constructed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">when</span><span class="token punctuation">(</span>grinder<span class="token punctuation">.</span><span class="token function">getBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;Kenyan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Finished making a delicious Americano made with Kenyan beans&quot;</span><span class="token punctuation">,</span> machine<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，我们使用一个lambda表达式来处理带参数的_WaterTank_构造函数。<strong>lambda接收模拟实例和构造上下文，允许我们访问传递给构造函数的参数。</strong></p><p>然后，我们可以使用这些参数来设置_getMils_方法的期望行为。</p><h2 id="_7-更改默认的模拟行为" tabindex="-1"><a class="header-anchor" href="#_7-更改默认的模拟行为"><span>7. 更改默认的模拟行为</span></a></h2><p>重要的是要注意，对于方法，我们不会默认地插入一个模拟返回null。**我们可以进一步让我们的_Fruit_示例更进一步，让模拟像真实的_Fruit_实例一样行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedContructorWithNewDefaultAnswer_whenFruitCreated_thenRealMethodInvoked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedConstruction</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span>\`\`\` mock <span class="token operator">=</span> <span class="token function">mockConstruction</span><span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">withSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultAnswer</span><span class="token punctuation">(</span><span class="token class-name">Answers</span><span class="token punctuation">.</span><span class="token constant">CALLS_REAL_METHODS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Fruit</span> fruit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> fruit<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">,</span> fruit<span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，我们向_mockConstruction_方法传递了一个额外的参数_MockSettings_，告诉它创建一个模拟，对于我们没有插入的任何方法，它将表现得像一个真实的_Fruit_实例。</p><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在这篇简短的文章中，我们看到了几个示例，展示了如何使用Mockito来模拟构造函数调用。总之，Mockito提供了一个优雅的解决方案，用于在当前线程和用户定义的作用域内生成构造函数调用的模拟。</p><p>一如既往，本文的完整源代码可在GitHub上找到。</p><p><a href="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Logo</a><a href="https://secure.gravatar.com/avatar/66d236ad2fbffe8cfd463ebd2b4a43c0?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar Image</a><a href="https://secure.gravatar.com/avatar/629fdde67cb23f9d3799635d89c7b250?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar Image</a><a href="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" target="_blank" rel="noopener noreferrer">Announcement Icon</a><a href="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" target="_blank" rel="noopener noreferrer">Baeldung REST Article Footer Image</a><a href="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png" target="_blank" rel="noopener noreferrer">Baeldung REST Article Footer Icon</a></p><p>OK</p>`,62),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-30-Overview of Mockito MockedConstruction.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Overview%20of%20Mockito%20MockedConstruction.html","title":"Mockito MockedConstruction 概览","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Mockito"],"tag":["Mockito","Unit Testing"],"head":[["meta",{"name":"keywords","content":"Mockito, MockedConstruction, Java, Unit Testing"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Overview%20of%20Mockito%20MockedConstruction.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Mockito MockedConstruction 概览"}],["meta",{"property":"og:description","content":"Mockito MockedConstruction 概览 在编写单元测试时，有时会遇到一种情况，即在构造新对象时返回一个模拟对象可能会很有用。例如，当测试具有紧密耦合对象依赖性的遗留代码时。 在本教程中，我们将看看Mockito的一个相对较新的特性，它允许我们在构造函数调用时生成模拟对象。 要了解更多关于使用Mockito进行测试的信息，请查看我们全..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T01:50:32.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Mockito"}],["meta",{"property":"article:tag","content":"Unit Testing"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T01:50:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mockito MockedConstruction 概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T01:50:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Mockito MockedConstruction 概览 在编写单元测试时，有时会遇到一种情况，即在构造新对象时返回一个模拟对象可能会很有用。例如，当测试具有紧密耦合对象依赖性的遗留代码时。 在本教程中，我们将看看Mockito的一个相对较新的特性，它允许我们在构造函数调用时生成模拟对象。 要了解更多关于使用Mockito进行测试的信息，请查看我们全..."},"headers":[{"level":2,"title":"2. 依赖项","slug":"_2-依赖项","link":"#_2-依赖项","children":[]},{"level":2,"title":"3. 关于模拟构造函数调用的快速说明","slug":"_3-关于模拟构造函数调用的快速说明","link":"#_3-关于模拟构造函数调用的快速说明","children":[]},{"level":2,"title":"4. 模拟构造函数","slug":"_4-模拟构造函数","link":"#_4-模拟构造函数","children":[]},{"level":2,"title":"5. 在另一个类中模拟构造函数","slug":"_5-在另一个类中模拟构造函数","link":"#_5-在另一个类中模拟构造函数","children":[]},{"level":2,"title":"6. 处理带参数的构造函数","slug":"_6-处理带参数的构造函数","link":"#_6-处理带参数的构造函数","children":[]},{"level":2,"title":"7. 更改默认的模拟行为","slug":"_7-更改默认的模拟行为","link":"#_7-更改默认的模拟行为","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1719712232000,"updatedTime":1719712232000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.76,"words":2027},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Overview of Mockito MockedConstruction.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在编写单元测试时，有时会遇到一种情况，即在构造新对象时返回一个模拟对象可能会很有用。例如，当测试具有紧密耦合对象依赖性的遗留代码时。</p>\\n<p>在本教程中，我们将看看Mockito的一个相对较新的特性，它允许我们在构造函数调用时生成模拟对象。</p>\\n<p>要了解更多关于使用Mockito进行测试的信息，请查看我们全面的Mockito系列。</p>\\n<h2><strong>2. 依赖项</strong></h2>\\n<p>首先，我们需要将_mockito_依赖项添加到我们的项目中：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n    ``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>``org.mockito``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n    ``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>``mockito-core``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n    ``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>``5.11.0``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n    ``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>scope</span><span class=\\"token punctuation\\">&gt;</span></span>``test``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>scope</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n``<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>``\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
