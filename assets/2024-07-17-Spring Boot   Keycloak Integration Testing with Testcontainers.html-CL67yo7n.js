import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DNwYcgl6.js";const e={},p=t('<h1 id="spring-boot-–-使用testcontainers进行keycloak集成测试" tabindex="-1"><a class="header-anchor" href="#spring-boot-–-使用testcontainers进行keycloak集成测试"><span>Spring Boot – 使用Testcontainers进行Keycloak集成测试</span></a></h1><p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p><p><strong>&gt;&gt; 学习Spring</strong><strong>安全</strong></p><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>集成测试在验证应用程序是否正常工作时至关重要。我们还应该正确地测试认证，因为它是一个敏感部分。Testcontainers允许我们在测试阶段启动Docker容器，以针对实际的技术栈运行我们的测试。</p><p>在本文中，<strong>我们将看到如何使用Testcontainers设置针对实际Keycloak实例的集成测试</strong>。</p><h2 id="_2-使用keycloak设置spring-security" tabindex="-1"><a class="header-anchor" href="#_2-使用keycloak设置spring-security"><span>2. 使用Keycloak设置Spring Security</span></a></h2><p>我们需要设置Spring Security、Keycloak配置，最后是Testcontainers。</p><h3 id="_2-1-设置spring-boot和spring-security" tabindex="-1"><a class="header-anchor" href="#_2-1-设置spring-boot和spring-security"><span>2.1. 设置Spring Boot和Spring Security</span></a></h3><p>让我们通过Spring Security来设置安全性。我们需要spring-boot-starter-security依赖项。所以，让我们将其添加到我们的pom中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-security`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用spring-boot父pom。因此，我们不需要指定其依赖管理中库的版本。</p><p>接下来，让我们创建一个简单的控制器来返回一个用户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/me&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDto</span> <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDto</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;janedoe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jane.doe@baeldung.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，<strong>我们有一个安全的控制器，响应对“/users/me”的请求</strong>。启动应用程序时，Spring Security为用户‘user’生成一个密码，在应用程序日志中可见。</p><h3 id="_2-2-配置keycloak" tabindex="-1"><a class="header-anchor" href="#_2-2-配置keycloak"><span>2.2. 配置Keycloak</span></a></h3><p><strong>启动本地Keycloak的最简单方法是使用Docker</strong>。因此，让我们使用一个已经配置了管理员账户的Keycloak容器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8080 <span class="token parameter variable">-e</span> <span class="token assign-left variable">KEYCLOAK_ADMIN</span><span class="token operator">=</span>admin <span class="token parameter variable">-e</span> <span class="token assign-left variable">KEYCLOAK_ADMIN_PASSWORD</span><span class="token operator">=</span>admin quay.io/keycloak/keycloak:17.0.1 start-dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们在浏览器中打开URL http://localhost:8081 以访问Keycloak控制台：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-login-page.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，让我们创建我们的领域。我们将称之为baeldung：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-realm.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们需要添加一个客户端，我们将命名为baeldung-api：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-client-1024x724.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后，让我们使用用户菜单添加一个名为Jane Doe的用户：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-user-1024x724.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在我们已经创建了用户，我们必须为其分配一个密码。让我们选择s3cr3t并取消勾选临时按钮：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-update-password-1024x724.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>现在我们已经设置了我们的Keycloak领域，有一个baeldung-api客户端和一个Jane Doe用户</strong>。</p><p>接下来，我们将配置Spring使用Keycloak作为身份提供者。</p><h3 id="_2-3-将两者结合起来" tabindex="-1"><a class="header-anchor" href="#_2-3-将两者结合起来"><span>2.3. 将两者结合起来</span></a></h3><p>首先，我们将身份控制委托给Keycloak服务器。为此，我们将使用spring-boot-starter-oauth2-resource-server库。它将允许我们使用Keycloak服务器验证JWT令牌。因此，让我们将其添加到我们的pom中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-oauth2-resource-server`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们继续配置Spring Security以添加OAuth 2资源服务器支持：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;keycloak.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">protected</span> <span class="token class-name">SessionAuthenticationStrategy</span> <span class="token function">sessionAuthenticationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NullAuthenticatedSessionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>auth <span class="token operator">-&gt;</span> auth<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">oauth2ResourceServer</span><span class="token punctuation">(</span><span class="token class-name">OAuth2ResourceServerConfigurer</span><span class="token operator">::</span><span class="token function">jwt</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们正在设置一个新的过滤器链，它将适用于所有传入的请求。它将验证绑定的JWT令牌与我们的Keycloak服务器。</p><p>由于我们正在构建一个带有仅承载者身份验证的无状态应用程序，<strong>我们将使用_NullAuthenticatedSessionStrategy_作为会话策略</strong>。此外，《@ConditionalOnProperty_》允许我们通过将_keycloak.enabled_属性设置为_false_来禁用Keycloak配置。</p><p>最后，让我们在_application.properties_文件中添加连接到我们的Keycloak所需的配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">keycloak.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.security.oauth2.resourceserver.jwt.issuer-uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:8180/auth/realms/baeldung-api</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在我们的应用程序是安全的，并且在每个请求上查询Keycloak以验证身份验证</strong>。</p><h2 id="_3-为keycloak设置testcontainers" tabindex="-1"><a class="header-anchor" href="#_3-为keycloak设置testcontainers"><span>3. 为Keycloak设置Testcontainers</span></a></h2><h3 id="_3-1-导出领域配置" tabindex="-1"><a class="header-anchor" href="#_3-1-导出领域配置"><span>3.1. 导出领域配置</span></a></h3><p>Keycloak容器启动时没有任何配置。因此，<strong>当容器启动时，我们必须将其作为JSON文件导入</strong>。让我们从我们当前运行的实例中导出此文件：</p><p>不幸的是，Keycloak不通过管理界面导出用户。我们可以登录到容器并使用_kc.sh export_命令。对于我们的示例，手动编辑生成的_realm-export.json_文件并添加我们的Jane Doe更容易。让我们在最终的大括号之前添加此配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;users&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;janedoe&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jane.doe@baeldung.com&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;credentials&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;s3cr3t&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;clientRoles&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;account&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;view-profile&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;manage-account&quot;</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们将_realm-export.json_文件包含在我们的项目中的_src/test/resources/keycloak_文件夹中。我们将在启动Keycloak容器时使用它。</p><h3 id="_3-2-设置testcontainers" tabindex="-1"><a class="header-anchor" href="#_3-2-设置testcontainers"><span>3.2. 设置Testcontainers</span></a></h3><p>让我们添加testcontainers依赖项以及testcontainers-keycloak，它允许我们启动Keycloak容器：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.dasniko`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````testcontainers-keycloak`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.1.2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.testcontainers`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````testcontainers`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.16.3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们创建一个类，所有测试都将从中派生。我们使用它来配置由Testcontainers启动的Keycloak容器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">KeycloakTestContainers</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRealmImportFile</span><span class="token punctuation">(</span><span class="token string">&quot;keycloak/realm-export.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        keycloak<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态声明和启动我们的容器将确保它将为所有测试实例化和启动一次。<strong>我们使用_KeycloakContainer_对象的_withRealmImportFile_方法在启动时指定要导入的领域的配置</strong>。</p><h3 id="_3-3-spring-boot测试配置" tabindex="-1"><a class="header-anchor" href="#_3-3-spring-boot测试配置"><span>3.3. Spring Boot测试配置</span></a></h3><p>Keycloak容器使用随机端口。所以我们需要覆盖_application.properties_中定义的_spring.security.oauth2.resourceserver.jwt.issuer-uri_配置一旦启动。为此，我们将使用方便的_@DynamicPropertySource_注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DynamicPropertySource</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerResourceServerIssuerProperty</span><span class="token punctuation">(</span><span class="token class-name">DynamicPropertyRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    registry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;spring.security.oauth2.resourceserver.jwt.issuer-uri&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> keycloak<span class="token punctuation">.</span><span class="token function">getAuthServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/realms/baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-创建集成测试" tabindex="-1"><a class="header-anchor" href="#_4-创建集成测试"><span>4. 创建集成测试</span></a></h2><p>现在我们已经拥有负责启动我们的Keycloak容器和配置Spring属性的主要测试类，让我们创建一个集成测试调用我们的_User_控制器。</p><h3 id="_4-1-获取访问令牌" tabindex="-1"><a class="header-anchor" href="#_4-1-获取访问令牌"><span>4.1. 获取访问令牌</span></a></h3><p>首先，让我们添加到我们的抽象类IntegrationTest一个使用Jane Doe的凭据请求令牌的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">URI</span> authorizationURI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URIBuilder</span><span class="token punctuation">(</span>keycloak<span class="token punctuation">.</span><span class="token function">getAuthServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/realms/baeldung/protocol/openid-connect/token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">WebClient</span> webclient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">MultiValueMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Linked</span>```java\n<span class="token class-name">MultiValueMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nformData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;grant_type&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nformData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung-api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nformData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;jane.doe@baeldung.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nformData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;s3cr3t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> result <span class="token operator">=</span> webclient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>authorizationURI<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromFormData</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用Webflux的WebClient发布一个包含获取访问令牌所需不同参数的表单。</p><p>最后，我们将<strong>解析Keycloak服务器的响应以从中提取令牌</strong>。具体来说，我们生成一个包含_Bearer_关键字的经典身份验证字符串，后面跟着令牌的内容，准备在标题中使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JacksonJsonParser</span> jsonParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacksonJsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> jsonParser<span class="token punctuation">.</span><span class="token function">parseMap</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-创建集成测试" tabindex="-1"><a class="header-anchor" href="#_4-2-创建集成测试"><span>4.2. 创建集成测试</span></a></h3><p>让我们快速设置针对我们配置的Keycloak容器的集成测试。我们将使用RestAssured和Hamcrest进行测试。让我们添加rest-assured依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````io.rest-assured`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````rest-assured`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以创建我们的测试，使用我们的抽象_IntegrationTest_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenAuthenticatedUser_whenGetMe_shouldReturnMyInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token function">given</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token function">getJaneDoeBearer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/me&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;janedoe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;jane.doe@baeldung.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，<strong>从Keycloak获取的访问令牌被添加到请求的Authorization标题中</strong>。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，<strong>我们设置了针对由Testcontainers管理的实际Keycloak的集成测试</strong>。我们导入了一个领域配置，以便每次启动测试阶段时都有一个预配置的环境。</p><p>像往常一样，本文中使用的所有代码示例都可以在GitHub上找到。</p>',72),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-17-Spring Boot   Keycloak Integration Testing with Testcontainers.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Keycloak%20Integration%20Testing%20with%20Testcontainers.html","title":"Spring Boot – 使用Testcontainers进行Keycloak集成测试","lang":"zh-CN","frontmatter":{"date":"2022-09-01T00:00:00.000Z","category":["Spring Boot","Keycloak"],"tag":["Spring Security","OAuth","Integration Testing","Testcontainers"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Keycloak, Spring Security, OAuth, Integration Testing, Testcontainers"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Keycloak%20Integration%20Testing%20with%20Testcontainers.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Boot – 使用Testcontainers进行Keycloak集成测试"}],["meta",{"property":"og:description","content":"Spring Boot – 使用Testcontainers进行Keycloak集成测试 如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。 >> 学习Spring 安全 1. 引言 集成测试在验证应用程序是否正常工作时至关重要。我们还应该正确地测试认证，因为它是一个敏感部分。Testcont..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-login-page.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T04:07:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"OAuth"}],["meta",{"property":"article:tag","content":"Integration Testing"}],["meta",{"property":"article:tag","content":"Testcontainers"}],["meta",{"property":"article:published_time","content":"2022-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T04:07:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot – 使用Testcontainers进行Keycloak集成测试\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-login-page.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-realm.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-client-1024x724.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-create-user-1024x724.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/09/Keycloak-update-password-1024x724.png\\"],\\"datePublished\\":\\"2022-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T04:07:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Boot – 使用Testcontainers进行Keycloak集成测试 如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。 >> 学习Spring 安全 1. 引言 集成测试在验证应用程序是否正常工作时至关重要。我们还应该正确地测试认证，因为它是一个敏感部分。Testcont..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 使用Keycloak设置Spring Security","slug":"_2-使用keycloak设置spring-security","link":"#_2-使用keycloak设置spring-security","children":[{"level":3,"title":"2.1. 设置Spring Boot和Spring Security","slug":"_2-1-设置spring-boot和spring-security","link":"#_2-1-设置spring-boot和spring-security","children":[]},{"level":3,"title":"2.2. 配置Keycloak","slug":"_2-2-配置keycloak","link":"#_2-2-配置keycloak","children":[]},{"level":3,"title":"2.3. 将两者结合起来","slug":"_2-3-将两者结合起来","link":"#_2-3-将两者结合起来","children":[]}]},{"level":2,"title":"3. 为Keycloak设置Testcontainers","slug":"_3-为keycloak设置testcontainers","link":"#_3-为keycloak设置testcontainers","children":[{"level":3,"title":"3.1. 导出领域配置","slug":"_3-1-导出领域配置","link":"#_3-1-导出领域配置","children":[]},{"level":3,"title":"3.2. 设置Testcontainers","slug":"_3-2-设置testcontainers","link":"#_3-2-设置testcontainers","children":[]},{"level":3,"title":"3.3. Spring Boot测试配置","slug":"_3-3-spring-boot测试配置","link":"#_3-3-spring-boot测试配置","children":[]}]},{"level":2,"title":"4. 创建集成测试","slug":"_4-创建集成测试","link":"#_4-创建集成测试","children":[{"level":3,"title":"4.1. 获取访问令牌","slug":"_4-1-获取访问令牌","link":"#_4-1-获取访问令牌","children":[]},{"level":3,"title":"4.2. 创建集成测试","slug":"_4-2-创建集成测试","link":"#_4-2-创建集成测试","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721189254000,"updatedTime":1721189254000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.22,"words":1867},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Spring Boot   Keycloak Integration Testing with Testcontainers.md","localizedDate":"2022年9月1日","excerpt":"\\n<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>\\n<p><strong>&gt;&gt; 学习Spring</strong>\\n<strong>安全</strong></p>\\n<h2>1. 引言</h2>\\n<p>集成测试在验证应用程序是否正常工作时至关重要。我们还应该正确地测试认证，因为它是一个敏感部分。Testcontainers允许我们在测试阶段启动Docker容器，以针对实际的技术栈运行我们的测试。</p>\\n<p>在本文中，<strong>我们将看到如何使用Testcontainers设置针对实际Keycloak实例的集成测试</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
