import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DmJfAgU2.js";const p={},e=t('<h1 id="apache-commons-compress-项目简介" tabindex="-1"><a class="header-anchor" href="#apache-commons-compress-项目简介"><span>Apache Commons Compress 项目简介</span></a></h1><p>在本教程中，我们将学习如何使用 Apache Commons Compress 来压缩、归档和提取文件。我们还将了解其支持的格式以及一些限制。</p><h2 id="_2-apache-commons-compress-是什么" tabindex="-1"><a class="header-anchor" href="#_2-apache-commons-compress-是什么"><span>2. Apache Commons Compress 是什么</span></a></h2><p><strong>Apache Commons Compress 是一个库，它为最广泛使用的压缩和归档格式创建了一个标准接口。</strong> 它从无处不在的 TAR、ZIP 和 GZIP 到不太知名但同样常用的格式，如 BZIP2、XZ、LZMA 和 Snappy。</p><h3 id="_2-1-压缩器和归档器之间的区别" tabindex="-1"><a class="header-anchor" href="#_2-1-压缩器和归档器之间的区别"><span>2.1. 压缩器和归档器之间的区别</span></a></h3><p><strong>归档器（例如 TAR）将目录结构捆绑到一个单一文件中，而压缩器接收一个字节流并使其变小，节省空间。</strong> 有些格式（如 ZIP）可以充当归档器和压缩器，但库中将其视为归档器。</p><p>我们可以通过查看 Commons Compress 提供的 <em>ArchiveStreamFactory</em> 类的一些静态字段来检查支持的归档格式。相反，我们可以查看 <em>CompressorStreamFactory</em> 来了解支持的压缩格式。</p><h3 id="_2-2-commons-compress-和附加依赖" tabindex="-1"><a class="header-anchor" href="#_2-2-commons-compress-和附加依赖"><span>2.2. Commons Compress 和附加依赖</span></a></h3><p>让我们从向我们的项目添加 <em>commons-compress</em> 开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.commons```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```commons-compress```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.26.1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>开箱即用，Commons Compress 支持 TAR、ZIP、BZIP2、CPIO 和 GZIP。但是，对于其他格式，我们需要额外的依赖。</strong> 让我们添加 XZ、7z 和 LZMA 支持：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.tukaani```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```xz```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.9```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，对于 LZ4 和 ZSTD：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.github.luben```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```zstd-jni```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.5.5-11```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些，我们将避免在读写这些类型的文件时出现错误。</p><h2 id="_3-压缩和解压缩流" tabindex="-1"><a class="header-anchor" href="#_3-压缩和解压缩流"><span>3. 压缩和解压缩流</span></a></h2><p>虽然库为这些不同格式的共同操作创建了一个抽象，但它们也有独特的功能。我们使用特定的实现来访问这些功能，例如 <em>GzipCompressorInputStream</em> 和 <em>LZMACompressorInputStream</em>。<strong>相反，我们将专注于 <em>CompressorStreamFactory</em>，它帮助我们获取一个实现，而不需要特定的类，这有助于创建格式无关的代码。</strong></p><h3 id="_3-1-压缩文件" tabindex="-1"><a class="header-anchor" href="#_3-1-压缩文件"><span>3.1. 压缩文件</span></a></h3><p>在压缩文件时，我们必须将所需的压缩格式传递给工厂方法。Commons Compress 包含一个 <em>FileNameUtils</em> 类，我们将使用它来获取我们的文件扩展名并将其作为格式传递。然后，我们打开一个输出流，获取一个压缩器实例，并将来自我们的 <em>Path</em> 的字节写入其中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressUtils</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compressFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">FileNameUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token class-name">BufferedOutputStream</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token class-name">CompressorOutputStream</span> compressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressorStreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">createCompressorOutputStream</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> compressor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用一个简单的文本文件来测试它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenFile_whenCompressing_thenCompressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Path</span> destination <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/simple.txt.gz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">CompressUtils</span><span class="token punctuation">.</span><span class="token function">compressFile</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/simple.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意我们这里使用的是 GZIP，它由“gz”扩展名表示。我们可以通过改变所需 <em>destination</em> 的扩展名来使用任何其他支持的格式。</strong> 此外，我们可以将任何文件类型作为输入。</p><h3 id="_3-2-解压缩压缩文件" tabindex="-1"><a class="header-anchor" href="#_3-2-解压缩压缩文件"><span>3.2. 解压缩压缩文件</span></a></h3><p>让我们解压缩使用任何支持的格式压缩的文件。<strong>首先，我们需要为文件打开一个缓冲输入流，并创建一个压缩输入流（通过读取文件的前几个字节来检测压缩格式）。然后，将压缩输入写入输出流，得到一个解压缩的文件或归档：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">BufferedInputStream</span> inputBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">CompressorInputStream</span> decompressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressorStreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">createCompressorInputStream</span><span class="token punctuation">(</span>inputBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>decompressor<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用一个“tar.gz”文件来测试，这表明它是一个使用 GZIP 压缩的 TAR 归档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCompressedArchive_whenDecompressing_thenArchiveAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Path</span> destination <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/decompressed-archive.tar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">CompressUtils</span><span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/archive.tar.gz&quot;</span><span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，任何支持的归档器和压缩器的组合在这里都可以工作，而不需要更改任何代码。例如，我们可以将“archive.cpio.xz”文件作为输入。我们甚至可以解压缩一个 GZIP 压缩的 ZIP 文件。<strong>最重要的是，这个方法不仅限于归档文件。任何压缩文件都可以用它来解压缩。</strong></p><h2 id="_4-创建和操作归档" tabindex="-1"><a class="header-anchor" href="#_4-创建和操作归档"><span>4. 创建和操作归档</span></a></h2><p>要创建归档，我们需要指定我们想要的格式。<strong>为了简化事情，<em>Archiver</em> 类有一个方便的方法，可以将整个目录归档到目标文件：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">archive</span><span class="token punctuation">(</span><span class="token class-name">Path</span> directory<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">FileNameUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">new</span> <span class="token class-name">Archiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-结合归档器和压缩器" tabindex="-1"><a class="header-anchor" href="#_4-1-结合归档器和压缩器"><span>4.1. 结合归档器和压缩器</span></a></h3><p><strong>我们也可以结合归档器和压缩器，在单个操作中创建一个压缩归档。</strong> 为了简化这一点，我们将扩展名视为压缩格式，将前面的扩展名视为归档格式。然后，我们为生成的压缩归档打开一个缓冲输出流，根据我们的压缩格式创建一个压缩器，并实例化一个从我们压缩器的输出中消费的 <em>ArchiveOutputStream</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">archiveAndCompress</span><span class="token punctuation">(</span><span class="token class-name">Path</span> directory<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> compressionFormat <span class="token operator">=</span> <span class="token class-name">FileNameUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> archiveFormat <span class="token operator">=</span> <span class="token class-name">FilenameUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>\n      destination<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> compressionFormat<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> archive <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">BufferedOutputStream</span> archiveBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">CompressorOutputStream</span> compressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressorStreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">createCompressorOutputStream</span><span class="token punctuation">(</span>compressionFormat<span class="token punctuation">,</span> archiveBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">ArchiveOutputStream</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` archiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArchiveStreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">createArchiveOutputStream</span><span class="token punctuation">(</span>archiveFormat<span class="token punctuation">,</span> compressor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">Archiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>archiver<span class="token punctuation">,</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们仍然使用 <em>Archiver</em>，但现在使用的是接收 <em>ArchiveOutputStream</em> 的 <em>create()</em> 版本。</p><h3 id="_4-2-解归档归档" tabindex="-1"><a class="header-anchor" href="#_4-2-解归档归档"><span>4.2. 解归档归档</span></a></h3><p>使用 <em>Expander</em> 类，我们可以在一行中解归档我们的未压缩归档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token class-name">Path</span> archive<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">Expander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们传递归档文件和我们想要提取文件的目录。<strong>这个实用方法负责打开（和关闭）输入流，检测归档类型，遍历归档中的所有条目，并将它们复制到我们选择的目录。</strong></p><p>让我们编写一个方法，而不是提取整个内容，而是从归档中提取单个条目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">extractOne</span><span class="token punctuation">(</span><span class="token class-name">Path</span> archivePath<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">Path</span> destinationDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>archivePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">BufferedInputStream</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">ArchiveInputStream</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArchiveStreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">createArchiveInputStream</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">ArchiveEntry</span> entry<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry <span class="token operator">=</span> archive<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Path</span> outFile <span class="token operator">=</span> destinationDirectory<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打开 <em>ArchiveInputStream</em> 后，我们不断调用归档上的 <em>getNextEntry()</em>，直到我们找到一个具有相同名称的条目。</strong> 如有必要，还会创建任何父目录。然后，它的内容被写入我们的目的地目录。<strong>请注意，文件名可以表示归档内的子目录。</strong> 考虑我们的归档包含一个名为“some.txt”的文件在“sub-directory”下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenExistingArchive_whenExtractingSingleEntry_thenFileExtracted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Path</span> archive <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span>get```java\n    <span class="token class-name">String</span> targetFile <span class="token operator">=</span> <span class="token string">&quot;sub-directory/some.txt&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">CompressUtils</span><span class="token punctuation">.</span><span class="token function">extractOne</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> targetFile<span class="token punctuation">,</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/sub-directory/some.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-向现有归档添加条目" tabindex="-1"><a class="header-anchor" href="#_4-4-向现有归档添加条目"><span>4.4. 向现有归档添加条目</span></a></h3><p><strong>不幸的是，该库没有给我们一个简单的方法来将新条目包含到现有归档中。</strong> 如果我们打开归档并调用 <em>putArchiveEntry()</em>，我们将覆盖其内容。因此，在插入新条目之前，也需要重写所有现有条目。<strong>而不是为此创建一个新方法，我们将重用我们创建的方法。我们将提取归档，将新文件复制到目录结构中，再次归档目录，然后删除旧归档：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenExistingArchive_whenAddingSingleEntry_thenArchiveModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Path</span> archive <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/archive.tar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Path</span> newArchive <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/modified-archive.tar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Path</span> tmpDir <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/extracted-archive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Path</span> newEntry <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/new-entry.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">CompressUtils</span><span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>newEntry<span class="token punctuation">,</span> tmpDir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>newEntry<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">CompressUtils</span><span class="token punctuation">.</span><span class="token function">archive</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">,</span> newArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span>newArchive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">deleteDirectory</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>newArchive<span class="token punctuation">,</span> archive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这将销毁旧归档，因此建议保留备份。</strong></p><h3 id="_4-5-直接使用具体实现以获得独家功能" tabindex="-1"><a class="header-anchor" href="#_4-5-直接使用具体实现以获得独家功能"><span>4.5. 直接使用具体实现以获得独家功能</span></a></h3><p>如果我们想要从每种格式中获得独家功能，我们可以直接使用特定的实现类。<strong>例如，而不是使用 <em>ArchiveOutputStream</em>，我们将实例化一个 <em>ZipArchiveOutputStream</em>，这样我们就可以直接设置其压缩方法和级别：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">zip</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">Path</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">ZipArchiveOutputStream</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchiveOutputStream</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        archive<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span><span class="token class-name">ZipEntry</span><span class="token punctuation">.</span><span class="token constant">DEFLATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        archive<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Deflater</span><span class="token punctuation">.</span><span class="token constant">BEST_COMPRESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        archive<span class="token punctuation">.</span><span class="token function">putArchiveEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipArchiveEntry</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> archive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        archive<span class="token punctuation">.</span><span class="token function">closeArchiveEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这比仅使用 <em>Archiver</em> 需要更多的代码，但提供了更多的控制。</p><h2 id="_5-限制" tabindex="-1"><a class="header-anchor" href="#_5-限制"><span>5. 限制</span></a></h2><p>虽然 Apache Commons Compress 提供了一个多功能的文件压缩和归档工具包，但认识到某些限制和考虑因素是很重要的。首先，虽然该库为各种压缩和归档格式提供了广泛的支持，但处理多卷归档可能会带来需要仔细考虑的挑战。<strong>此外，可能会出现编码问题。主要是在处理不同的文件系统或非标准化数据时。</strong></p><p>此外，尽管该库提供了全面的功能，Apache 建议在特定场景中利用 ZipFile 以获得更好的控制。最后，TAR 格式也有专门的页面进行考虑。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了 Apache Commons Compress 是一个有价值的资源，用于高效的文件压缩和归档解决方案。通过了解其功能、限制和最佳实践，我们可以有效地利用这个库，以一种格式无关的方式简化文件管理流程。</p><p>如常，源代码可在 GitHub 上获得。</p><p>发表文章后 30 天内开放评论。对于超过此日期的任何问题，请使用网站上的联系表单。</p><p>OK</p>',60),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Intro to the Apache Commons Compress Project.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Intro%20to%20the%20Apache%20Commons%20Compress%20Project.html","title":"Apache Commons Compress 项目简介","lang":"zh-CN","frontmatter":{"date":"2024-06-19T00:00:00.000Z","category":["Apache Commons Compress","Java"],"tag":["Java","Compression","Archiving"],"head":[["meta",{"name":"keywords","content":"Apache Commons Compress, Java, Compression, Archiving"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Intro%20to%20the%20Apache%20Commons%20Compress%20Project.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Apache Commons Compress 项目简介"}],["meta",{"property":"og:description","content":"Apache Commons Compress 项目简介 在本教程中，我们将学习如何使用 Apache Commons Compress 来压缩、归档和提取文件。我们还将了解其支持的格式以及一些限制。 2. Apache Commons Compress 是什么 Apache Commons Compress 是一个库，它为最广泛使用的压缩和归档格式创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Compression"}],["meta",{"property":"article:tag","content":"Archiving"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apache Commons Compress 项目简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Apache Commons Compress 项目简介 在本教程中，我们将学习如何使用 Apache Commons Compress 来压缩、归档和提取文件。我们还将了解其支持的格式以及一些限制。 2. Apache Commons Compress 是什么 Apache Commons Compress 是一个库，它为最广泛使用的压缩和归档格式创..."},"headers":[{"level":2,"title":"2. Apache Commons Compress 是什么","slug":"_2-apache-commons-compress-是什么","link":"#_2-apache-commons-compress-是什么","children":[{"level":3,"title":"2.1. 压缩器和归档器之间的区别","slug":"_2-1-压缩器和归档器之间的区别","link":"#_2-1-压缩器和归档器之间的区别","children":[]},{"level":3,"title":"2.2. Commons Compress 和附加依赖","slug":"_2-2-commons-compress-和附加依赖","link":"#_2-2-commons-compress-和附加依赖","children":[]}]},{"level":2,"title":"3. 压缩和解压缩流","slug":"_3-压缩和解压缩流","link":"#_3-压缩和解压缩流","children":[{"level":3,"title":"3.1. 压缩文件","slug":"_3-1-压缩文件","link":"#_3-1-压缩文件","children":[]},{"level":3,"title":"3.2. 解压缩压缩文件","slug":"_3-2-解压缩压缩文件","link":"#_3-2-解压缩压缩文件","children":[]}]},{"level":2,"title":"4. 创建和操作归档","slug":"_4-创建和操作归档","link":"#_4-创建和操作归档","children":[{"level":3,"title":"4.1. 结合归档器和压缩器","slug":"_4-1-结合归档器和压缩器","link":"#_4-1-结合归档器和压缩器","children":[]},{"level":3,"title":"4.2. 解归档归档","slug":"_4-2-解归档归档","link":"#_4-2-解归档归档","children":[]},{"level":3,"title":"4.4. 向现有归档添加条目","slug":"_4-4-向现有归档添加条目","link":"#_4-4-向现有归档添加条目","children":[]},{"level":3,"title":"4.5. 直接使用具体实现以获得独家功能","slug":"_4-5-直接使用具体实现以获得独家功能","link":"#_4-5-直接使用具体实现以获得独家功能","children":[]}]},{"level":2,"title":"5. 限制","slug":"_5-限制","link":"#_5-限制","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.53,"words":2258},"filePathRelative":"posts/baeldung/Archive/Intro to the Apache Commons Compress Project.md","localizedDate":"2024年6月19日","excerpt":"\\n<p>在本教程中，我们将学习如何使用 Apache Commons Compress 来压缩、归档和提取文件。我们还将了解其支持的格式以及一些限制。</p>\\n<h2>2. Apache Commons Compress 是什么</h2>\\n<p><strong>Apache Commons Compress 是一个库，它为最广泛使用的压缩和归档格式创建了一个标准接口。</strong> 它从无处不在的 TAR、ZIP 和 GZIP 到不太知名但同样常用的格式，如 BZIP2、XZ、LZMA 和 Snappy。</p>\\n<h3>2.1. 压缩器和归档器之间的区别</h3>\\n<p><strong>归档器（例如 TAR）将目录结构捆绑到一个单一文件中，而压缩器接收一个字节流并使其变小，节省空间。</strong> 有些格式（如 ZIP）可以充当归档器和压缩器，但库中将其视为归档器。</p>","autoDesc":true}');export{k as comp,d as data};
