import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as e}from"./app-CseMoHkL.js";const t={},p=e(`<hr><h1 id="pojo、javabeans、dto-和-vo-之间的区别" tabindex="-1"><a class="header-anchor" href="#pojo、javabeans、dto-和-vo-之间的区别"><span>POJO、JavaBeans、DTO 和 VO 之间的区别</span></a></h1><p>在本教程中，我们将学习数据传输对象（DTO）、值对象（VO）、普通旧Java对象（POJO）和JavaBeans是什么。我们将探讨它们之间的区别，并了解何时使用每种类型。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><h2 id="_2-普通旧java对象" tabindex="-1"><a class="header-anchor" href="#_2-普通旧java对象"><span>2. 普通旧Java对象</span></a></h2><p><strong>POJO，也就是普通旧Java对象，是一个没有引用任何特定框架的普通Java对象。</strong> 这个术语用来指代一个简单、轻量级的Java对象。</p><p>POJO不使用属性和方法的任何命名约定。</p><p>让我们定义一个基本的_EmployeePOJO_对象，它有三个属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeePOJO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EmployeePOJO</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>startDate <span class="token operator">=</span> startDate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startDate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，上述Java对象定义了表示员工的结构，并且不依赖于任何框架。</p><h3 id="_3-1-什么是javabean" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是javabean"><span>3.1 什么是JavaBean？</span></a></h3><p><strong>JavaBean在很大程度上类似于POJO，但有一些严格的规则来实现它。</strong></p><p>规则规定它应该是可序列化的，有一个空构造函数，并且使用遵循_getX()_和_setX()_约定的方法来访问变量。</p><h3 id="_3-2-pojo作为javabean" tabindex="-1"><a class="header-anchor" href="#_3-2-pojo作为javabean"><span>3.2 POJO作为JavaBean</span></a></h3><p>由于JavaBean本质上是POJO，让我们通过实现必要的bean规则将_EmployeePOJO_转换为JavaBean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3760445487636086034L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EmployeeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">EmployeeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>startDate <span class="token operator">=</span> startDate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 额外的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，为了将POJO转换为JavaBean，我们实现了_Serializable_接口，将属性标记为_private_，并使用getter/setter方法来访问属性。</p><h2 id="_4-dto" tabindex="-1"><a class="header-anchor" href="#_4-dto"><span>4. DTO</span></a></h2><h3 id="_4-1-dto模式" tabindex="-1"><a class="header-anchor" href="#_4-1-dto模式"><span>4.1 DTO模式</span></a></h3><p><strong>DTO，也称为数据传输对象，封装值以在进程或网络之间传输数据。</strong></p><p>这有助于减少调用的方法数量。通过在单个调用中包含多个参数或值，我们减少了远程操作中的网络开销。</p><p>这种模式的另一个优点是封装了序列化的逻辑。它允许程序以特定格式存储和传输数据。</p><p><strong>DTO没有明确的行为。它基本上通过解耦领域模型和表示层来帮助使代码松耦合。</strong></p><h3 id="_4-2-如何使用dto" tabindex="-1"><a class="header-anchor" href="#_4-2-如何使用dto"><span>4.2 如何使用DTO？</span></a></h3><p>DTO具有平坦的结构，没有业务逻辑。它们使用与POJO相同的格式。DTO只包含存储、访问器以及与序列化或解析相关的方法是标准的。</p><p>DTO基本上映射到领域模型，因此将数据发送到方法或服务器。</p><p>让我们创建_EmployeeDTO_，它组合了创建员工所需的所有必要细节。我们将这些数据在单个请求中发送到服务器，优化了与API的交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDTO</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">;</span>

    <span class="token comment">// 标准的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述DTO与不同的服务交互并处理数据流。这种DTO模式可以在任何服务中使用，没有任何框架限制。</p><h2 id="_5-vo" tabindex="-1"><a class="header-anchor" href="#_5-vo"><span>5. VO</span></a></h2><p><strong>VO，也称为值对象，是一种特殊类型的对象，可以保存值，例如_java.lang.Integer_和_java.lang.Long_。</strong></p><p>VO应该始终覆盖_equals()_和_hashCode()_方法。VO通常封装小对象，如数字、日期、字符串等。它们遵循值语义，即直接更改对象的值，并通过传递副本而不是引用来传递。</p><p>将值对象设为不可变是一种好习惯。值的更改只通过创建一个新对象来发生，而不是通过更新旧对象本身的值。这有助于理解隐含的合同，即两个创建相等的值对象应该保持相等。</p><p>让我们定义_EmployeeVO_并覆盖_equals()_和_hashCode()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeVO</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EmployeeVO</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>startDate <span class="token operator">=</span> startDate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Getters</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token class-name">EmployeeVO</span> emp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EmployeeVO</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastName<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>startDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> startDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了POJO、JavaBeans、DTO和值对象的定义。我们还看到了一些框架和库如何利用JavaBean命名约定，以及如何将POJO转换为JavaBean。我们还研究了DTO模式和值对象以及它们在不同场景中的使用。</p><p>接下来，Java 14记录通过抽象getter、setter、equals和hashcode提高了可读性，并提供了开箱即用的不可变性。你可以在我们的文章中阅读更多相关内容。</p><p>像往常一样，这些示例的代码可以在GitHub上找到。</p>`,39),o=[p];function l(c,i){return s(),n("div",null,o)}const d=a(t,[["render",l],["__file","2024-07-20-Difference Between POJO  JavaBeans  DTO and VO.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Difference%20Between%20POJO%20%20JavaBeans%20%20DTO%20and%20VO.html","title":"POJO、JavaBeans、DTO 和 VO 之间的区别","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java"],"tag":["POJO","JavaBeans","DTO","VO"],"head":[["meta",{"name":"keywords","content":"POJO, JavaBeans, DTO, VO, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Difference%20Between%20POJO%20%20JavaBeans%20%20DTO%20and%20VO.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"POJO、JavaBeans、DTO 和 VO 之间的区别"}],["meta",{"property":"og:description","content":"POJO、JavaBeans、DTO 和 VO 之间的区别 在本教程中，我们将学习数据传输对象（DTO）、值对象（VO）、普通旧Java对象（POJO）和JavaBeans是什么。我们将探讨它们之间的区别，并了解何时使用每种类型。 1. 概述 2. 普通旧Java对象 POJO，也就是普通旧Java对象，是一个没有引用任何特定框架的普通Java对象。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T18:39:14.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"POJO"}],["meta",{"property":"article:tag","content":"JavaBeans"}],["meta",{"property":"article:tag","content":"DTO"}],["meta",{"property":"article:tag","content":"VO"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T18:39:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"POJO、JavaBeans、DTO 和 VO 之间的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T18:39:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"POJO、JavaBeans、DTO 和 VO 之间的区别 在本教程中，我们将学习数据传输对象（DTO）、值对象（VO）、普通旧Java对象（POJO）和JavaBeans是什么。我们将探讨它们之间的区别，并了解何时使用每种类型。 1. 概述 2. 普通旧Java对象 POJO，也就是普通旧Java对象，是一个没有引用任何特定框架的普通Java对象。 ..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 普通旧Java对象","slug":"_2-普通旧java对象","link":"#_2-普通旧java对象","children":[{"level":3,"title":"3.1 什么是JavaBean？","slug":"_3-1-什么是javabean","link":"#_3-1-什么是javabean","children":[]},{"level":3,"title":"3.2 POJO作为JavaBean","slug":"_3-2-pojo作为javabean","link":"#_3-2-pojo作为javabean","children":[]}]},{"level":2,"title":"4. DTO","slug":"_4-dto","link":"#_4-dto","children":[{"level":3,"title":"4.1 DTO模式","slug":"_4-1-dto模式","link":"#_4-1-dto模式","children":[]},{"level":3,"title":"4.2 如何使用DTO？","slug":"_4-2-如何使用dto","link":"#_4-2-如何使用dto","children":[]}]},{"level":2,"title":"5. VO","slug":"_5-vo","link":"#_5-vo","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721500754000,"updatedTime":1721500754000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.96,"words":1189},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Difference Between POJO  JavaBeans  DTO and VO.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>POJO、JavaBeans、DTO 和 VO 之间的区别</h1>\\n<p>在本教程中，我们将学习数据传输对象（DTO）、值对象（VO）、普通旧Java对象（POJO）和JavaBeans是什么。我们将探讨它们之间的区别，并了解何时使用每种类型。</p>\\n<h2>1. 概述</h2>\\n<h2>2. 普通旧Java对象</h2>\\n<p><strong>POJO，也就是普通旧Java对象，是一个没有引用任何特定框架的普通Java对象。</strong> 这个术语用来指代一个简单、轻量级的Java对象。</p>\\n<p>POJO不使用属性和方法的任何命名约定。</p>\\n<p>让我们定义一个基本的_EmployeePOJO_对象，它有三个属性：</p>","autoDesc":true}');export{d as comp,k as data};
