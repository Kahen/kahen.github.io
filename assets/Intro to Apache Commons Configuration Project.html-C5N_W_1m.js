import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BlD1Md4S.js";const p={},e=t('<h1 id="apache-commons-configuration-项目入门" tabindex="-1"><a class="header-anchor" href="#apache-commons-configuration-项目入门"><span>Apache Commons Configuration 项目入门</span></a></h1><ol><li>概述</li></ol><p>在部署时，我们可能需要向应用程序提供一些配置。这些配置可能来自多个外部来源。</p><p>Apache Commons Configuration 提供了一种统一的方法来管理来自不同来源的配置。</p><p>在本教程中，我们将探讨 Apache Commons Configuration 如何帮助我们配置应用程序。</p><ol start="2"><li>Apache Commons Configuration 简介</li></ol><p>Apache Commons Configuration <strong>为 Java 应用程序提供了一个接口，用于访问和使用来自不同来源的配置数据</strong>。通过配置构建器，<strong>它提供了对单值和多值特性的类型化访问</strong>。</p><p>它一致地处理来自多个来源的属性，包括文件、数据库以及 XML 等分层文档。</p><h3 id="_2-1-maven-依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven-依赖"><span>2.1. Maven 依赖</span></a></h3><p>让我们首先将配置库和 bean 工具的最新版本添加到 <em>pom.xml</em>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.commons``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``commons-configuration2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.10.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``commons-beanutils``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``commons-beanutils``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.9.4``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-设置" tabindex="-1"><a class="header-anchor" href="#_2-2-设置"><span>2.2. 设置</span></a></h3><p>让我们定义一些我们可能遇到的常见配置文件。</p><p>我们将创建一个平面文件格式 - 一个 <em>.properties</em> 文件：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">db.host</span><span class="token punctuation">=</span><span class="token value attr-value">baeldung.com</span>\n<span class="token key attr-name">db.port</span><span class="token punctuation">=</span><span class="token value attr-value">9999</span>\n<span class="token key attr-name">db.user</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>\n<span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">bXlTZWNyZXRTdHJpbmc=</span>\n<span class="token key attr-name">db.url</span><span class="token punctuation">=</span><span class="token value attr-value">${db.host}:${db.port}</span>\n<span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">${sys:user.name}</span>\n<span class="token key attr-name">db.external-service</span><span class="token punctuation">=</span><span class="token value attr-value">${const:com.baeldung.commons.configuration.ExternalServices.BAELDUNG_WEBSITE}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们再创建一个以分层 XML 格式的文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>`\n`<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">SYSTEM</span> <span class="token string">&quot;validation-sample.dtd&quot;</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>`\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>``Pattern1``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>``Pattern2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><em>Configurations</em> 辅助类</li></ol><p>Apache Commons Configuration 提供了 <em>Configurations</em> 工具类，用于从不同来源读取配置，以便快速开始使用标准选项。<strong>这是一个线程安全的类，它帮助我们使用默认参数创建各种配置对象</strong>。</p><p>此外，我们还可以通过传递 <em>Parameters</em> 实例来提供自定义参数。</p><h3 id="_3-1-读取属性文件" tabindex="-1"><a class="header-anchor" href="#_3-1-读取属性文件"><span>3.1. 读取属性文件</span></a></h3><p>我们将<strong>通过 <em>Configurations</em> 类读取属性文件，并通过 <em>Configuration</em> 类访问它</strong>。有多种方法可以读取文件或获取测试资源文件夹。我们可以将属性读取或转换为数字或某些对象类型的 <em>List</em>。最后，我们还可以提供默认值。</p><p>让我们尝试从属性文件访问配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Configurations</span> configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Configuration</span> config <span class="token operator">=</span> configs<span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/configuration/file.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbHost <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;db.host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> dbPort <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;db.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbUser <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;db.user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbPassword <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;undefinedKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.com&quot;</span><span class="token punctuation">,</span> dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span> dbPort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> dbUser<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">,</span> dbPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-读取-xml-文件" tabindex="-1"><a class="header-anchor" href="#_3-2-读取-xml-文件"><span>3.2. 读取 XML 文件</span></a></h3><p>我们将使用 <em>XMLConfiguration</em> 类来访问 XML 文件中的属性，该类扩展了 <em>Configuration</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Configurations</span> configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">XMLConfiguration</span> config <span class="token operator">=</span> configs<span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/configuration/hierarchical.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> appender <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;appender[@name]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` encoderPatterns <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;appender.encoder.pattern&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> pattern1 <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;appender.encoder.pattern(0)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过点 &#39;._&#39; 符号的遍历可以访问输入文件的层次结构特性。</p><ol start="4"><li>来自属性文件的配置</li></ol><p>除了使用 <em>Configurations</em> 类之外，Apache Commons Configuration 还提供了支持以附加功能读取/访问此格式。<strong>属性文件的配置对象是使用 <em>FileBasedConfigurationBuilder</em> 实例化的</strong>。</p><p>让我们看一个示例，展示如何使用这个构建器访问属性文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Parameters</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FileBasedConfigurationBuilder</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileBasedConfiguration</span><span class="token punctuation">&gt;</span></span>`` builder <span class="token operator">=</span>\n  <span class="token keyword">new</span> <span class="token class-name">FileBasedConfigurationBuilder</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileBasedConfiguration</span><span class="token punctuation">&gt;</span></span>``<span class="token punctuation">(</span><span class="token class-name">PropertiesConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/configuration/file1.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，我们可以使用标准方法访问属性。此外，我们还可以通过对 <em>PropertiesReader</em> 或 <em>PropertiesWriter</em> 类的 <em>PropertiesConfiguration</em> 进行扩展，提供自定义的属性文件 IO 操作实现。</p><p>通过指定文件名作为值，还可以通过 <em>include</em> 和 <em>includeOptional</em> 标志链接更多的属性文件。这两个标志的区别在于，如果找不到属性文件，那么 <em>include</em> 标志会抛出 <em>ConfigurationException</em>。</p><p>首先，我们创建一个新的属性文件名为 <em>file1.properties</em>。此文件使用 <em>include</em> 包含了初始属性文件，并使用 <em>includeOptional</em> 包含了一个不存在的文件：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">db.host</span><span class="token punctuation">=</span><span class="token value attr-value">baeldung.com</span>\n\n<span class="token key attr-name">include</span><span class="token punctuation">=</span><span class="token value attr-value">file.properties</span>\n<span class="token key attr-name">includeOptional</span><span class="token punctuation">=</span><span class="token value attr-value">file2.properties</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们验证我们可以从两个属性文件中读取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Configuration</span> config <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbHost <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;db.host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> dbPort <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;db.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>来自 XML 的配置</li></ol><p>通过 XML 进行配置也是应用程序开发中的常见做法。该库提供了 <em>XMLConfiguration</em> 来访问 XML 文件中的属性。</p><p>XML 文件的一个标准需求是验证文件以确保没有差异。<em>XMLConfiguration</em> 提供了两个标志来验证文件的结构和内容。我们可以将 <em>validating</em> 标志设置为启用验证解析器，或者将 <em>schemaValidation</em> 标志设置为 <em>true</em>，除了正常验证外，还启用对模式的验证。</p><p>让我们为之前定义的 XML 文件定义一个模式：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">configuration</span> <span class="token attr-name">(appender+,</span> <span class="token attr-name">root)</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">appender</span> <span class="token attr-name">(encoder?)</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">appender</span>\n    <span class="token attr-name">name</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#REQUIRED</span>\n    <span class="token attr-name">class</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#REQUIRED</span>\n    <span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">encoder</span> <span class="token attr-name">(pattern+)</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">pattern</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">root</span> <span class="token attr-name">(appender-ref+)</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">appender-ref</span> <span class="token attr-name">EMPTY</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">appender-ref</span>\n    <span class="token attr-name">ref</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#REQUIRED</span>\n    <span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们运行一个测试，将 <em>schemaValidation</em> 设置为 true 以验证行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Parameters</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FileBasedConfigurationBuilder</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XMLConfiguration</span><span class="token punctuation">&gt;</span></span>`` builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileBasedConfigurationBuilder</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XMLConfiguration</span><span class="token punctuation">&gt;</span></span>``<span class="token punctuation">(</span>\n  <span class="token class-name">XMLConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/configuration/hierarchical.xml&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">setValidating</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">XMLConfiguration</span> config <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> appender <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;appender[@name]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` encoderPatterns <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;appender.encoder.pattern&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;STDOUT&quot;</span><span class="token punctuation">,</span> appender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> encoderPatterns<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>多租户配置</li></ol><p>在多租户应用程序设置中，多个客户端共享一个公共代码库，并通过每个客户端的配置属性进行区分。该库通过 <em>MultiFileConfigurationBuilder</em> 提供了处理此场景的支持。</p><p>我们需要为属性文件传递一个包含客户端识别参数的文件模式。最后，此参数可以通过插值解析，然后作为配置名称解析：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;tenant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> filePattern <span class="token operator">=</span> <span class="token string">&quot;src/test/resources/configuration/tenant-${sys:tenant}.properties&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">MultiFileConfigurationBuilder</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertiesConfiguration</span><span class="token punctuation">&gt;</span></span>` builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFileConfigurationBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n  <span class="token class-name">PropertiesConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">multiFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setFilePattern</span><span class="token punctuation">(</span>filePattern<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setPrefixLookups</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationInterpolator</span><span class="token punctuation">.</span><span class="token function">getDefaultPrefixLookups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Configuration</span> config <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> tenantAName <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Tenant A&quot;</span><span class="token punctuation">,</span> tenantAName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个文件模式；在此示例中，我们从 <em>System</em> 属性提供了租户值。</p><p><strong>我们还提供了 <em>DefaultPrefixLookups</em>，这将用于实例化 <em>MultiFileConfigurationBuilder</em> 的 <em>ConfigurationInterpolator</em></strong>。</p><ol start="7"><li>处理不同数据类型</li></ol><p>该库支持处理各种数据类型。让我们在以下子节中查看一些场景。</p><h3 id="_7-1-缺少属性" tabindex="-1"><a class="header-anchor" href="#_7-1-缺少属性"><span>7.1. 缺少属性</span></a></h3><p>可能尝试访问配置中不存在的属性。在这种情况下，<strong>如果返回值是对象类型，则返回 <em>null</em></strong>。</p><p>然而，<strong>如果返回值是原始类型，则抛出 <em>NoSuchElementException</em></strong>。我们可以通过传递默认值来覆盖此行为，以由方法返回：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">PropertiesConfiguration</span> propertiesConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> objectProperty <span class="token operator">=</span> propertiesConfig<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;anyProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> primitiveProperty <span class="token operator">=</span> propertiesConfig<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;anyProperty&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertNull</span><span class="token punctuation">(</span>objectProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> primitiveProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面</p>',58),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Intro to Apache Commons Configuration Project.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Intro%20to%20Apache%20Commons%20Configuration%20Project.html","title":"Apache Commons Configuration 项目入门","lang":"zh-CN","frontmatter":{"date":"2024-06-17T00:00:00.000Z","category":["Java","Apache Commons"],"tag":["Apache Commons Configuration","Java"],"description":"Apache Commons Configuration 项目入门 概述 在部署时，我们可能需要向应用程序提供一些配置。这些配置可能来自多个外部来源。 Apache Commons Configuration 提供了一种统一的方法来管理来自不同来源的配置。 在本教程中，我们将探讨 Apache Commons Configuration 如何帮助我们配...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Intro%20to%20Apache%20Commons%20Configuration%20Project.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Apache Commons Configuration 项目入门"}],["meta",{"property":"og:description","content":"Apache Commons Configuration 项目入门 概述 在部署时，我们可能需要向应用程序提供一些配置。这些配置可能来自多个外部来源。 Apache Commons Configuration 提供了一种统一的方法来管理来自不同来源的配置。 在本教程中，我们将探讨 Apache Commons Configuration 如何帮助我们配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:43:00.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Apache Commons Configuration"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:43:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apache Commons Configuration 项目入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-19T08:43:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"2.1. Maven 依赖","slug":"_2-1-maven-依赖","link":"#_2-1-maven-依赖","children":[]},{"level":3,"title":"2.2. 设置","slug":"_2-2-设置","link":"#_2-2-设置","children":[]},{"level":3,"title":"3.1. 读取属性文件","slug":"_3-1-读取属性文件","link":"#_3-1-读取属性文件","children":[]},{"level":3,"title":"3.2. 读取 XML 文件","slug":"_3-2-读取-xml-文件","link":"#_3-2-读取-xml-文件","children":[]},{"level":3,"title":"7.1. 缺少属性","slug":"_7-1-缺少属性","link":"#_7-1-缺少属性","children":[]}],"git":{"createdTime":1718626840000,"updatedTime":1718786580000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1},{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.14,"words":1543},"filePathRelative":"posts/baeldung/Intro to Apache Commons Configuration Project.md","localizedDate":"2024年6月17日","excerpt":"\\n<ol>\\n<li>概述</li>\\n</ol>\\n<p>在部署时，我们可能需要向应用程序提供一些配置。这些配置可能来自多个外部来源。</p>\\n<p>Apache Commons Configuration 提供了一种统一的方法来管理来自不同来源的配置。</p>\\n<p>在本教程中，我们将探讨 Apache Commons Configuration 如何帮助我们配置应用程序。</p>\\n<ol start=\\"2\\">\\n<li>Apache Commons Configuration 简介</li>\\n</ol>\\n<p>Apache Commons Configuration <strong>为 Java 应用程序提供了一个接口，用于访问和使用来自不同来源的配置数据</strong>。通过配置构建器，<strong>它提供了对单值和多值特性的类型化访问</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
