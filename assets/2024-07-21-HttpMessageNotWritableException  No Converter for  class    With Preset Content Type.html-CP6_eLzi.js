import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const e={},p=t(`<h1 id="httpmessagenotwritableexception-没有预设内容类型的转换器-类-baeldung" tabindex="-1"><a class="header-anchor" href="#httpmessagenotwritableexception-没有预设内容类型的转换器-类-baeldung"><span>HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung</span></a></h1><p>在这篇短文中，我们将仔细研究Spring异常 &quot;HttpMessageNotWritableException: no converter for [class …] with preset Content-Type&quot;。</p><p>首先，我们将揭示异常背后的主要原因。然后，我们将深入探讨如何使用一个实际示例来重现它，最后是如何解决它。</p><h2 id="_2-原因" tabindex="-1"><a class="header-anchor" href="#_2-原因"><span>2. 原因</span></a></h2><p>在深入细节之前，让我们尝试理解异常的含义。</p><p>异常的堆栈跟踪说明了一切：它告诉我们Spring <strong>找不到合适的</strong> <em>HttpMessageConverter</em> <strong>能够将Java对象转换为HTTP响应</strong>。</p><p>基本上，Spring依赖于 &quot;Accept&quot; 头部来检测它需要响应的媒体类型。</p><p>因此，<strong>使用没有预注册消息转换器的媒体类型将导致Spring抛出异常</strong>。</p><h2 id="_3-重现异常" tabindex="-1"><a class="header-anchor" href="#_3-重现异常"><span>3. 重现异常</span></a></h2><p>现在我们知道了什么导致Spring抛出我们的异常，让我们看看如何使用一个实际示例来重现它。</p><p>让我们创建一个处理器方法，并假装指定一个没有注册 <em>HttpMessageConverter</em> 的媒体类型（对于响应）。</p><p>例如，让我们使用 <em>APPLICATION_XML_VALUE</em> 或 &quot;application/xml&quot;：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/student/v3/{id}&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML_VALUE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getV3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;Robert&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Miller&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们发送一个请求到 <em>http://localhost:8080/api/student/v3/1</em> 并看看会发生什么：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8080/api/student/v3/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>端点发送回这个响应：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span><span class="token string">&quot;2022-02-01T18:23:37.490+00:00&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token property">&quot;error&quot;</span><span class="token operator">:</span><span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;path&quot;</span><span class="token operator">:</span><span class="token string">&quot;/api/student/v3/1&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确实，查看日志，Spring因 <em>HttpMessageNotWritableException</em> 异常而失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span>HttpMessageNotWritableException</span><span class="token operator">:</span> <span class="token class-name">No</span> converter <span class="token keyword">for</span> <span class="token punctuation">[</span><span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>noconverterfound<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>Student</span><span class="token punctuation">]</span> <span class="token keyword">with</span> <span class="token namespace">preset</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span> <span class="token char">&#39;null&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，异常被抛出是因为 <strong>没有 <em>HttpMessageConverter</em> 能够将 <em>Student</em> 对象编组和解组为XML</strong>。</p><p>最后，让我们创建一个测试用例来确认Spring抛出带有指定消息的 <em>HttpMessageNotWritableException</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenConverterNotFound_thenThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;/api/student/v3/1&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInternalServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResolvedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResolvedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;No converter for [class com.baeldung.boot.noconverterfound.model.Student] with preset Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-解决方案" tabindex="-1"><a class="header-anchor" href="#_4-解决方案"><span>4. <strong>解决方案</strong></span></a></h2><p><strong>修复异常的唯一方法是使用有一个注册消息转换器的媒体类型。</strong></p><p>Spring Boot依赖自动配置来注册内置的消息转换器。</p><p>例如，如果Jackson 2依赖项出现在类路径中，它将<strong>自动注册_MappingJackson2HttpMessageConverter_</strong>。</p><p>话虽如此，并且知道Spring Boot在web启动器中包含了Jackson，让我们创建一个新的端点，使用 <em>APPLICATION_JSON_VALUE</em> 媒体类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/student/v2/{id}&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getV2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cruyff&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们创建一个测试用例来确认一切按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenJsonConverterIsFound_thenReturnResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;/api/student/v2/1&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;id&#39;:1,&#39;firstName&#39;:&#39;Kevin&#39;,&#39;lastName&#39;:&#39;Cruyff&#39;, &#39;grade&#39;:&#39;AA&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，由于_MappingJackson2HttpMessageConverter_，在背后处理将 <em>Student</em> 对象转换为JSON，Spring没有抛出 <em>HttpMessageNotWritableException</em>。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这个简短的教程中，我们详细讨论了什么导致Spring抛出 &quot;HttpMessageNotWritableException No converter for [class …] with preset Content-Type&quot;。</p><p>在此过程中，我们展示了如何在实践中产生异常以及如何修复它。</p><p>一如既往，示例的完整源代码可在GitHub上找到。</p>`,35),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-21-HttpMessageNotWritableException  No Converter for  class    With Preset Content Type.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-21/2024-07-21-HttpMessageNotWritableException%20%20No%20Converter%20for%20%20class%20%20%20%20With%20Preset%20Content%20Type.html","title":"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring","Exception Handling"],"tag":["HttpMessageNotWritableException","Spring Boot","MessageConverter"],"head":[["meta",{"name":"keywords","content":"Spring, HttpMessageNotWritableException, Exception Handling, Spring Boot, MessageConverter"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-21/2024-07-21-HttpMessageNotWritableException%20%20No%20Converter%20for%20%20class%20%20%20%20With%20Preset%20Content%20Type.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung"}],["meta",{"property":"og:description","content":"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung 在这篇短文中，我们将仔细研究Spring异常 \\"HttpMessageNotWritableException: no converter for [class …] with preset Content-Type\\"。 首先，我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-21T22:17:44.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"HttpMessageNotWritableException"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"MessageConverter"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-21T22:17:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-21T22:17:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung 在这篇短文中，我们将仔细研究Spring异常 \\"HttpMessageNotWritableException: no converter for [class …] with preset Content-Type\\"。 首先，我..."},"headers":[{"level":2,"title":"2. 原因","slug":"_2-原因","link":"#_2-原因","children":[]},{"level":2,"title":"3. 重现异常","slug":"_3-重现异常","link":"#_3-重现异常","children":[]},{"level":2,"title":"4. 解决方案","slug":"_4-解决方案","link":"#_4-解决方案","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721600264000,"updatedTime":1721600264000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.65,"words":796},"filePathRelative":"posts/baeldung/2024-07-21/2024-07-21-HttpMessageNotWritableException  No Converter for  class    With Preset Content Type.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这篇短文中，我们将仔细研究Spring异常 \\"HttpMessageNotWritableException: no converter for [class …] with preset Content-Type\\"。</p>\\n<p>首先，我们将揭示异常背后的主要原因。然后，我们将深入探讨如何使用一个实际示例来重现它，最后是如何解决它。</p>\\n<h2>2. 原因</h2>\\n<p>在深入细节之前，让我们尝试理解异常的含义。</p>\\n<p>异常的堆栈跟踪说明了一切：它告诉我们Spring <strong>找不到合适的</strong> <em>HttpMessageConverter</em> <strong>能够将Java对象转换为HTTP响应</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
