import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as p}from"./app-DAOx5Ihl.js";const t={},e=p(`<h1 id="java中将中缀表达式转换为后缀表达式" tabindex="-1"><a class="header-anchor" href="#java中将中缀表达式转换为后缀表达式"><span>Java中将中缀表达式转换为后缀表达式</span></a></h1><p>在本教程中，我们将讨论将数学表达式的中缀表示法转换为后缀表示法的算法和代码。像Java这样的编程语言允许我们定义和使用不同的数学表达式。表达式可以通过变量、常量和运算符的组合来书写。</p><h3 id="_2-1-算术表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-算术表达式"><span>2.1. 算术表达式</span></a></h3><p>算术表达式包括加法(+)、减法(-)、乘法(*)、除法(/)和取模(%)等运算符。这些运算符与变量或常量一起使用，会产生算术评估：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">int</span> prod <span class="token operator">=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>

<span class="token keyword">int</span> remainder <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-逻辑表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-逻辑表达式"><span>2.2. 逻辑表达式</span></a></h3><p>逻辑表达式使用逻辑运算符代替之前使用的算术运算符。最常见的逻辑运算符包括逻辑与(<em>AND</em>)、或(<em>OR</em>)、非(<em>NOT</em>)和异或(<em>XOR</em>)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> andResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑与</span>
<span class="token keyword">boolean</span> orResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑或</span>
<span class="token keyword">boolean</span> notResult <span class="token operator">=</span> <span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑非</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关系表达式主要用于基于比较的逻辑，并产生布尔值_true_或_false_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> bigger <span class="token operator">=</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-表示法" tabindex="-1"><a class="header-anchor" href="#_3-表示法"><span>3. 表示法</span></a></h2><p>数学表达式的书写有不同可能的方式。这些被称为表示法，它们根据运算符和操作数的位置变化而变化。</p><h3 id="_3-1-中缀表示法" tabindex="-1"><a class="header-anchor" href="#_3-1-中缀表示法"><span>3.1. 中缀表示法</span></a></h3><p>在中缀表示法表达式中，运算符位于操作数之间，使其成为最常见的表达式表示法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里需要注意的是，运算符优先级在中缀表达式中可能导致歧义，并起着重要作用。括号在中缀表示法中很常见，以强制优先级。</p><h3 id="_3-2-前缀表示法" tabindex="-1"><a class="header-anchor" href="#_3-2-前缀表示法"><span>3.2. 前缀表示法</span></a></h3><p>前缀，也称为波兰表示法，是运算符在操作数之前的表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">*</span> <span class="token operator">+</span> a b <span class="token operator">-</span> c d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-后缀表示法" tabindex="-1"><a class="header-anchor" href="#_3-3-后缀表示法"><span>3.3. 后缀表示法</span></a></h3><p>后缀，或逆波兰表示法，意味着运算符应该在操作数之后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> result <span class="token operator">=</span> a b <span class="token operator">+</span> c d <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们在这里需要注意的是，相同表达式的前缀和后缀表示法都消除了由于运算符优先级而产生的明显歧义，并消除了对括号的需求。出于同样的原因，它们在表达式评估中也是高效的。</p><h2 id="_4-问题陈述" tabindex="-1"><a class="header-anchor" href="#_4-问题陈述"><span>4. 问题陈述</span></a></h2><p>现在我们已经回顾了数学表达式不同表示法的基础知识，让我们继续问题陈述。</p><p>给定一个中缀表达式作为输入，我们应该编写一个算法将其转换并返回相同表达式的后缀或逆波兰表示法。</p><p>让我们通过一个例子来理解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Input</span><span class="token operator">:</span>  <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> d<span class="token punctuation">)</span>
<span class="token class-name">Output</span><span class="token operator">:</span> ab<span class="token operator">+</span>cd<span class="token operator">-</span><span class="token operator">*</span>
<span class="token class-name">Input</span><span class="token operator">:</span> a<span class="token operator">+</span>b<span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token operator">^</span>d<span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>f<span class="token operator">+</span>g<span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-</span>i
<span class="token class-name">Output</span><span class="token operator">:</span> abcd<span class="token operator">^</span>e<span class="token operator">-</span>fgh<span class="token operator">*</span><span class="token operator">+</span><span class="token operator">^</span><span class="token operator">*</span><span class="token operator">+</span>i<span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例显示，输入是一个中缀表达式，其中运算符总是在一对操作数之间。输出是相同的后缀表达式。我们可以假设输入始终是有效的中缀表达式；因此，没有必要进一步验证。</p><h2 id="_5-解决方案" tabindex="-1"><a class="header-anchor" href="#_5-解决方案"><span>5. 解决方案</span></a></h2><p>让我们通过将问题分解为更小的步骤来构建我们的解决方案。</p><h3 id="_5-1-运算符和操作数" tabindex="-1"><a class="header-anchor" href="#_5-1-运算符和操作数"><span>5.1. 运算符和操作数</span></a></h3><p>输入将是中缀表达式的字符串表示。<strong>在我们实现转换逻辑之前，确定运算符和操作数至关重要。</strong></p><p>根据输入示例，操作数可以是小写或大写英文字母：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOperand</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> ch \`<span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;</span>\`<span class="token operator">=</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> ch \`<span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入包含2个括号字符和5个运算符，除了上述操作数。</p><h3 id="_5-2-优先级和结合性" tabindex="-1"><a class="header-anchor" href="#_5-2-优先级和结合性"><span>5.2. 优先级和结合性</span></a></h3><p>我们还应该定义我们可能在输入中遇到的每个运算符的优先级，并为它们分配一个整数值。^(指数)运算符具有最高的优先级，其次是*(乘法)和/(除法)，它们具有相似的优先级。最后，+(加法)和-(减法)运算符的优先级最低。</p><p>让我们编写一个方法来模拟上述逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">getPrecedenceScore</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token char">&#39;^&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当扫描到优先级相同的未括号运算符时，结合性或扫描顺序通常是从左到右。</strong> 唯一的例外是指数运算符，其顺序假定为从右到左：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> <span class="token function">associativity</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;^&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-转换算法" tabindex="-1"><a class="header-anchor" href="#_6-转换算法"><span>6. 转换算法</span></a></h2><p>中缀表达式中的每个运算符都指代其周围的操作数。相比之下，在后缀表达式中，每个运算符都指代输入字符串中它之前的两个操作数。</p><p>对于具有多个中缀操作的表达式，必须首先将最内层括号内的表达式转换为后缀。这使我们能够将它们作为单个操作数对待，用于外部操作。<strong>我们继续这样做，并逐步消除括号，直到整个表达式被转换。</strong> 在括号组中，最后消除的括号对是组中的第一个操作。</p><p><strong>这种后进先出的行为暗示了使用栈数据结构。</strong></p><h3 id="_6-1-栈和优先级条件" tabindex="-1"><a class="header-anchor" href="#_6-1-栈和优先级条件"><span>6.1. 栈和优先级条件</span></a></h3><p><strong>我们将使用一个栈来跟踪我们的运算符。</strong> 然而，我们需要定义一个规则来确定哪个运算符需要添加到后缀表达式中，哪个运算符需要保留在栈中以备将来使用。</p><p>如果当前符号是一个运算符，我们有两个选择。<strong>我们可以将其推入栈中，或者直接将其放入后缀表达式中。如果我们的栈为空，就像遇到第一个运算符时的情况，我们可以简单地将当前运算符推入栈中。</strong></p><p>另一方面，如果栈不为空，我们需要检查优先级以确定运算符的去向。<strong>如果当前字符的优先级高于栈顶的运算符，我们需要将其推入栈顶。</strong> 例如，在遇到<em>之后遇到+将导致将+推入栈中，高于</em>。如果优先级分数相等，并且结合性是默认的从左到右，我们也会这样做。</p><p>我们可以将上述逻辑简化为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">operatorPrecedenceCondition</span><span class="token punctuation">(</span><span class="token class-name">String</span> infix<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\` stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getPrecedenceScore</span><span class="token punctuation">(</span>infix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> \`<span class="token operator">&lt;</span> <span class="token function">getPrecedenceScore</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">||</span> <span class="token function">getPrecedenceScore</span><span class="token punctuation">(</span>infix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getPrecedenceScore</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">&amp;&amp;</span> <span class="token function">associativity</span><span class="token punctuation">(</span>infix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-扫描中缀表达式并转换" tabindex="-1"><a class="header-anchor" href="#_6-2-扫描中缀表达式并转换"><span>6.2. 扫描中缀表达式并转换</span></a></h3><p>现在我们已经设置了优先级条件，让我们讨论如何逐步扫描中缀操作并正确转换。</p><p>如果当前字符是一个操作数，我们将其添加到我们的后缀结果中。<strong>如果当前字符是一个运算符，我们使用上面讨论的比较逻辑，并确定是应该将其添加到栈中还是弹出。</strong> 最后，当我们完成扫描输入时，我们将栈中的所有内容弹出到后缀表达式中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">infixToPostfix</span><span class="token punctuation">(</span><span class="token class-name">String</span> infix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\` stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> infix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> ch <span class="token operator">=</span> infix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOperand</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">operatorPrecedenceCondition</span><span class="token punctuation">(</span>infix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-示例干燥运行" tabindex="-1"><a class="header-anchor" href="#_6-3-示例干燥运行"><span>6.3. 示例干燥运行</span></a></h3><p><strong>让我们使用我们的第一个例子：<em>a + b * c – d.</em></strong> 我们遇到的第一个字符_a_可以立即插入到最终结果中，因为它是一个操作数。然而，+运算符不能在没有考虑与其关联的第二个操作数_b_的情况下插入。由于我们需要为将来的参考存储+运算符，我们将其推入我们的栈中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Symbol</span>  <span class="token class-name">Result</span>  <span class="token class-name">Stack</span>
a       a        <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">+</span>       a       <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
bab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们遇到_b_操作数时，我们将其推入后缀结果，现在变成了_ab_。<strong>我们还不能从栈中弹出运算符+，因为我们在输入中有*运算符。</strong> 如前一节所述，*运算符的优先级高于栈顶的+。因此，这个新符号被推到栈顶：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Symbol</span>  <span class="token class-name">Result</span>  <span class="token class-name">Stack</span>
a       a        <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">+</span>       a       <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
b       ab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
<span class="token operator">*</span>       ab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们继续扫描输入的中缀表达式，当我们遇到下一个操作数_c_时，我们将其添加到结果中。<strong>当我们遇到最终符号-时，它比栈顶的运算符*具有更低的优先级，我们从栈中弹出元素并将其附加到后缀表达式中，直到栈为空或栈顶的优先级更低。</strong> 表达式现在是_abc*+_。当前运算符-被推入栈中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Symbol</span>  <span class="token class-name">Result</span>  <span class="token class-name">Stack</span>
a        a        <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">+</span>        ab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
b        ab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span>
<span class="token operator">*</span>        ab      <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">]</span>
c       abc     <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">]</span>
<span class="token operator">-</span>       abc<span class="token operator">*</span><span class="token operator">+</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span>
d       abc<span class="token operator">*</span><span class="token operator">+</span>d<span class="token operator">-</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将最后一个操作数_d_附加到后缀操作中，并弹出栈。后缀操作的值是_abc*+d-_。</p><h3 id="_6-4-带括号的转换算法" tabindex="-1"><a class="header-anchor" href="#_6-4-带括号的转换算法"><span>6.4. 带括号的转换算法</span></a></h3><p><strong>虽然上述算法是正确的，但中缀表达式使用括号来解决运算符优先级引起的歧义。</strong> 因此，处理输入字符串中括号的出现并相应地修改算法至关重要。</p><p>当我们扫描到一个左括号_(_时，我们将其推入栈中。当我们遇到一个右括号时，所有运算符都需要从栈中弹出到后缀表达式中。</p><p>让我们通过调整代码来适应括号：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">infixToPostfix</span><span class="token punctuation">(</span><span class="token class-name">String</span> infix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\` stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> infix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> ch <span class="token operator">=</span> infix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOperand</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">operatorPrecedenceCondition</span><span class="token punctuation">(</span>infix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们使用上面探索的相同示例，但带有括号，进行干燥运行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Input</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">)</span>

<span class="token class-name">Symbol</span> <span class="token class-name">Result</span>  <span class="token class-name">Stack</span>
<span class="token punctuation">(</span>           <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">]</span>
a      a       <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">]</span>
<span class="token operator">+</span>      a       <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">]</span>
b      ab      <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>      ab<span class="token operator">+</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">*</span>      ab<span class="token operator">+</span>     <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span>      ab<span class="token operator">+</span>     <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">]</span>
c      ab<span class="token operator">+</span>c    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">]</span>
<span class="token operator">-</span>      ab<span class="token operator">+</span>c    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">]</span>
d      ab<span class="token operator">+</span>cd   <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>      ab<span class="token operator">+</span>cd<span class="token operator">-</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们应该注意到括号的位置如何改变评估以及相应的后缀表达式。</strong></p><h2 id="_7-其他思考" tabindex="-1"><a class="header-anchor" href="#_7-其他思考"><span>7. 其他思考</span></a></h2><p>虽然中缀表达式在文本中更常见，但表达式的后缀表示法有许多好处。<strong>后缀表达式中不需要括号，因为操作顺序由于操作数和运算符的顺序排列而变得清晰。</strong> 此外，在中缀操作中可能由于运算符优先级和结合性而产生的歧义在其后缀形式中被消除了。</p><p><strong>这也使它们成为计算机程序中的实际选择，特别是在编程语言实现中。</strong></p><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们讨论了数学表达式的中缀、前缀和后缀表示法。我们专注于将中缀转换为后缀运算的算法，并看了一些例子。</p><p>像往常一样，本文的源代码可以在GitHub上找到。</p><p>OK</p>`,79),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","2024-06-22-Convert Infix to Postfix Expressions in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Convert%20Infix%20to%20Postfix%20Expressions%20in%20Java.html","title":"Java中将中缀表达式转换为后缀表达式","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Java","算法"],"tag":["表达式转换","逆波兰表示法"],"head":[["meta",{"name":"keywords","content":"Java, 表达式, 逆波兰表示法, 算法, 转换"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Convert%20Infix%20to%20Postfix%20Expressions%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将中缀表达式转换为后缀表达式"}],["meta",{"property":"og:description","content":"Java中将中缀表达式转换为后缀表达式 在本教程中，我们将讨论将数学表达式的中缀表示法转换为后缀表示法的算法和代码。像Java这样的编程语言允许我们定义和使用不同的数学表达式。表达式可以通过变量、常量和运算符的组合来书写。 2.1. 算术表达式 算术表达式包括加法(+)、减法(-)、乘法(*)、除法(/)和取模(%)等运算符。这些运算符与变量或常量一起..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T14:50:02.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"表达式转换"}],["meta",{"property":"article:tag","content":"逆波兰表示法"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T14:50:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将中缀表达式转换为后缀表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T14:50:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将中缀表达式转换为后缀表达式 在本教程中，我们将讨论将数学表达式的中缀表示法转换为后缀表示法的算法和代码。像Java这样的编程语言允许我们定义和使用不同的数学表达式。表达式可以通过变量、常量和运算符的组合来书写。 2.1. 算术表达式 算术表达式包括加法(+)、减法(-)、乘法(*)、除法(/)和取模(%)等运算符。这些运算符与变量或常量一起..."},"headers":[{"level":3,"title":"2.1. 算术表达式","slug":"_2-1-算术表达式","link":"#_2-1-算术表达式","children":[]},{"level":3,"title":"2.2. 逻辑表达式","slug":"_2-2-逻辑表达式","link":"#_2-2-逻辑表达式","children":[]},{"level":2,"title":"3. 表示法","slug":"_3-表示法","link":"#_3-表示法","children":[{"level":3,"title":"3.1. 中缀表示法","slug":"_3-1-中缀表示法","link":"#_3-1-中缀表示法","children":[]},{"level":3,"title":"3.2. 前缀表示法","slug":"_3-2-前缀表示法","link":"#_3-2-前缀表示法","children":[]},{"level":3,"title":"3.3. 后缀表示法","slug":"_3-3-后缀表示法","link":"#_3-3-后缀表示法","children":[]}]},{"level":2,"title":"4. 问题陈述","slug":"_4-问题陈述","link":"#_4-问题陈述","children":[]},{"level":2,"title":"5. 解决方案","slug":"_5-解决方案","link":"#_5-解决方案","children":[{"level":3,"title":"5.1. 运算符和操作数","slug":"_5-1-运算符和操作数","link":"#_5-1-运算符和操作数","children":[]},{"level":3,"title":"5.2. 优先级和结合性","slug":"_5-2-优先级和结合性","link":"#_5-2-优先级和结合性","children":[]}]},{"level":2,"title":"6. 转换算法","slug":"_6-转换算法","link":"#_6-转换算法","children":[{"level":3,"title":"6.1. 栈和优先级条件","slug":"_6-1-栈和优先级条件","link":"#_6-1-栈和优先级条件","children":[]},{"level":3,"title":"6.2. 扫描中缀表达式并转换","slug":"_6-2-扫描中缀表达式并转换","link":"#_6-2-扫描中缀表达式并转换","children":[]},{"level":3,"title":"6.3. 示例干燥运行","slug":"_6-3-示例干燥运行","link":"#_6-3-示例干燥运行","children":[]},{"level":3,"title":"6.4. 带括号的转换算法","slug":"_6-4-带括号的转换算法","link":"#_6-4-带括号的转换算法","children":[]}]},{"level":2,"title":"7. 其他思考","slug":"_7-其他思考","link":"#_7-其他思考","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1719067802000,"updatedTime":1719067802000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.94,"words":2683},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Convert Infix to Postfix Expressions in Java.md","localizedDate":"2024年6月22日","excerpt":"\\n<p>在本教程中，我们将讨论将数学表达式的中缀表示法转换为后缀表示法的算法和代码。像Java这样的编程语言允许我们定义和使用不同的数学表达式。表达式可以通过变量、常量和运算符的组合来书写。</p>\\n<h3>2.1. 算术表达式</h3>\\n<p>算术表达式包括加法(+)、减法(-)、乘法(*)、除法(/)和取模(%)等运算符。这些运算符与变量或常量一起使用，会产生算术评估：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> sum <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> prod <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">*</span> y<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> remainder <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">%</span> y<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
