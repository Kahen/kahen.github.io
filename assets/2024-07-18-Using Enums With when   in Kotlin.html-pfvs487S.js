import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-BTwZI-W8.js";const t={},p=e(`<hr><h1 id="使用kotlin中的枚举与when-表达式" tabindex="-1"><a class="header-anchor" href="#使用kotlin中的枚举与when-表达式"><span>使用Kotlin中的枚举与when()表达式</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>Kotlin中的枚举提供了一种优雅的方式来处理类似switch结构的多重条件。</p><p>在本教程中，我们将探讨如何使用枚举与_when()_表达式，以及它如何增强代码的可读性和可维护性。</p><h2 id="_2-kotlin中枚举的基础知识" tabindex="-1"><a class="header-anchor" href="#_2-kotlin中枚举的基础知识"><span>2. Kotlin中枚举的基础知识</span></a></h2><p>在深入讨论使用枚举与_when()_表达式的细节之前，让我们简要了解枚举是什么以及它们在Kotlin中的工作方式。</p><p>枚举，简称enumerations，允许我们定义一组命名常量值，创建一种类型安全的方式来表示一组相关值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> Color <span class="token punctuation">{</span>
    RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，_Color_是一个枚举类，有三个值：<em>RED</em>、<em>GREEN_和_BLUE</em>。枚举可以有属性、方法，甚至可以实现接口，使它们适用于各种用例。</p><h2 id="_3-使用-when-和枚举简化代码" tabindex="-1"><a class="header-anchor" href="#_3-使用-when-和枚举简化代码"><span>3. 使用_when()_和枚举简化代码</span></a></h2><p>枚举的一个关键优势是它们与Kotlin中的_when()_表达式的无缝集成。_when()_表达式作为传统_switch()_语句的强大替代品。Kotlin中的_when()_表达式提供了一种简洁而富有表现力的语法，用于基于枚举的值处理多重条件。</p><p>让我们考虑以下示例，其中我们的枚举_Day_代表一周的天：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> Day <span class="token punctuation">{</span>
    MONDAY<span class="token punctuation">,</span> TUESDAY<span class="token punctuation">,</span> WEDNESDAY<span class="token punctuation">,</span> THURSDAY<span class="token punctuation">,</span> FRIDAY<span class="token punctuation">,</span> SATURDAY<span class="token punctuation">,</span> SUNDAY
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们使用_when()_表达式根据天执行不同的操作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getDailyRoutine</span><span class="token punctuation">(</span>day<span class="token operator">:</span> Day<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Day<span class="token punctuation">.</span>MONDAY <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Start of the workweek&quot;</span></span>
        Day<span class="token punctuation">.</span>WEDNESDAY <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Midweek - Keep pushing!&quot;</span></span>
        Day<span class="token punctuation">.</span>FRIDAY <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Almost there, the weekend is coming!&quot;</span></span>
        Day<span class="token punctuation">.</span>SUNDAY <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Relax and recharge&quot;</span></span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;It&#39;s a regular day&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，_when()_表达式根据_Day_枚举的值处理不同的场景。这比嵌套的_if-else_语句或传统的_switch()_语句更易于阅读和维护。</p><p>因为我们没有涵盖我们的_Day_枚举的所有可能分支，<strong>我们必须用_else()_子句完成_when()_表达式</strong>。这大致相当于_switch()_语句的默认值。</p><h3 id="_3-1-无需-else-的详尽-when" tabindex="-1"><a class="header-anchor" href="#_3-1-无需-else-的详尽-when"><span>3.1. 无需_else()_的详尽_when()</span></a></h3><p>在某些情况下，Kotlin中的_when()_表达式可以是详尽的，不需要_else()_子句。正如我们上面所注意到的，所有的_when()_表达式都需要是详尽的，这意味着它们必须涵盖所有可能的分支。</p><p>让我们考虑一个涉及名为_Color_的枚举类型的示例。在这个示例中，我们将使用一个没有_else()_子句的_when()_表达式来展示它的详尽性：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> Color <span class="token punctuation">{</span>
    RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">getColorDescription</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Color<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Color<span class="token punctuation">.</span>RED <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;The color is red.&quot;</span></span>
        Color<span class="token punctuation">.</span>GREEN <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;The color is green.&quot;</span></span>
        Color<span class="token punctuation">.</span>BLUE <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;The color is blue.&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，_getColorDescription()_函数使用_when()<em>表达式匹配_Color_枚举的每个枚举案例。由于所有枚举案例_RED</em>、_GREEN_和_BLUE_都在_when()_块中被覆盖，因此不需要_else()_子句。这展示了_when()_表达式在处理所有可能的案例时能够详尽而不需要额外的回退逻辑的能力。</p><h2 id="_4-密封类和-when-表达式" tabindex="-1"><a class="header-anchor" href="#_4-密封类和-when-表达式"><span>4. 密封类和_when()_表达式</span></a></h2><p>除了枚举，Kotlin还提供了密封类，通常被称为超级枚举。密封类与枚举有一些共同特征，但它们提供了不同的功能集。使用密封类的一种强大方式是与_when()_表达式结合。</p><p><strong>密封类允许我们表示类似于枚举的限制类型层次结构</strong>。然而，密封类提供了更多的灵活性，因为它们可以包括额外的属性和方法。<strong>此外，与枚举不同，密封类可以有在其声明之外定义的子类，提供了扩展层次结构的强大机制。</strong></p><p>让我们看一个定义密封类_Shape_及其两个子类_Triangle_和_Square_的示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array\`<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>\`<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> shape<span class="token operator">:</span> Shape <span class="token operator">=</span> Shape<span class="token punctuation">.</span>Triangle
    <span class="token keyword">when</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Shape<span class="token punctuation">.</span>Square <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m a square&quot;</span></span><span class="token punctuation">)</span>
        Shape<span class="token punctuation">.</span>Triangle <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m a triangle&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">sealed</span> <span class="token keyword">class</span> Shape <span class="token punctuation">{</span>
    <span class="token keyword">object</span> Triangle <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">object</span> Square <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，密封类_Shape_作为相关子类_Triangle_和_Square_的容器。_when()_表达式根据遇到的_Shape_类型执行不同的操作。在这种情况下，它打印“<em>I’m a triangle</em>”。</p><p>值得注意的是，当使用密封类时，<strong>我们也允许在所有分支都被覆盖的情况下在_when()_表达式中跳过_else()_子句</strong>，因为Kotlin编译器可以推断我们已经涵盖了我们密封类的所有可能的子类。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在Kotlin中使用枚举与_when()_表达式的结果不仅更易于阅读，而且更易于维护和健壮。枚举提供了一种类型安全的方式来表示一组相关值，当与_when()_表达式的简洁语法结合时，它们提供了一种强大的机制来处理多重条件。</p><p>如常，这些示例的完整实现可以在GitHub上找到。</p>`,33),o=[p];function l(i,c){return a(),s("div",null,o)}const d=n(t,[["render",l],["__file","2024-07-18-Using Enums With when   in Kotlin.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-18/2024-07-18-Using%20Enums%20With%20when%20%20%20in%20Kotlin.html","title":"使用Kotlin中的枚举与when()表达式","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin"],"tag":["Enums","when()"],"head":[["meta",{"name":"keywords","content":"Kotlin Enums, when() expression"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-18/2024-07-18-Using%20Enums%20With%20when%20%20%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Kotlin中的枚举与when()表达式"}],["meta",{"property":"og:description","content":"使用Kotlin中的枚举与when()表达式 1. 引言 Kotlin中的枚举提供了一种优雅的方式来处理类似switch结构的多重条件。 在本教程中，我们将探讨如何使用枚举与_when()_表达式，以及它如何增强代码的可读性和可维护性。 2. Kotlin中枚举的基础知识 在深入讨论使用枚举与_when()_表达式的细节之前，让我们简要了解枚举是什么以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T22:31:53.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Enums"}],["meta",{"property":"article:tag","content":"when()"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T22:31:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Kotlin中的枚举与when()表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-18T22:31:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Kotlin中的枚举与when()表达式 1. 引言 Kotlin中的枚举提供了一种优雅的方式来处理类似switch结构的多重条件。 在本教程中，我们将探讨如何使用枚举与_when()_表达式，以及它如何增强代码的可读性和可维护性。 2. Kotlin中枚举的基础知识 在深入讨论使用枚举与_when()_表达式的细节之前，让我们简要了解枚举是什么以..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. Kotlin中枚举的基础知识","slug":"_2-kotlin中枚举的基础知识","link":"#_2-kotlin中枚举的基础知识","children":[]},{"level":2,"title":"3. 使用_when()_和枚举简化代码","slug":"_3-使用-when-和枚举简化代码","link":"#_3-使用-when-和枚举简化代码","children":[{"level":3,"title":"3.1. 无需_else()_的详尽_when()","slug":"_3-1-无需-else-的详尽-when","link":"#_3-1-无需-else-的详尽-when","children":[]}]},{"level":2,"title":"4. 密封类和_when()_表达式","slug":"_4-密封类和-when-表达式","link":"#_4-密封类和-when-表达式","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721341913000,"updatedTime":1721341913000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1254},"filePathRelative":"posts/baeldung/2024-07-18/2024-07-18-Using Enums With when   in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"<hr>\\n<h1>使用Kotlin中的枚举与when()表达式</h1>\\n<h2>1. 引言</h2>\\n<p>Kotlin中的枚举提供了一种优雅的方式来处理类似switch结构的多重条件。</p>\\n<p>在本教程中，我们将探讨如何使用枚举与_when()_表达式，以及它如何增强代码的可读性和可维护性。</p>\\n<h2>2. Kotlin中枚举的基础知识</h2>\\n<p>在深入讨论使用枚举与_when()_表达式的细节之前，让我们简要了解枚举是什么以及它们在Kotlin中的工作方式。</p>\\n<p>枚举，简称enumerations，允许我们定义一组命名常量值，创建一种类型安全的方式来表示一组相关值：</p>","autoDesc":true}');export{d as comp,k as data};
