import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as n,a}from"./app-D9qUUkNr.js";const i={},s=a('<hr><h1 id="ldap-使用纯-java-进行认证" tabindex="-1"><a class="header-anchor" href="#ldap-使用纯-java-进行认证"><span>LDAP 使用纯 Java 进行认证</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span><strong>1. 引言</strong></span></a></h2><p>在本文中，我们将介绍如何使用纯 Java 进行 LDAP 认证。此外，我们将探讨如何搜索用户的可区分名称（DN）。这很重要，因为 LDAP 需要 DN 来认证用户。</p><p>为了进行搜索和用户认证，我们将使用 Java 命名和目录接口（JNDI）的目录服务访问功能。</p><p>首先，我们将简要讨论 LDAP 和 JNDI 是什么。然后，我们将讨论如何通过 JNDI API 进行 LDAP 认证。</p><h2 id="_2-ldap-是什么" tabindex="-1"><a class="header-anchor" href="#_2-ldap-是什么"><span><strong>2. LDAP 是什么？</strong></span></a></h2><p><strong>轻量级目录访问协议（LDAP）定义了客户端发送请求和从目录服务接收响应的方式</strong>。我们称使用此协议的目录服务为 LDAP 服务器。</p><p><strong>由 LDAP 服务器提供的数据存储在基于 X.500 的信息模型中</strong>。这是一组用于电子目录服务的计算机网络标准。</p><h2 id="_3-jndi-是什么" tabindex="-1"><a class="header-anchor" href="#_3-jndi-是什么"><span><strong>3. JNDI 是什么？</strong></span></a></h2><p><strong>JNDI 提供了一个标准 API，供应用程序发现和访问命名和目录服务</strong>。其根本目的是为应用程序提供一种访问组件和资源的方式。这包括本地和网络访问。</p><p>命名服务是这种能力的基础，因为它们通过层次命名空间中的名称提供对服务、数据或对象的单点访问。每个这些本地或网络可访问资源的名称在托管命名服务的服务器上配置。</p><p><strong>我们可以通过 JNDI 的命名服务接口访问目录服务，如 LDAP</strong>。这是因为目录服务仅仅是命名服务的一种特殊类型，它使每个命名条目能够关联一个属性列表。</p><p>除了属性，每个目录条目可能有一个或多个子项。这使得条目可以层次链接。在 JNDI 中，目录条目的子项被表示为其父上下文的子上下文。</p><p>JNDI API 的一个关键好处是它独立于任何底层服务提供程序实现，例如 LDAP。因此，我们可以使用 JNDI 访问 LDAP 目录服务，而无需使用协议特定的 API。</p><p>使用 JNDI 不需要外部库，因为它是 Java SE 平台的一部分。此外，作为 Java EE 的核心技术，它被广泛用于实现企业应用程序。</p><h2 id="_4-使用-jndi-api-进行-ldap-认证的概念" tabindex="-1"><a class="header-anchor" href="#_4-使用-jndi-api-进行-ldap-认证的概念"><span><strong>4. 使用 JNDI API 进行 LDAP 认证的概念</strong></span></a></h2><p>在讨论示例代码之前，让我们先了解一下使用 JNDI API 进行基于 LDAP 的认证的基础知识。</p><p>要连接到 LDAP 服务器，我们首先需要创建一个 JNDI <em>InitialDirContext</em> 对象。这样做时，我们需要将其构造函数中的环境属性作为 <em>Hashtable</em> 传递以配置它。</p><p>其中，我们需要为此 <em>Hashtable</em> 添加属性，以便我们希望认证的用户名和密码。为此，我们必须将用户的 DN 和密码分别设置为 <em>Context.SECURITY_PRINCIPAL</em> 和 <em>Context.SECURITY_CREDENTIALS</em> 属性。</p><p><em>InitialDirContext</em> 实现了 <em>DirContext</em>，这是主要的 JNDI 目录服务接口。通过这个接口，我们可以使用我们的新上下文对 LDAP 服务器执行各种目录服务操作。这些包括将名称和属性绑定到对象以及搜索目录条目。</p><p>值得注意的是，JNDI 返回的对象将具有与其底层 LDAP 条目相同的名称和属性。因此，要搜索条目，我们可以使用其名称和属性作为查找标准。</p><p>一旦我们通过 JNDI 检索到目录条目，我们可以使用 <em>Attributes</em> 接口查看其属性。此外，我们可以使用 <em>Attribute</em> 接口检查每一个属性。</p><h2 id="_5-如果我们没有用户的-dn-怎么办" tabindex="-1"><a class="header-anchor" href="#_5-如果我们没有用户的-dn-怎么办"><span><strong>5. 如果我们没有用户的 DN 怎么办？</strong></span></a></h2><p>有时我们没有立即可用的用户 DN 来进行认证。为了解决这个问题，我们首先需要使用管理员凭据创建一个 <em>InitialDirContext</em>。之后，我们可以使用它从目录服务器搜索相关用户并获取他的 DN。</p><p>然后，一旦我们有了用户的 DN，我们可以通过创建一个新的 <em>InitialDirContext</em> 来认证他，这次使用他的凭据。为此，我们首先需要在环境属性中设置用户的 DN 和密码。然后，我们需要在创建 <em>InitDirContext</em> 时将这些属性传递给它的构造函数。</p><p>现在我们已经讨论了如何使用 JNDI API 通过 LDAP 使用用户的 DN 和密码进行用户认证，让我们来看示例代码。</p><h2 id="_6-示例代码" tabindex="-1"><a class="header-anchor" href="#_6-示例代码"><span><strong>6. 示例代码</strong></span></a></h2><p>在我们的示例中，我们将使用 ApacheDS 目录服务器的嵌入式版本。这是一个使用 Java 构建的 LDAP 服务器，设计为在单元测试中以嵌入式模式运行。</p><p>让我们看看如何设置它。</p><h3 id="_6-1-设置嵌入式-apacheds-服务器" tabindex="-1"><a class="header-anchor" href="#_6-1-设置嵌入式-apacheds-服务器"><span><strong>6.1. 设置嵌入式 ApacheDS 服务器</strong></span></a></h3><p>要使用嵌入式 ApacheDS 服务器，我们需要定义 Maven 依赖项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`org.apache.directory.server`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`apacheds-test-framework`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.0.0.AM26`&lt;/version&gt;`\n    `&lt;scope&gt;`test`&lt;/scope&gt;`\n`&lt;/dependency&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要创建一个使用 JUnit 4 的单元测试类。为了在这个类中使用嵌入式 ApacheDS 服务器，我们必须声明它扩展了 ApacheDS 库中的 <em>AbstractLdapTestUnit</em>。由于此库尚不兼容 JUnit 5，因此我们需要使用 JUnit 4。</p><p>此外，我们还需要在单元测试类声明上方包含 Java 注解以配置服务器。我们可以从稍后将探讨的完整代码示例中看到要给它们的值。</p><p>最后，我们还需要将 <em>users.ldif</em> 添加到类路径中。这样，当运行我们的代码示例时，ApacheDS 服务器可以从该文件加载 LDIF 格式的目录条目。这样做时，服务器将加载用户 <em>Joe Simms</em> 的条目。</p><p>接下来，我们将讨论将运行对 LDAP 服务器进行认证的示例代码。为了运行它，我们需要将我们的代码添加到我们的单元测试类的方法中。这将使用他在文件中定义的 DN 和密码通过 LDAP 认证 Joe。</p><h3 id="_6-2-认证用户" tabindex="-1"><a class="header-anchor" href="#_6-2-认证用户"><span><strong>6.2. 认证用户</strong></span></a></h3><p>要认证用户 <em>Joe Simms</em>，我们需要创建一个新的 <em>InitialDirContext</em> 对象。这会创建到目录服务器的连接，并使用他的 DN 和密码通过 LDAP 认证用户。</p><p>为此，我们首先需要将这些环境属性添加到一个 <em>Hashtable</em> 中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Hashtable````&lt;String, String&gt;```` environment = new Hashtable````&lt;String, String&gt;````();\n\nenvironment.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);\nenvironment.put(Context.PROVIDER_URL, &quot;ldap://localhost:10389&quot;);\nenvironment.put(Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);\nenvironment.put(Context.SECURITY_PRINCIPAL, &quot;cn=Joe Simms,ou=Users,dc=baeldung,dc=com&quot;);\nenvironment.put(Context.SECURITY_CREDENTIALS, &quot;12345&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在名为 <em>authenticateUser</em> 的新方法中，我们将通过将环境属性传递到其构造函数中来创建 <em>InitialDirContext</em> 对象。然后，我们将关闭上下文以释放资源：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DirContext context = new InitialDirContext(environment);\ncontext.close();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将认证用户：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThatCode(() -&gt; authenticateUser(environment)).doesNotThrowAnyException();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们已经涵盖了用户认证成功的情况，让我们检查一下当它失败时会发生什么。</p><h3 id="_6-3-处理用户认证失败" tabindex="-1"><a class="header-anchor" href="#_6-3-处理用户认证失败"><span><strong>6.3. 处理用户认证失败</strong></span></a></h3><p>使用与之前相同的环境属性，让我们通过使用错误的密码使认证失败：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>environment.put(Context.SECURITY_CREDENTIALS, &quot;wrongpassword&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们将检查使用此密码认证用户是否如预期失败：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThatExceptionOfType(AuthenticationException.class).isThrownBy(() -&gt; authenticateUser(environment));\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们讨论当我们没有他的 DN 时如何认证用户。</p><h3 id="_6-4-以管理员身份查找用户的-dn" tabindex="-1"><a class="header-anchor" href="#_6-4-以管理员身份查找用户的-dn"><span><strong>6.4. 以管理员身份查找用户的 DN</strong></span></a></h3><p>有时当我们想要认证一个用户时，我们没有他立即可用的 DN。在这种情况下，我们首先需要使用管理员凭据创建一个目录上下文来查找用户的 DN，然后使用该 DN 认证用户。</p><p>和以前一样，我们首先需要在 <em>Hashtable</em> 中添加一些环境属性。但这次，我们将使用管理员的 DN 作为 <em>Context.SECURITY_PRINCIPAL</em>，以及他的默认管理员密码作为 <em>Context.SECURITY_CREDENTIALS</em> 属性：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Hashtable````&lt;String, String&gt;```` environment = new Hashtable````&lt;String, String&gt;````();\n\nenvironment.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);\nenvironment.put(Context.PROVIDER_URL, &quot;ldap://localhost:10389&quot;);\nenvironment.put(Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);\nenvironment.put(Context.SECURITY_PRINCIPAL, &quot;uid=admin,ou=system&quot;);\nenvironment.put(Context.SECURITY_CREDENTIALS, &quot;secret&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将使用这些属性创建一个 <em>InitialDirContext</em> 对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DirContext adminContext = new InitialDirContext(environment);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个目录上下文，与服务器的连接被认证为管理员。这使我们具有搜索用户 DN 的安全权限。</p><p>现在我们将定义基于用户 CN（即他的通用名称）的搜索过滤器。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String filter = &quot;(&amp;(objectClass=person)(cn=Joe Simms))&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，使用此 <em>filter</em> 搜索用户，我们将创建一个 <em>SearchControls</em> 对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String[]attrIDs = { &quot;cn&quot; };\nSearchControls searchControls = new SearchControls();\nsearchControls.setReturningAttributes(attrIDs);\nsearchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将使用我们的 <em>filter</em> 和 <em>SearchControls</em> 搜索用户：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>NamingEnumeration`&lt;SearchResult&gt;` searchResults\n  = adminContext.search(&quot;dc=baeldung,dc=com&quot;, filter, searchControls);\n\nString commonName = null;\nString distinguishedName = null;\nif (searchResults.hasMore()) {\n\n    SearchResult result = (SearchResult) searchResults.next();\n    Attributes attrs = result.getAttributes();\n\n    distinguishedName = result.getNameInNamespace();\n    assertThat(distinguishedName, isEqualTo(&quot;cn=Joe Simms,ou=Users,dc=baeldung,dc=com&quot;)));\n\n    commonName = attrs.get(&quot;cn&quot;).toString();\n    assertThat(commonName, isEqualTo(&quot;cn: Joe Simms&quot;));\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经获得了用户的 DN，让我们使用它来认证用户。</p><h3 id="_6-5-使用查找到的用户-dn-进行认证" tabindex="-1"><a class="header-anchor" href="#_6-5-使用查找到的用户-dn-进行认证"><span><strong>6.5. 使用查找到的用户 DN 进行认证</strong></span></a></h3><p>现在我们有了用户的 DN 来认证，我们将用用户的 DN 和密码替换现有环境属性中的管理员 DN 和密码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>environment.put(Context.SECURITY_PRINCIPAL, distinguishedName);\nenvironment.put(Context.SECURITY_CREDENTIALS, &quot;12345&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，有了这些设置，让我们认证用户：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>assertThatCode(() -&gt; authenticateUser(environment)).doesNotThrowAnyException();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们将关闭管理员的上下文以释放资源：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>adminContext.close();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span><strong>7. 结论</strong></span></a></h2><p>在本文中，我们讨论了如何使用 JNDI 通过用户的 DN 和密码与 LDAP 进行用户认证。</p><p>我们还探讨了如果我们没有它，如何查找 DN。</p><p>像往常一样，示例的完整源代码可以在 GitHub 上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/23388d092a2958f09a67088ff3bd3cf8?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-post-footer-main-1.2.0.jpg" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-lightbox-icn-1.0.0-1.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/whiteleaf.svg" alt="img" loading="lazy"></p><p>OK</p>',79),l=[s];function d(r,o){return n(),t("div",null,l)}const m=e(i,[["render",d],["__file","2024-07-24-LDAP Authentication Using Pure Java.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-LDAP%20Authentication%20Using%20Pure%20Java.html","title":"LDAP 使用纯 Java 进行认证","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","LDAP"],"tag":["LDAP","JNDI","Java"],"head":[["meta",{"name":"keywords","content":"LDAP, JNDI, Java, 认证"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-LDAP%20Authentication%20Using%20Pure%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"LDAP 使用纯 Java 进行认证"}],["meta",{"property":"og:description","content":"LDAP 使用纯 Java 进行认证 1. 引言 在本文中，我们将介绍如何使用纯 Java 进行 LDAP 认证。此外，我们将探讨如何搜索用户的可区分名称（DN）。这很重要，因为 LDAP 需要 DN 来认证用户。 为了进行搜索和用户认证，我们将使用 Java 命名和目录接口（JNDI）的目录服务访问功能。 首先，我们将简要讨论 LDAP 和 JNDI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T23:52:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"LDAP"}],["meta",{"property":"article:tag","content":"JNDI"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T23:52:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LDAP 使用纯 Java 进行认证\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/23388d092a2958f09a67088ff3bd3cf8?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-lightbox-icn-1.0.0-1.png\\",\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/whiteleaf.svg\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T23:52:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"LDAP 使用纯 Java 进行认证 1. 引言 在本文中，我们将介绍如何使用纯 Java 进行 LDAP 认证。此外，我们将探讨如何搜索用户的可区分名称（DN）。这很重要，因为 LDAP 需要 DN 来认证用户。 为了进行搜索和用户认证，我们将使用 Java 命名和目录接口（JNDI）的目录服务访问功能。 首先，我们将简要讨论 LDAP 和 JNDI..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. LDAP 是什么？","slug":"_2-ldap-是什么","link":"#_2-ldap-是什么","children":[]},{"level":2,"title":"3. JNDI 是什么？","slug":"_3-jndi-是什么","link":"#_3-jndi-是什么","children":[]},{"level":2,"title":"4. 使用 JNDI API 进行 LDAP 认证的概念","slug":"_4-使用-jndi-api-进行-ldap-认证的概念","link":"#_4-使用-jndi-api-进行-ldap-认证的概念","children":[]},{"level":2,"title":"5. 如果我们没有用户的 DN 怎么办？","slug":"_5-如果我们没有用户的-dn-怎么办","link":"#_5-如果我们没有用户的-dn-怎么办","children":[]},{"level":2,"title":"6. 示例代码","slug":"_6-示例代码","link":"#_6-示例代码","children":[{"level":3,"title":"6.1. 设置嵌入式 ApacheDS 服务器","slug":"_6-1-设置嵌入式-apacheds-服务器","link":"#_6-1-设置嵌入式-apacheds-服务器","children":[]},{"level":3,"title":"6.2. 认证用户","slug":"_6-2-认证用户","link":"#_6-2-认证用户","children":[]},{"level":3,"title":"6.3. 处理用户认证失败","slug":"_6-3-处理用户认证失败","link":"#_6-3-处理用户认证失败","children":[]},{"level":3,"title":"6.4. 以管理员身份查找用户的 DN","slug":"_6-4-以管理员身份查找用户的-dn","link":"#_6-4-以管理员身份查找用户的-dn","children":[]},{"level":3,"title":"6.5. 使用查找到的用户 DN 进行认证","slug":"_6-5-使用查找到的用户-dn-进行认证","link":"#_6-5-使用查找到的用户-dn-进行认证","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721865158000,"updatedTime":1721865158000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.12,"words":2437},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-LDAP Authentication Using Pure Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>LDAP 使用纯 Java 进行认证</h1>\\n<h2><strong>1. 引言</strong></h2>\\n<p>在本文中，我们将介绍如何使用纯 Java 进行 LDAP 认证。此外，我们将探讨如何搜索用户的可区分名称（DN）。这很重要，因为 LDAP 需要 DN 来认证用户。</p>\\n<p>为了进行搜索和用户认证，我们将使用 Java 命名和目录接口（JNDI）的目录服务访问功能。</p>\\n<p>首先，我们将简要讨论 LDAP 和 JNDI 是什么。然后，我们将讨论如何通过 JNDI API 进行 LDAP 认证。</p>\\n<h2><strong>2. LDAP 是什么？</strong></h2>","autoDesc":true}');export{m as comp,u as data};
